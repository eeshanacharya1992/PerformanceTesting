<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.6.3">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan">
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
    </TestPlan>
    <hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group">
        <intProp name="ThreadGroup.num_threads">1</intProp>
        <intProp name="ThreadGroup.ramp_time">1</intProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller">
          <stringProp name="LoopController.loops">1</stringProp>
          <boolProp name="LoopController.continue_forever">false</boolProp>
        </elementProp>
      </ThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/v1/beacon/img.gif-2" enabled="true">
          <stringProp name="HTTPSampler.domain">b.6sc.co</stringProp>
          <stringProp name="HTTPSampler.port">443</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.path">/v1/beacon/img.gif</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments">
              <elementProp name="token" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">token</stringProp>
                <stringProp name="Argument.value">5f90029b56db57cd17027efd926646ef</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="svisitor" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">svisitor</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="visitor" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">visitor</stringProp>
                <stringProp name="Argument.value">e43783fd-0d0b-4b08-8499-84fc86871881</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="session" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">session</stringProp>
                <stringProp name="Argument.value">cfa3825d-7349-4a7a-87a4-13fccbbe3404</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="event" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">event</stringProp>
                <stringProp name="Argument.value">passive_time_track</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="q" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">q</stringProp>
                <stringProp name="Argument.value">{&quot;currentTime&quot;:&quot;Sat, 20 Jul 2024 15:23:21 GMT&quot;,&quot;lastTrackTime&quot;:&quot;Sat, 20 Jul 2024 15:23:19 GMT&quot;,&quot;timeSpent&quot;:&quot;2323&quot;,&quot;totalTimeSpent&quot;:&quot;12038&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="isIframe" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">isIframe</stringProp>
                <stringProp name="Argument.value">false</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="m" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">m</stringProp>
                <stringProp name="Argument.value">{&quot;description&quot;:&quot;Accelerate the planning, testing, delivery and support of optimized applications.&quot;,&quot;keywords&quot;:&quot;&quot;,&quot;title&quot;:&quot;Application Delivery Marketplace | OpenText&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="cb" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">cb</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="r" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">r</stringProp>
                <stringProp name="Argument.value">https://www.microfocus.com/marketplace/appdelivery/category/enterprise-agile</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="thirdParty" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">thirdParty</stringProp>
                <stringProp name="Argument.value">{}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="v2" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">v2</stringProp>
                <stringProp name="Argument.value">1</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="pageURL" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">pageURL</stringProp>
                <stringProp name="Argument.value">https://www.microfocus.com/marketplace/appdelivery</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="pageViewId" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">pageViewId</stringProp>
                <stringProp name="Argument.value">8284f563-3780-471c-8f65-86f088176bb7</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="ipv6" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">ipv6</stringProp>
                <stringProp name="Argument.value">2405:201:a008:d18b:9529:4cdd:5ec2:3539</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="v" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">v</stringProp>
                <stringProp name="Argument.value">1.1.22</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Sec-Fetch-Mode" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                <stringProp name="Header.value">no-cors</stringProp>
              </elementProp>
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">https://www.microfocus.com/</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Site" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                <stringProp name="Header.value">cross-site</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Priority" elementType="Header">
                <stringProp name="Header.name">Priority</stringProp>
                <stringProp name="Header.value">u=6, i</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:128.0) Gecko/20100101 Firefox/128.0</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">image/avif,image/webp,image/png,image/svg+xml,image/*;q=0.8,*/*;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Dest" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                <stringProp name="Header.value">image</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/v1/beacon/img.gif-1" enabled="true">
          <stringProp name="HTTPSampler.domain">b.6sc.co</stringProp>
          <stringProp name="HTTPSampler.port">443</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.path">/v1/beacon/img.gif</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments">
              <elementProp name="token" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">token</stringProp>
                <stringProp name="Argument.value">5f90029b56db57cd17027efd926646ef</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="svisitor" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">svisitor</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="visitor" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">visitor</stringProp>
                <stringProp name="Argument.value">e43783fd-0d0b-4b08-8499-84fc86871881</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="session" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">session</stringProp>
                <stringProp name="Argument.value">cfa3825d-7349-4a7a-87a4-13fccbbe3404</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="event" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">event</stringProp>
                <stringProp name="Argument.value">passive_time_track</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="q" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">q</stringProp>
                <stringProp name="Argument.value">{&quot;currentTime&quot;:&quot;Sat, 20 Jul 2024 15:23:25 GMT&quot;,&quot;lastTrackTime&quot;:&quot;Sat, 20 Jul 2024 15:23:22 GMT&quot;,&quot;timeSpent&quot;:&quot;3040&quot;,&quot;totalTimeSpent&quot;:&quot;16086&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="isIframe" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">isIframe</stringProp>
                <stringProp name="Argument.value">false</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="m" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">m</stringProp>
                <stringProp name="Argument.value">{&quot;description&quot;:&quot;Accelerate the planning, testing, delivery and support of optimized applications.&quot;,&quot;keywords&quot;:&quot;&quot;,&quot;title&quot;:&quot;Application Delivery Marketplace | OpenText&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="cb" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">cb</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="r" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">r</stringProp>
                <stringProp name="Argument.value">https://www.microfocus.com/marketplace/appdelivery/category/enterprise-agile</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="thirdParty" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">thirdParty</stringProp>
                <stringProp name="Argument.value">{}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="v2" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">v2</stringProp>
                <stringProp name="Argument.value">1</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="pageURL" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">pageURL</stringProp>
                <stringProp name="Argument.value">https://www.microfocus.com/marketplace/appdelivery</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="pageViewId" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">pageViewId</stringProp>
                <stringProp name="Argument.value">8284f563-3780-471c-8f65-86f088176bb7</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="ipv6" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">ipv6</stringProp>
                <stringProp name="Argument.value">2405:201:a008:d18b:9529:4cdd:5ec2:3539</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="v" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">v</stringProp>
                <stringProp name="Argument.value">1.1.22</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Sec-Fetch-Mode" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                <stringProp name="Header.value">no-cors</stringProp>
              </elementProp>
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">https://www.microfocus.com/</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Site" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                <stringProp name="Header.value">cross-site</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Priority" elementType="Header">
                <stringProp name="Header.name">Priority</stringProp>
                <stringProp name="Header.value">u=6, i</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:128.0) Gecko/20100101 Firefox/128.0</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">image/avif,image/webp,image/png,image/svg+xml,image/*;q=0.8,*/*;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Dest" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                <stringProp name="Header.value">image</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/v1/beacon/img.gif-4" enabled="true">
          <stringProp name="HTTPSampler.domain">b.6sc.co</stringProp>
          <stringProp name="HTTPSampler.port">443</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.path">/v1/beacon/img.gif</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments">
              <elementProp name="token" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">token</stringProp>
                <stringProp name="Argument.value">5f90029b56db57cd17027efd926646ef</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="svisitor" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">svisitor</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="visitor" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">visitor</stringProp>
                <stringProp name="Argument.value">e43783fd-0d0b-4b08-8499-84fc86871881</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="session" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">session</stringProp>
                <stringProp name="Argument.value">cfa3825d-7349-4a7a-87a4-13fccbbe3404</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="event" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">event</stringProp>
                <stringProp name="Argument.value">passive_time_track</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="q" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">q</stringProp>
                <stringProp name="Argument.value">{&quot;currentTime&quot;:&quot;Sat, 20 Jul 2024 15:23:22 GMT&quot;,&quot;lastTrackTime&quot;:&quot;Sat, 20 Jul 2024 15:23:21 GMT&quot;,&quot;timeSpent&quot;:&quot;1008&quot;,&quot;totalTimeSpent&quot;:&quot;13046&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="isIframe" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">isIframe</stringProp>
                <stringProp name="Argument.value">false</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="m" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">m</stringProp>
                <stringProp name="Argument.value">{&quot;description&quot;:&quot;Accelerate the planning, testing, delivery and support of optimized applications.&quot;,&quot;keywords&quot;:&quot;&quot;,&quot;title&quot;:&quot;Application Delivery Marketplace | OpenText&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="cb" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">cb</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="r" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">r</stringProp>
                <stringProp name="Argument.value">https://www.microfocus.com/marketplace/appdelivery/category/enterprise-agile</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="thirdParty" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">thirdParty</stringProp>
                <stringProp name="Argument.value">{}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="v2" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">v2</stringProp>
                <stringProp name="Argument.value">1</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="pageURL" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">pageURL</stringProp>
                <stringProp name="Argument.value">https://www.microfocus.com/marketplace/appdelivery</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="pageViewId" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">pageViewId</stringProp>
                <stringProp name="Argument.value">8284f563-3780-471c-8f65-86f088176bb7</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="ipv6" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">ipv6</stringProp>
                <stringProp name="Argument.value">2405:201:a008:d18b:9529:4cdd:5ec2:3539</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="v" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">v</stringProp>
                <stringProp name="Argument.value">1.1.22</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Sec-Fetch-Mode" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                <stringProp name="Header.value">no-cors</stringProp>
              </elementProp>
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">https://www.microfocus.com/</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Site" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                <stringProp name="Header.value">cross-site</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Priority" elementType="Header">
                <stringProp name="Header.name">Priority</stringProp>
                <stringProp name="Header.value">u=6, i</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:128.0) Gecko/20100101 Firefox/128.0</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">image/avif,image/webp,image/png,image/svg+xml,image/*;q=0.8,*/*;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Dest" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                <stringProp name="Header.value">image</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/v1/beacon/img.gif-3" enabled="true">
          <stringProp name="HTTPSampler.domain">b.6sc.co</stringProp>
          <stringProp name="HTTPSampler.port">443</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.path">/v1/beacon/img.gif</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments">
              <elementProp name="token" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">token</stringProp>
                <stringProp name="Argument.value">5f90029b56db57cd17027efd926646ef</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="svisitor" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">svisitor</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="visitor" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">visitor</stringProp>
                <stringProp name="Argument.value">e43783fd-0d0b-4b08-8499-84fc86871881</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="session" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">session</stringProp>
                <stringProp name="Argument.value">cfa3825d-7349-4a7a-87a4-13fccbbe3404</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="event" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">event</stringProp>
                <stringProp name="Argument.value">passive_time_track</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="q" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">q</stringProp>
                <stringProp name="Argument.value">{&quot;currentTime&quot;:&quot;Sat, 20 Jul 2024 15:23:19 GMT&quot;,&quot;lastTrackTime&quot;:&quot;Sat, 20 Jul 2024 15:23:18 GMT&quot;,&quot;timeSpent&quot;:&quot;1010&quot;,&quot;totalTimeSpent&quot;:&quot;9715&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="isIframe" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">isIframe</stringProp>
                <stringProp name="Argument.value">false</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="m" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">m</stringProp>
                <stringProp name="Argument.value">{&quot;description&quot;:&quot;Accelerate the planning, testing, delivery and support of optimized applications.&quot;,&quot;keywords&quot;:&quot;&quot;,&quot;title&quot;:&quot;Application Delivery Marketplace | OpenText&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="cb" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">cb</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="r" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">r</stringProp>
                <stringProp name="Argument.value">https://www.microfocus.com/marketplace/appdelivery/category/enterprise-agile</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="thirdParty" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">thirdParty</stringProp>
                <stringProp name="Argument.value">{}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="v2" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">v2</stringProp>
                <stringProp name="Argument.value">1</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="pageURL" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">pageURL</stringProp>
                <stringProp name="Argument.value">https://www.microfocus.com/marketplace/appdelivery</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="pageViewId" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">pageViewId</stringProp>
                <stringProp name="Argument.value">8284f563-3780-471c-8f65-86f088176bb7</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="ipv6" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">ipv6</stringProp>
                <stringProp name="Argument.value">2405:201:a008:d18b:9529:4cdd:5ec2:3539</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="v" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">v</stringProp>
                <stringProp name="Argument.value">1.1.22</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Sec-Fetch-Mode" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                <stringProp name="Header.value">no-cors</stringProp>
              </elementProp>
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">https://www.microfocus.com/</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Site" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                <stringProp name="Header.value">cross-site</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Priority" elementType="Header">
                <stringProp name="Header.name">Priority</stringProp>
                <stringProp name="Header.value">u=6, i</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:128.0) Gecko/20100101 Firefox/128.0</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">image/avif,image/webp,image/png,image/svg+xml,image/*;q=0.8,*/*;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Dest" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                <stringProp name="Header.value">image</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/collect-6" enabled="true">
          <stringProp name="HTTPSampler.domain">y.clarity.ms</stringProp>
          <stringProp name="HTTPSampler.port">443</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">/collect</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;e&quot;:[&quot;0.7.32&quot;,5,6089,5364,&quot;iu69ce0l9t&quot;,&quot;dprpjk&quot;,&quot;lkifca&quot;,1,0,0],&quot;a&quot;:[[6089,4,0,1536,2380,1536,731,0,0,1062,6,2970,0],[11453,0,2,189,3,10,4,14,5,3,25,5],[11453,36,6,[6102,0,9415,0,10437,0]]],&quot;p&quot;:[[6102,6,313,191,312,&quot;LI&quot;,&quot;data-slideshow-slide=img&quot;,&quot;aria-hidden=false&quot;,&quot;class=uk-active uk-slideshow-fade-out&quot;,&quot;style=height: 350px; animation-duration: 500ms;&quot;,315,191,314,[5,6],&quot;aria-hidden=true&quot;,&quot;style=height: 350px; animation-duration: 500ms; opacity: 1;&quot;,320,193,319,[5],&quot;data-uk-slideshow-item=0&quot;,&quot;class=&quot;,322,193,321,[5],&quot;data-uk-slideshow-item=1&quot;,&quot;class=uk-active&quot;],[9415,6,313,191,312,&quot;LI&quot;,&quot;data-slideshow-slide=img&quot;,&quot;aria-hidden=false&quot;,&quot;class=uk-active&quot;,&quot;style=height: 350px; animation-duration: 500ms; opacity: 0;&quot;],[10437,6,315,191,314,&quot;LI&quot;,&quot;data-slideshow-slide=img&quot;,&quot;aria-hidden=false&quot;,&quot;style=animation-duration: 500ms; opacity: 1; height: 350px;&quot;,&quot;class=uk-active&quot;,313,191,312,[5,6],&quot;aria-hidden=true&quot;,&quot;class=&quot;,&quot;style=animation-duration: 500ms; opacity: 0; height: 350px;&quot;]]}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Sec-Fetch-Mode" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                <stringProp name="Header.value">cors</stringProp>
              </elementProp>
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">https://www.microfocus.com/</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Site" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                <stringProp name="Header.value">cross-site</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Origin" elementType="Header">
                <stringProp name="Header.name">Origin</stringProp>
                <stringProp name="Header.value">https://www.microfocus.com</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">text/plain;charset=UTF-8</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:128.0) Gecko/20100101 Firefox/128.0</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Dest" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                <stringProp name="Header.value">empty</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/v1/beacon/img.gif-9" enabled="true">
          <stringProp name="HTTPSampler.domain">b.6sc.co</stringProp>
          <stringProp name="HTTPSampler.port">443</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.path">/v1/beacon/img.gif</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments">
              <elementProp name="token" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">token</stringProp>
                <stringProp name="Argument.value">5f90029b56db57cd17027efd926646ef</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="svisitor" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">svisitor</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="visitor" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">visitor</stringProp>
                <stringProp name="Argument.value">e43783fd-0d0b-4b08-8499-84fc86871881</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="session" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">session</stringProp>
                <stringProp name="Argument.value">cfa3825d-7349-4a7a-87a4-13fccbbe3404</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="event" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">event</stringProp>
                <stringProp name="Argument.value">passive_time_track</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="q" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">q</stringProp>
                <stringProp name="Argument.value">{&quot;currentTime&quot;:&quot;Sat, 20 Jul 2024 15:23:28 GMT&quot;,&quot;lastTrackTime&quot;:&quot;Sat, 20 Jul 2024 15:23:25 GMT&quot;,&quot;timeSpent&quot;:&quot;3057&quot;,&quot;totalTimeSpent&quot;:&quot;19143&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="isIframe" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">isIframe</stringProp>
                <stringProp name="Argument.value">false</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="m" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">m</stringProp>
                <stringProp name="Argument.value">{&quot;description&quot;:&quot;Accelerate the planning, testing, delivery and support of optimized applications.&quot;,&quot;keywords&quot;:&quot;&quot;,&quot;title&quot;:&quot;Application Delivery Marketplace | OpenText&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="cb" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">cb</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="r" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">r</stringProp>
                <stringProp name="Argument.value">https://www.microfocus.com/marketplace/appdelivery/category/enterprise-agile</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="thirdParty" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">thirdParty</stringProp>
                <stringProp name="Argument.value">{}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="v2" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">v2</stringProp>
                <stringProp name="Argument.value">1</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="pageURL" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">pageURL</stringProp>
                <stringProp name="Argument.value">https://www.microfocus.com/marketplace/appdelivery</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="pageViewId" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">pageViewId</stringProp>
                <stringProp name="Argument.value">8284f563-3780-471c-8f65-86f088176bb7</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="ipv6" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">ipv6</stringProp>
                <stringProp name="Argument.value">2405:201:a008:d18b:9529:4cdd:5ec2:3539</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="v" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">v</stringProp>
                <stringProp name="Argument.value">1.1.22</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Sec-Fetch-Mode" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                <stringProp name="Header.value">no-cors</stringProp>
              </elementProp>
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">https://www.microfocus.com/</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Site" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                <stringProp name="Header.value">cross-site</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Priority" elementType="Header">
                <stringProp name="Header.name">Priority</stringProp>
                <stringProp name="Header.value">u=6, i</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:128.0) Gecko/20100101 Firefox/128.0</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">image/avif,image/webp,image/png,image/svg+xml,image/*;q=0.8,*/*;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Dest" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                <stringProp name="Header.value">image</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/collect-8" enabled="true">
          <stringProp name="HTTPSampler.domain">y.clarity.ms</stringProp>
          <stringProp name="HTTPSampler.port">443</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">/collect</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;e&quot;:[&quot;0.7.32&quot;,6,11453,7106,&quot;iu69ce0l9t&quot;,&quot;dprpjk&quot;,&quot;lkifca&quot;,1,0,0],&quot;a&quot;:[[11453,4,0,1536,2380,1536,731,0,0,1062,6,10437,0],[18559,1,4,[&quot;analytics.google.com&quot;]],[18559,0,2,374,3,1,4,4,5,1,25,5,28,6124],[18559,36,6,[13477,0]]],&quot;p&quot;:[[13477,6,317,191,316,&quot;LI&quot;,&quot;data-slideshow-slide=img&quot;,&quot;aria-hidden=true&quot;,&quot;style=height: 350px; animation-duration: 500ms; opacity: 1;&quot;,315,191,314,[5,6],&quot;aria-hidden=false&quot;,&quot;style=animation-duration: 500ms; opacity: 1; height: 350px;&quot;,&quot;class=uk-active uk-slideshow-fade-out&quot;,322,193,321,[5],&quot;data-uk-slideshow-item=1&quot;,&quot;class=&quot;,324,193,323,[5],&quot;data-uk-slideshow-item=2&quot;,&quot;class=uk-active&quot;]]}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Sec-Fetch-Mode" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                <stringProp name="Header.value">cors</stringProp>
              </elementProp>
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">https://www.microfocus.com/</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Site" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                <stringProp name="Header.value">cross-site</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Origin" elementType="Header">
                <stringProp name="Header.name">Origin</stringProp>
                <stringProp name="Header.value">https://www.microfocus.com</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">text/plain;charset=UTF-8</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:128.0) Gecko/20100101 Firefox/128.0</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Dest" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                <stringProp name="Header.value">empty</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/v1/beacon/img.gif-10" enabled="true">
          <stringProp name="HTTPSampler.domain">b.6sc.co</stringProp>
          <stringProp name="HTTPSampler.port">443</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.path">/v1/beacon/img.gif</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments">
              <elementProp name="token" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">token</stringProp>
                <stringProp name="Argument.value">5f90029b56db57cd17027efd926646ef</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="svisitor" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">svisitor</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="visitor" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">visitor</stringProp>
                <stringProp name="Argument.value">e43783fd-0d0b-4b08-8499-84fc86871881</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="session" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">session</stringProp>
                <stringProp name="Argument.value">cfa3825d-7349-4a7a-87a4-13fccbbe3404</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="event" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">event</stringProp>
                <stringProp name="Argument.value">passive_time_track</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="q" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">q</stringProp>
                <stringProp name="Argument.value">{&quot;currentTime&quot;:&quot;Sat, 20 Jul 2024 15:23:31 GMT&quot;,&quot;lastTrackTime&quot;:&quot;Sat, 20 Jul 2024 15:23:28 GMT&quot;,&quot;timeSpent&quot;:&quot;3034&quot;,&quot;totalTimeSpent&quot;:&quot;22177&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="isIframe" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">isIframe</stringProp>
                <stringProp name="Argument.value">false</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="m" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">m</stringProp>
                <stringProp name="Argument.value">{&quot;description&quot;:&quot;Accelerate the planning, testing, delivery and support of optimized applications.&quot;,&quot;keywords&quot;:&quot;&quot;,&quot;title&quot;:&quot;Application Delivery Marketplace | OpenText&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="cb" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">cb</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="r" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">r</stringProp>
                <stringProp name="Argument.value">https://www.microfocus.com/marketplace/appdelivery/category/enterprise-agile</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="thirdParty" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">thirdParty</stringProp>
                <stringProp name="Argument.value">{}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="v2" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">v2</stringProp>
                <stringProp name="Argument.value">1</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="pageURL" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">pageURL</stringProp>
                <stringProp name="Argument.value">https://www.microfocus.com/marketplace/appdelivery</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="pageViewId" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">pageViewId</stringProp>
                <stringProp name="Argument.value">8284f563-3780-471c-8f65-86f088176bb7</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="ipv6" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">ipv6</stringProp>
                <stringProp name="Argument.value">2405:201:a008:d18b:9529:4cdd:5ec2:3539</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="v" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">v</stringProp>
                <stringProp name="Argument.value">1.1.22</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Sec-Fetch-Mode" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                <stringProp name="Header.value">no-cors</stringProp>
              </elementProp>
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">https://www.microfocus.com/</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Site" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                <stringProp name="Header.value">cross-site</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Priority" elementType="Header">
                <stringProp name="Header.name">Priority</stringProp>
                <stringProp name="Header.value">u=6, i</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:128.0) Gecko/20100101 Firefox/128.0</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">image/avif,image/webp,image/png,image/svg+xml,image/*;q=0.8,*/*;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Dest" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                <stringProp name="Header.value">image</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/v1/beacon/img.gif-11" enabled="true">
          <stringProp name="HTTPSampler.domain">b.6sc.co</stringProp>
          <stringProp name="HTTPSampler.port">443</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.path">/v1/beacon/img.gif</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments">
              <elementProp name="token" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">token</stringProp>
                <stringProp name="Argument.value">5f90029b56db57cd17027efd926646ef</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="svisitor" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">svisitor</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="visitor" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">visitor</stringProp>
                <stringProp name="Argument.value">e43783fd-0d0b-4b08-8499-84fc86871881</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="session" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">session</stringProp>
                <stringProp name="Argument.value">cfa3825d-7349-4a7a-87a4-13fccbbe3404</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="event" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">event</stringProp>
                <stringProp name="Argument.value">passive_time_track</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="q" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">q</stringProp>
                <stringProp name="Argument.value">{&quot;currentTime&quot;:&quot;Sat, 20 Jul 2024 15:23:34 GMT&quot;,&quot;lastTrackTime&quot;:&quot;Sat, 20 Jul 2024 15:23:31 GMT&quot;,&quot;timeSpent&quot;:&quot;3390&quot;,&quot;totalTimeSpent&quot;:&quot;25567&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="isIframe" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">isIframe</stringProp>
                <stringProp name="Argument.value">false</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="m" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">m</stringProp>
                <stringProp name="Argument.value">{&quot;description&quot;:&quot;Accelerate the planning, testing, delivery and support of optimized applications.&quot;,&quot;keywords&quot;:&quot;&quot;,&quot;title&quot;:&quot;Application Delivery Marketplace | OpenText&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="cb" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">cb</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="r" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">r</stringProp>
                <stringProp name="Argument.value">https://www.microfocus.com/marketplace/appdelivery/category/enterprise-agile</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="thirdParty" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">thirdParty</stringProp>
                <stringProp name="Argument.value">{}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="v2" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">v2</stringProp>
                <stringProp name="Argument.value">1</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="pageURL" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">pageURL</stringProp>
                <stringProp name="Argument.value">https://www.microfocus.com/marketplace/appdelivery</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="pageViewId" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">pageViewId</stringProp>
                <stringProp name="Argument.value">8284f563-3780-471c-8f65-86f088176bb7</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="ipv6" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">ipv6</stringProp>
                <stringProp name="Argument.value">2405:201:a008:d18b:9529:4cdd:5ec2:3539</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="v" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">v</stringProp>
                <stringProp name="Argument.value">1.1.22</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Sec-Fetch-Mode" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                <stringProp name="Header.value">no-cors</stringProp>
              </elementProp>
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">https://www.microfocus.com/</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Site" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                <stringProp name="Header.value">cross-site</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Priority" elementType="Header">
                <stringProp name="Header.name">Priority</stringProp>
                <stringProp name="Header.value">u=6, i</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:128.0) Gecko/20100101 Firefox/128.0</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">image/avif,image/webp,image/png,image/svg+xml,image/*;q=0.8,*/*;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Dest" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                <stringProp name="Header.value">image</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/collect-12" enabled="true">
          <stringProp name="HTTPSampler.domain">www.google-analytics.com</stringProp>
          <stringProp name="HTTPSampler.port">443</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.path">/collect</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments">
              <elementProp name="v" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">v</stringProp>
                <stringProp name="Argument.value">1</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="_v" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">_v</stringProp>
                <stringProp name="Argument.value">j101</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="a" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">a</stringProp>
                <stringProp name="Argument.value">713076965</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="t" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">t</stringProp>
                <stringProp name="Argument.value">event</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="ni" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">ni</stringProp>
                <stringProp name="Argument.value">0</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="_s" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">_s</stringProp>
                <stringProp name="Argument.value">1</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="dl" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">dl</stringProp>
                <stringProp name="Argument.value">https://www.microfocus.com/marketplace/appdelivery</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="ul" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">ul</stringProp>
                <stringProp name="Argument.value">en-us</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="de" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">de</stringProp>
                <stringProp name="Argument.value">UTF-8</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="dt" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">dt</stringProp>
                <stringProp name="Argument.value">Application Delivery Marketplace | OpenText</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="sd" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">sd</stringProp>
                <stringProp name="Argument.value">24-bit</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="sr" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">sr</stringProp>
                <stringProp name="Argument.value">1536x864</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="vp" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">vp</stringProp>
                <stringProp name="Argument.value">1536x731</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="je" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">je</stringProp>
                <stringProp name="Argument.value">0</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="ec" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">ec</stringProp>
                <stringProp name="Argument.value">Event login</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="ea" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">ea</stringProp>
                <stringProp name="Argument.value">https://www.microfocus.com/marketplace/appdelivery</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="el" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">el</stringProp>
                <stringProp name="Argument.value">Sign in</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="_u" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">_u</stringProp>
                <stringProp name="Argument.value">SCCACEABBAAAACgAIAC~</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="jid" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">jid</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="gjid" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">gjid</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="cid" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">cid</stringProp>
                <stringProp name="Argument.value">1264267099.1721486760</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="tid" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">tid</stringProp>
                <stringProp name="Argument.value">UA-44010430-10</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="_gid" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">_gid</stringProp>
                <stringProp name="Argument.value">675600319.1721486761</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="gtm" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">gtm</stringProp>
                <stringProp name="Argument.value">45He47h0n71MXKD45v71343913za200</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="gcs" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">gcs</stringProp>
                <stringProp name="Argument.value">G111</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="gcd" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">gcd</stringProp>
                <stringProp name="Argument.value">13n3n3n3n5</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="dma" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">dma</stringProp>
                <stringProp name="Argument.value">0</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="tag_exp" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">tag_exp</stringProp>
                <stringProp name="Argument.value">0</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="z" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">z</stringProp>
                <stringProp name="Argument.value">418698218</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Sec-Fetch-Mode" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                <stringProp name="Header.value">no-cors</stringProp>
              </elementProp>
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">https://www.microfocus.com/</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Site" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                <stringProp name="Header.value">cross-site</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Priority" elementType="Header">
                <stringProp name="Header.name">Priority</stringProp>
                <stringProp name="Header.value">u=0, i</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:128.0) Gecko/20100101 Firefox/128.0</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">image/avif,image/webp,image/png,image/svg+xml,image/*;q=0.8,*/*;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Dest" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                <stringProp name="Header.value">image</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/collect-13" enabled="true">
          <stringProp name="HTTPSampler.domain">www.google-analytics.com</stringProp>
          <stringProp name="HTTPSampler.port">443</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.path">/collect</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments">
              <elementProp name="v" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">v</stringProp>
                <stringProp name="Argument.value">1</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="_v" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">_v</stringProp>
                <stringProp name="Argument.value">j101</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="a" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">a</stringProp>
                <stringProp name="Argument.value">713076965</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="t" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">t</stringProp>
                <stringProp name="Argument.value">event</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="ni" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">ni</stringProp>
                <stringProp name="Argument.value">0</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="_s" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">_s</stringProp>
                <stringProp name="Argument.value">1</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="dl" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">dl</stringProp>
                <stringProp name="Argument.value">https://www.microfocus.com/marketplace/appdelivery</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="ul" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">ul</stringProp>
                <stringProp name="Argument.value">en-us</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="de" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">de</stringProp>
                <stringProp name="Argument.value">UTF-8</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="dt" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">dt</stringProp>
                <stringProp name="Argument.value">Application Delivery Marketplace | OpenText</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="sd" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">sd</stringProp>
                <stringProp name="Argument.value">24-bit</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="sr" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">sr</stringProp>
                <stringProp name="Argument.value">1536x864</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="vp" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">vp</stringProp>
                <stringProp name="Argument.value">1536x731</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="je" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">je</stringProp>
                <stringProp name="Argument.value">0</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="ec" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">ec</stringProp>
                <stringProp name="Argument.value">Outbound Link Click</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="ea" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">ea</stringProp>
                <stringProp name="Argument.value">https://www.microfocus.com/marketplace/appdelivery</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="el" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">el</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="_u" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">_u</stringProp>
                <stringProp name="Argument.value">SCCACEABBAAAACgAIAC~</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="jid" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">jid</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="gjid" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">gjid</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="cid" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">cid</stringProp>
                <stringProp name="Argument.value">1264267099.1721486760</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="tid" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">tid</stringProp>
                <stringProp name="Argument.value">UA-44010430-10</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="_gid" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">_gid</stringProp>
                <stringProp name="Argument.value">675600319.1721486761</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="gtm" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">gtm</stringProp>
                <stringProp name="Argument.value">45He47h0n71MXKD45v71343913za200</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="gcs" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">gcs</stringProp>
                <stringProp name="Argument.value">G111</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="gcd" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">gcd</stringProp>
                <stringProp name="Argument.value">13n3n3n3n5</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="dma" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">dma</stringProp>
                <stringProp name="Argument.value">0</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="tag_exp" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">tag_exp</stringProp>
                <stringProp name="Argument.value">0</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="z" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">z</stringProp>
                <stringProp name="Argument.value">1525658193</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Sec-Fetch-Mode" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                <stringProp name="Header.value">no-cors</stringProp>
              </elementProp>
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">https://www.microfocus.com/</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Site" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                <stringProp name="Header.value">cross-site</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Priority" elementType="Header">
                <stringProp name="Header.name">Priority</stringProp>
                <stringProp name="Header.value">u=6, i</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:128.0) Gecko/20100101 Firefox/128.0</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">image/avif,image/webp,image/png,image/svg+xml,image/*;q=0.8,*/*;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Dest" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                <stringProp name="Header.value">image</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/a-15" enabled="true">
          <stringProp name="HTTPSampler.domain">www.googletagmanager.com</stringProp>
          <stringProp name="HTTPSampler.port">443</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.path">/a</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments">
              <elementProp name="id" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">id</stringProp>
                <stringProp name="Argument.value">G-SWJ97E3ZRQ</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="v" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">v</stringProp>
                <stringProp name="Argument.value">3</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="t" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">t</stringProp>
                <stringProp name="Argument.value">t</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="pid" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">pid</stringProp>
                <stringProp name="Argument.value">705380417</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="cv" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">cv</stringProp>
                <stringProp name="Argument.value">1</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="rv" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">rv</stringProp>
                <stringProp name="Argument.value">47h0</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="tc" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">tc</stringProp>
                <stringProp name="Argument.value">10</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="tag_exp" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">tag_exp</stringProp>
                <stringProp name="Argument.value">0</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="es" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">es</stringProp>
                <stringProp name="Argument.value">1</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="e" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">e</stringProp>
                <stringProp name="Argument.value">gtm.linkClick</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="eid" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">eid</stringProp>
                <stringProp name="Argument.value">62</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="u" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">u</stringProp>
                <stringProp name="Argument.value">AgAAAIAIAAAAAIAAAAAAAAAY</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="h" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">h</stringProp>
                <stringProp name="Argument.value">Ag</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="z" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">z</stringProp>
                <stringProp name="Argument.value">0</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Sec-Fetch-Mode" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                <stringProp name="Header.value">no-cors</stringProp>
              </elementProp>
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">https://www.microfocus.com/</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Site" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                <stringProp name="Header.value">cross-site</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Priority" elementType="Header">
                <stringProp name="Header.name">Priority</stringProp>
                <stringProp name="Header.value">u=5, i</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:128.0) Gecko/20100101 Firefox/128.0</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">image/avif,image/webp,image/png,image/svg+xml,image/*;q=0.8,*/*;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Dest" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                <stringProp name="Header.value">image</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/a-14" enabled="true">
          <stringProp name="HTTPSampler.domain">www.googletagmanager.com</stringProp>
          <stringProp name="HTTPSampler.port">443</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.path">/a</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments">
              <elementProp name="id" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">id</stringProp>
                <stringProp name="Argument.value">G-SWJ97E3ZRQ</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="v" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">v</stringProp>
                <stringProp name="Argument.value">3</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="t" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">t</stringProp>
                <stringProp name="Argument.value">t</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="pid" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">pid</stringProp>
                <stringProp name="Argument.value">705380417</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="cv" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">cv</stringProp>
                <stringProp name="Argument.value">1</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="rv" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">rv</stringProp>
                <stringProp name="Argument.value">47h0</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="tc" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">tc</stringProp>
                <stringProp name="Argument.value">10</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="tag_exp" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">tag_exp</stringProp>
                <stringProp name="Argument.value">0</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="es" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">es</stringProp>
                <stringProp name="Argument.value">1</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="e" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">e</stringProp>
                <stringProp name="Argument.value">gtm.triggerGroup</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="eid" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">eid</stringProp>
                <stringProp name="Argument.value">63</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="u" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">u</stringProp>
                <stringProp name="Argument.value">AgAAAIAIAAAAAIAAAAAAAAAY</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="h" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">h</stringProp>
                <stringProp name="Argument.value">Ag</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="z" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">z</stringProp>
                <stringProp name="Argument.value">0</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Sec-Fetch-Mode" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                <stringProp name="Header.value">no-cors</stringProp>
              </elementProp>
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">https://www.microfocus.com/</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Site" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                <stringProp name="Header.value">cross-site</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Priority" elementType="Header">
                <stringProp name="Header.name">Priority</stringProp>
                <stringProp name="Header.value">u=5, i</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:128.0) Gecko/20100101 Firefox/128.0</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">image/avif,image/webp,image/png,image/svg+xml,image/*;q=0.8,*/*;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Dest" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                <stringProp name="Header.value">image</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/a-16" enabled="true">
          <stringProp name="HTTPSampler.domain">www.googletagmanager.com</stringProp>
          <stringProp name="HTTPSampler.port">443</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.path">/a</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments">
              <elementProp name="id" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">id</stringProp>
                <stringProp name="Argument.value">G-SWJ97E3ZRQ</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="v" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">v</stringProp>
                <stringProp name="Argument.value">3</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="t" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">t</stringProp>
                <stringProp name="Argument.value">t</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="pid" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">pid</stringProp>
                <stringProp name="Argument.value">705380417</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="cv" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">cv</stringProp>
                <stringProp name="Argument.value">1</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="rv" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">rv</stringProp>
                <stringProp name="Argument.value">47h0</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="tc" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">tc</stringProp>
                <stringProp name="Argument.value">10</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="tag_exp" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">tag_exp</stringProp>
                <stringProp name="Argument.value">0</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="es" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">es</stringProp>
                <stringProp name="Argument.value">1</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="e" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">e</stringProp>
                <stringProp name="Argument.value">gtm.elementVisibility</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="eid" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">eid</stringProp>
                <stringProp name="Argument.value">65</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="u" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">u</stringProp>
                <stringProp name="Argument.value">AgAAAIAIAAAAAIAAAAAAAAAY</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="h" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">h</stringProp>
                <stringProp name="Argument.value">Ag</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="z" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">z</stringProp>
                <stringProp name="Argument.value">0</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Sec-Fetch-Mode" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                <stringProp name="Header.value">no-cors</stringProp>
              </elementProp>
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">https://www.microfocus.com/</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Site" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                <stringProp name="Header.value">cross-site</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Priority" elementType="Header">
                <stringProp name="Header.name">Priority</stringProp>
                <stringProp name="Header.value">u=5, i</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:128.0) Gecko/20100101 Firefox/128.0</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">image/avif,image/webp,image/png,image/svg+xml,image/*;q=0.8,*/*;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Dest" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                <stringProp name="Header.value">image</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/a-18" enabled="true">
          <stringProp name="HTTPSampler.domain">www.googletagmanager.com</stringProp>
          <stringProp name="HTTPSampler.port">443</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.path">/a</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments">
              <elementProp name="id" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">id</stringProp>
                <stringProp name="Argument.value">G-SWJ97E3ZRQ</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="v" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">v</stringProp>
                <stringProp name="Argument.value">3</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="t" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">t</stringProp>
                <stringProp name="Argument.value">t</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="pid" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">pid</stringProp>
                <stringProp name="Argument.value">705380417</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="cv" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">cv</stringProp>
                <stringProp name="Argument.value">1</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="rv" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">rv</stringProp>
                <stringProp name="Argument.value">47h0</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="tc" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">tc</stringProp>
                <stringProp name="Argument.value">10</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="tag_exp" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">tag_exp</stringProp>
                <stringProp name="Argument.value">0</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="es" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">es</stringProp>
                <stringProp name="Argument.value">1</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="e" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">e</stringProp>
                <stringProp name="Argument.value">gtm.click</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="eid" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">eid</stringProp>
                <stringProp name="Argument.value">60</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="u" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">u</stringProp>
                <stringProp name="Argument.value">AgAAAIAIAAAAAIAAAAAAAAAY</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="h" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">h</stringProp>
                <stringProp name="Argument.value">Ag</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="z" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">z</stringProp>
                <stringProp name="Argument.value">0</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Sec-Fetch-Mode" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                <stringProp name="Header.value">no-cors</stringProp>
              </elementProp>
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">https://www.microfocus.com/</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Site" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                <stringProp name="Header.value">cross-site</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Priority" elementType="Header">
                <stringProp name="Header.name">Priority</stringProp>
                <stringProp name="Header.value">u=0, i</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:128.0) Gecko/20100101 Firefox/128.0</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">image/avif,image/webp,image/png,image/svg+xml,image/*;q=0.8,*/*;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Dest" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                <stringProp name="Header.value">image</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/v1/beacon/img.gif-17" enabled="true">
          <stringProp name="HTTPSampler.domain">b.6sc.co</stringProp>
          <stringProp name="HTTPSampler.port">443</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.path">/v1/beacon/img.gif</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments">
              <elementProp name="token" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">token</stringProp>
                <stringProp name="Argument.value">5f90029b56db57cd17027efd926646ef</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="svisitor" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">svisitor</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="visitor" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">visitor</stringProp>
                <stringProp name="Argument.value">e43783fd-0d0b-4b08-8499-84fc86871881</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="session" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">session</stringProp>
                <stringProp name="Argument.value">cfa3825d-7349-4a7a-87a4-13fccbbe3404</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="event" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">event</stringProp>
                <stringProp name="Argument.value">click</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="q" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">q</stringProp>
                <stringProp name="Argument.value">{&quot;event_value&quot;:&quot;&quot;,&quot;event_id&quot;:&quot;guest-welcome&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="isIframe" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">isIframe</stringProp>
                <stringProp name="Argument.value">false</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="m" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">m</stringProp>
                <stringProp name="Argument.value">{&quot;description&quot;:&quot;Accelerate the planning, testing, delivery and support of optimized applications.&quot;,&quot;keywords&quot;:&quot;&quot;,&quot;title&quot;:&quot;Application Delivery Marketplace | OpenText&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="cb" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">cb</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="r" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">r</stringProp>
                <stringProp name="Argument.value">https://www.microfocus.com/marketplace/appdelivery/category/enterprise-agile</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="thirdParty" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">thirdParty</stringProp>
                <stringProp name="Argument.value">{}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="v2" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">v2</stringProp>
                <stringProp name="Argument.value">1</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="pageURL" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">pageURL</stringProp>
                <stringProp name="Argument.value">https://www.microfocus.com/marketplace/appdelivery</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="pageViewId" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">pageViewId</stringProp>
                <stringProp name="Argument.value">8284f563-3780-471c-8f65-86f088176bb7</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="ipv6" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">ipv6</stringProp>
                <stringProp name="Argument.value">2405:201:a008:d18b:9529:4cdd:5ec2:3539</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="v" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">v</stringProp>
                <stringProp name="Argument.value">1.1.22</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Sec-Fetch-Mode" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                <stringProp name="Header.value">no-cors</stringProp>
              </elementProp>
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">https://www.microfocus.com/</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Site" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                <stringProp name="Header.value">cross-site</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Priority" elementType="Header">
                <stringProp name="Header.name">Priority</stringProp>
                <stringProp name="Header.value">u=0, i</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:128.0) Gecko/20100101 Firefox/128.0</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">image/avif,image/webp,image/png,image/svg+xml,image/*;q=0.8,*/*;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Dest" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                <stringProp name="Header.value">image</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/collect-19" enabled="true">
          <stringProp name="HTTPSampler.domain">www.google-analytics.com</stringProp>
          <stringProp name="HTTPSampler.port">443</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.path">/collect</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments">
              <elementProp name="v" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">v</stringProp>
                <stringProp name="Argument.value">1</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="_v" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">_v</stringProp>
                <stringProp name="Argument.value">j101</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="a" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">a</stringProp>
                <stringProp name="Argument.value">713076965</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="t" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">t</stringProp>
                <stringProp name="Argument.value">event</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="ni" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">ni</stringProp>
                <stringProp name="Argument.value">0</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="_s" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">_s</stringProp>
                <stringProp name="Argument.value">1</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="dl" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">dl</stringProp>
                <stringProp name="Argument.value">https://www.microfocus.com/marketplace/appdelivery</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="ul" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">ul</stringProp>
                <stringProp name="Argument.value">en-us</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="de" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">de</stringProp>
                <stringProp name="Argument.value">UTF-8</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="dt" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">dt</stringProp>
                <stringProp name="Argument.value">Application Delivery Marketplace | OpenText</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="sd" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">sd</stringProp>
                <stringProp name="Argument.value">24-bit</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="sr" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">sr</stringProp>
                <stringProp name="Argument.value">1536x864</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="vp" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">vp</stringProp>
                <stringProp name="Argument.value">1536x731</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="je" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">je</stringProp>
                <stringProp name="Argument.value">0</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="ec" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">ec</stringProp>
                <stringProp name="Argument.value">Event login</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="ea" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">ea</stringProp>
                <stringProp name="Argument.value">https://www.microfocus.com/marketplace/appdelivery</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="el" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">el</stringProp>
                <stringProp name="Argument.value">NAM account detected</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="_u" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">_u</stringProp>
                <stringProp name="Argument.value">SCCACEABBAAAACgAIAC~</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="jid" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">jid</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="gjid" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">gjid</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="cid" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">cid</stringProp>
                <stringProp name="Argument.value">1264267099.1721486760</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="tid" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">tid</stringProp>
                <stringProp name="Argument.value">UA-44010430-10</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="_gid" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">_gid</stringProp>
                <stringProp name="Argument.value">675600319.1721486761</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="gtm" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">gtm</stringProp>
                <stringProp name="Argument.value">45He47h0n71MXKD45v71343913za200</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="gcs" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">gcs</stringProp>
                <stringProp name="Argument.value">G111</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="gcd" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">gcd</stringProp>
                <stringProp name="Argument.value">13n3n3n3n5</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="dma" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">dma</stringProp>
                <stringProp name="Argument.value">0</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="tag_exp" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">tag_exp</stringProp>
                <stringProp name="Argument.value">0</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="z" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">z</stringProp>
                <stringProp name="Argument.value">878936087</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Sec-Fetch-Mode" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                <stringProp name="Header.value">no-cors</stringProp>
              </elementProp>
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">https://www.microfocus.com/</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Site" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                <stringProp name="Header.value">cross-site</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Priority" elementType="Header">
                <stringProp name="Header.name">Priority</stringProp>
                <stringProp name="Header.value">u=0, i</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:128.0) Gecko/20100101 Firefox/128.0</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">image/avif,image/webp,image/png,image/svg+xml,image/*;q=0.8,*/*;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Dest" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                <stringProp name="Header.value">image</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/marketplace/api/user/get_forgot_link/eeshanacharya@gmail.com-20" enabled="true">
          <stringProp name="HTTPSampler.domain">www.microfocus.com</stringProp>
          <stringProp name="HTTPSampler.port">443</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.path">/marketplace/api/user/get_forgot_link/eeshanacharya@gmail.com</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Sec-Fetch-Mode" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                <stringProp name="Header.value">cors</stringProp>
              </elementProp>
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">https://www.microfocus.com/marketplace/appdelivery</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Site" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                <stringProp name="Header.value">same-origin</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Priority" elementType="Header">
                <stringProp name="Header.name">Priority</stringProp>
                <stringProp name="Header.value">u=0</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="X-Requested-With" elementType="Header">
                <stringProp name="Header.name">X-Requested-With</stringProp>
                <stringProp name="Header.value">XMLHttpRequest</stringProp>
              </elementProp>
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:128.0) Gecko/20100101 Firefox/128.0</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Dest" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                <stringProp name="Header.value">empty</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/marketplace/api/user/source/ispassport/eeshanacharya@gmail.com-21" enabled="true">
          <stringProp name="HTTPSampler.domain">www.microfocus.com</stringProp>
          <stringProp name="HTTPSampler.port">443</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.path">/marketplace/api/user/source/ispassport/eeshanacharya@gmail.com</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Sec-Fetch-Mode" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                <stringProp name="Header.value">cors</stringProp>
              </elementProp>
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">https://www.microfocus.com/marketplace/appdelivery</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Site" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                <stringProp name="Header.value">same-origin</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Priority" elementType="Header">
                <stringProp name="Header.name">Priority</stringProp>
                <stringProp name="Header.value">u=0</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">application/json, text/javascript, */*; q=0.01</stringProp>
              </elementProp>
              <elementProp name="X-Requested-With" elementType="Header">
                <stringProp name="Header.name">X-Requested-With</stringProp>
                <stringProp name="Header.value">XMLHttpRequest</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:128.0) Gecko/20100101 Firefox/128.0</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Dest" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                <stringProp name="Header.value">empty</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/a-23" enabled="true">
          <stringProp name="HTTPSampler.domain">www.googletagmanager.com</stringProp>
          <stringProp name="HTTPSampler.port">443</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.path">/a</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments">
              <elementProp name="id" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">id</stringProp>
                <stringProp name="Argument.value">G-SWJ97E3ZRQ</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="v" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">v</stringProp>
                <stringProp name="Argument.value">3</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="t" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">t</stringProp>
                <stringProp name="Argument.value">t</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="pid" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">pid</stringProp>
                <stringProp name="Argument.value">705380417</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="cv" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">cv</stringProp>
                <stringProp name="Argument.value">1</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="rv" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">rv</stringProp>
                <stringProp name="Argument.value">47h0</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="tc" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">tc</stringProp>
                <stringProp name="Argument.value">10</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="tag_exp" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">tag_exp</stringProp>
                <stringProp name="Argument.value">0</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="es" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">es</stringProp>
                <stringProp name="Argument.value">1</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="e" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">e</stringProp>
                <stringProp name="Argument.value">gtm.click</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="eid" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">eid</stringProp>
                <stringProp name="Argument.value">66</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="u" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">u</stringProp>
                <stringProp name="Argument.value">AgAAAIAIAAAAAIAAAAAAAAAY</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="h" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">h</stringProp>
                <stringProp name="Argument.value">Ag</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="z" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">z</stringProp>
                <stringProp name="Argument.value">0</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Sec-Fetch-Mode" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                <stringProp name="Header.value">no-cors</stringProp>
              </elementProp>
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">https://www.microfocus.com/</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Site" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                <stringProp name="Header.value">cross-site</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Priority" elementType="Header">
                <stringProp name="Header.name">Priority</stringProp>
                <stringProp name="Header.value">u=5, i</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:128.0) Gecko/20100101 Firefox/128.0</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">image/avif,image/webp,image/png,image/svg+xml,image/*;q=0.8,*/*;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Dest" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                <stringProp name="Header.value">image</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/v1/beacon/img.gif-22" enabled="true">
          <stringProp name="HTTPSampler.domain">b.6sc.co</stringProp>
          <stringProp name="HTTPSampler.port">443</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.path">/v1/beacon/img.gif</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments">
              <elementProp name="token" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">token</stringProp>
                <stringProp name="Argument.value">5f90029b56db57cd17027efd926646ef</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="svisitor" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">svisitor</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="visitor" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">visitor</stringProp>
                <stringProp name="Argument.value">e43783fd-0d0b-4b08-8499-84fc86871881</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="session" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">session</stringProp>
                <stringProp name="Argument.value">cfa3825d-7349-4a7a-87a4-13fccbbe3404</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="event" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">event</stringProp>
                <stringProp name="Argument.value">click</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="q" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">q</stringProp>
                <stringProp name="Argument.value">{&quot;event_id&quot;:&quot;loadSamlIframeBtnId&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="isIframe" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">isIframe</stringProp>
                <stringProp name="Argument.value">false</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="m" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">m</stringProp>
                <stringProp name="Argument.value">{&quot;description&quot;:&quot;Accelerate the planning, testing, delivery and support of optimized applications.&quot;,&quot;keywords&quot;:&quot;&quot;,&quot;title&quot;:&quot;Application Delivery Marketplace | OpenText&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="cb" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">cb</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="r" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">r</stringProp>
                <stringProp name="Argument.value">https://www.microfocus.com/marketplace/appdelivery/category/enterprise-agile</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="thirdParty" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">thirdParty</stringProp>
                <stringProp name="Argument.value">{}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="v2" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">v2</stringProp>
                <stringProp name="Argument.value">1</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="pageURL" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">pageURL</stringProp>
                <stringProp name="Argument.value">https://www.microfocus.com/marketplace/appdelivery</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="pageViewId" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">pageViewId</stringProp>
                <stringProp name="Argument.value">8284f563-3780-471c-8f65-86f088176bb7</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="ipv6" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">ipv6</stringProp>
                <stringProp name="Argument.value">2405:201:a008:d18b:9529:4cdd:5ec2:3539</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="v" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">v</stringProp>
                <stringProp name="Argument.value">1.1.22</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Sec-Fetch-Mode" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                <stringProp name="Header.value">no-cors</stringProp>
              </elementProp>
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">https://www.microfocus.com/</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Site" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                <stringProp name="Header.value">cross-site</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Priority" elementType="Header">
                <stringProp name="Header.name">Priority</stringProp>
                <stringProp name="Header.value">u=0, i</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:128.0) Gecko/20100101 Firefox/128.0</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">image/avif,image/webp,image/png,image/svg+xml,image/*;q=0.8,*/*;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Dest" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                <stringProp name="Header.value">image</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/v1/beacon/img.gif-26" enabled="true">
          <stringProp name="HTTPSampler.domain">b.6sc.co</stringProp>
          <stringProp name="HTTPSampler.port">443</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.path">/v1/beacon/img.gif</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments">
              <elementProp name="token" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">token</stringProp>
                <stringProp name="Argument.value">5f90029b56db57cd17027efd926646ef</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="svisitor" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">svisitor</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="visitor" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">visitor</stringProp>
                <stringProp name="Argument.value">e43783fd-0d0b-4b08-8499-84fc86871881</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="session" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">session</stringProp>
                <stringProp name="Argument.value">cfa3825d-7349-4a7a-87a4-13fccbbe3404</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="event" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">event</stringProp>
                <stringProp name="Argument.value">active_time_track</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="q" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">q</stringProp>
                <stringProp name="Argument.value">{&quot;currentTime&quot;:&quot;Sat, 20 Jul 2024 15:23:40 GMT&quot;,&quot;lastTrackTime&quot;:&quot;Sat, 20 Jul 2024 15:23:34 GMT&quot;,&quot;timeSpent&quot;:&quot;5842&quot;,&quot;totalTimeSpent&quot;:&quot;31409&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="isIframe" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">isIframe</stringProp>
                <stringProp name="Argument.value">false</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="m" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">m</stringProp>
                <stringProp name="Argument.value">{&quot;description&quot;:&quot;Accelerate the planning, testing, delivery and support of optimized applications.&quot;,&quot;keywords&quot;:&quot;&quot;,&quot;title&quot;:&quot;Application Delivery Marketplace | OpenText&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="cb" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">cb</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="r" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">r</stringProp>
                <stringProp name="Argument.value">https://www.microfocus.com/marketplace/appdelivery/category/enterprise-agile</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="thirdParty" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">thirdParty</stringProp>
                <stringProp name="Argument.value">{}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="v2" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">v2</stringProp>
                <stringProp name="Argument.value">1</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="pageURL" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">pageURL</stringProp>
                <stringProp name="Argument.value">https://www.microfocus.com/marketplace/appdelivery</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="pageViewId" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">pageViewId</stringProp>
                <stringProp name="Argument.value">8284f563-3780-471c-8f65-86f088176bb7</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="ipv6" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">ipv6</stringProp>
                <stringProp name="Argument.value">2405:201:a008:d18b:9529:4cdd:5ec2:3539</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="v" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">v</stringProp>
                <stringProp name="Argument.value">1.1.22</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Sec-Fetch-Mode" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                <stringProp name="Header.value">no-cors</stringProp>
              </elementProp>
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">https://www.microfocus.com/</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Site" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                <stringProp name="Header.value">cross-site</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Priority" elementType="Header">
                <stringProp name="Header.name">Priority</stringProp>
                <stringProp name="Header.value">u=6, i</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:128.0) Gecko/20100101 Firefox/128.0</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">image/avif,image/webp,image/png,image/svg+xml,image/*;q=0.8,*/*;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Dest" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                <stringProp name="Header.value">image</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/a-27" enabled="true">
          <stringProp name="HTTPSampler.domain">www.googletagmanager.com</stringProp>
          <stringProp name="HTTPSampler.port">443</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.path">/a</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments">
              <elementProp name="id" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">id</stringProp>
                <stringProp name="Argument.value">G-SWJ97E3ZRQ</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="v" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">v</stringProp>
                <stringProp name="Argument.value">3</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="t" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">t</stringProp>
                <stringProp name="Argument.value">t</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="pid" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">pid</stringProp>
                <stringProp name="Argument.value">705380417</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="cv" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">cv</stringProp>
                <stringProp name="Argument.value">1</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="rv" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">rv</stringProp>
                <stringProp name="Argument.value">47h0</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="tc" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">tc</stringProp>
                <stringProp name="Argument.value">10</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="tag_exp" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">tag_exp</stringProp>
                <stringProp name="Argument.value">0</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="es" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">es</stringProp>
                <stringProp name="Argument.value">1</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="e" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">e</stringProp>
                <stringProp name="Argument.value">gtm.triggerGroup</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="eid" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">eid</stringProp>
                <stringProp name="Argument.value">68</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="u" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">u</stringProp>
                <stringProp name="Argument.value">AgAAAIAIAAAAAIAAAAAAAAAY</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="h" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">h</stringProp>
                <stringProp name="Argument.value">Ag</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="z" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">z</stringProp>
                <stringProp name="Argument.value">0</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Sec-Fetch-Mode" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                <stringProp name="Header.value">no-cors</stringProp>
              </elementProp>
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">https://www.microfocus.com/</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Site" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                <stringProp name="Header.value">cross-site</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Priority" elementType="Header">
                <stringProp name="Header.name">Priority</stringProp>
                <stringProp name="Header.value">u=5, i</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:128.0) Gecko/20100101 Firefox/128.0</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">image/avif,image/webp,image/png,image/svg+xml,image/*;q=0.8,*/*;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Dest" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                <stringProp name="Header.value">image</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/collect-25" enabled="true">
          <stringProp name="HTTPSampler.domain">y.clarity.ms</stringProp>
          <stringProp name="HTTPSampler.port">443</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">/collect</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;e&quot;:[&quot;0.7.32&quot;,7,18559,12263,&quot;iu69ce0l9t&quot;,&quot;dprpjk&quot;,&quot;lkifca&quot;,1,0,0],&quot;a&quot;:[[19143,2,5,2,204],[20046,2,6,2,204],[24993,28,&quot;visible&quot;],[25477,12,243,1162,5],[25477,12,243,1231,22],[25493,12,1330,1298,38],[25509,12,1330,1401,66],[25509,12,410,1466,83],[25525,12,410,1479,86],[25525,12,84,1487,89],[25540,12,84,1491,89],[25556,12,84,1492,88],[25571,12,84,1492,82],[25837,12,84,1489,74],[25837,12,84,1486,63],[25853,12,1332,1482,55],[25869,12,1332,1474,41],[25869,12,1332,1472,36],[25885,12,695,1469,32],[25885,12,408,1467,29],[25900,12,408,1466,28],[25916,12,408,1463,25],[25916,12,986,1462,23],[25931,12,986,1459,21],[25947,12,1323,1458,20],[25963,12,1323,1457,19],[25978,12,1323,1456,19],[25994,12,1323,1455,18],[26009,12,1323,1454,18],[26024,12,1323,1454,17],[26119,12,1323,1454,16],[26165,13,1323,1454,16],[26274,14,1323,1454,16],[26274,9,1323,1454,16,11915,24575,0,1,0,&quot;Sign in&quot;,&quot;&quot;,&quot;660vjup38.660vjup38&quot;,1],[26837,12,1590,1442,38],[26837,12,1590,1422,70],[26852,12,1831,1406,97],[26852,12,1835,1391,121],[26868,12,2500,1369,152],[26884,12,2500,1361,163],[26884,12,2500,1354,172],[26899,12,1590,1349,178],[26915,12,1590,1338,194],[26931,12,1590,1336,198],[26947,12,1590,1334,200],[26963,12,1590,1334,200],[26978,12,1590,1334,201],[26994,12,1590,1333,202],[27041,12,1590,1333,202],[27055,12,1590,1332,202],[27071,12,1590,1328,205],[27087,12,2111,1322,208],[27087,12,2111,1310,214],[27102,12,2111,1296,222],[27102,12,2111,1285,228],[27118,12,2111,1269,236],[27149,12,2111,1257,242],[27166,12,2111,1252,242],[27228,12,2111,1251,242],[27244,12,2111,1250,242],[27306,12,2111,1250,242],[27321,12,2111,1250,241],[27369,13,2111,1250,241],[27462,14,2111,1250,241],[27462,9,2111,1250,241,6826,24575,0,0,0,&quot;Next&quot;,null,&quot;3acyjx08r.64t8od1vz&quot;,1],[18559,4,0,1536,2380,1536,731,0,0,1062,6,13477,0],[30822,0,2,346,3,13,4,32,5,8,10,13,25,76],[30822,36,6,[21903,0,22921,0,25932,0,26324,48,30784,35]]],&quot;p&quot;:[[21903,6,315,191,314,&quot;LI&quot;,&quot;data-slideshow-slide=img&quot;,&quot;aria-hidden=false&quot;,&quot;style=animation-duration: 500ms; opacity: 0; height: 350px;&quot;,&quot;class=uk-active&quot;],[22921,6,317,191,316,&quot;LI&quot;,&quot;data-slideshow-slide=img&quot;,&quot;aria-hidden=false&quot;,&quot;style=animation-duration: 500ms; opacity: 1; height: 350px;&quot;,&quot;class=uk-active&quot;,315,191,314,[5,6],&quot;aria-hidden=true&quot;,&quot;style=animation-duration: 500ms; opacity: 0; height: 350px;&quot;,&quot;class=&quot;],[25932,6,986,692,985,&quot;DIV&quot;,&quot;id=sign-in-dropdown&quot;,&quot;data-uk-dropdown={mode:&apos;click&apos;}&quot;,&quot;aria-haspopup=true&quot;,&quot;aria-expanded=false&quot;,1325,986,1324,[5],&quot;id=sign-in-dd&quot;,&quot;class=uk-dropdown sign-in&quot;,&quot;aria-hidden=true&quot;],[26324,6,5522,&quot;DIV&quot;,1325,986,1324,[3],&quot;id=sign-in-dd&quot;,&quot;class=uk-dropdown sign-in uk-dropdown-autoflip uk-dropdown-bottom&quot;,&quot;aria-hidden=false&quot;,&quot;style=top: 24px; left: -256px;&quot;,986,692,985,[3],&quot;id=sign-in-dropdown&quot;,&quot;data-uk-dropdown={mode:&apos;click&apos;}&quot;,&quot;aria-haspopup=true&quot;,&quot;aria-expanded=true&quot;,&quot;class=uk-open&quot;],[26362,6,1841,1590,1840,&quot;DIV&quot;,&quot;id=loginerror&quot;,&quot;class=field-error&quot;,&quot;data-gtm-vis-polling-id1343913_152=980&quot;],[26372,6,2111,1845,2110,&quot;BUTTON&quot;,&quot;class=uk-button uk-button-primary uk-width-1-1&quot;,&quot;id=loadSamlIframeBtnId&quot;,&quot;data-gtm-vis-recent-on-screen1343913_142=27711&quot;,&quot;data-gtm-vis-first-on-screen1343913_142=27711&quot;,&quot;data-gtm-vis-total-visible-time1343913_142=100&quot;,&quot;data-gtm-vis-has-fired1343913_142=1&quot;],[30784,6,2109,&quot;*T&quot;,1839,1590,1838,&quot;DIV&quot;,&quot;class=uk-form uk-form-stacked&quot;,&quot;style=margin-bottom: 5px; display: block;&quot;,&quot;id=pwdLoginDiv&quot;,2519,2127,2518,&quot;A&quot;,&quot;id=a-forgot-password&quot;,&quot;href=https://my.microfocus.com/signin/forgotPassword&quot;,1042,754,1041,[14],&quot;id=b-forgot-password&quot;,[16],2127,1853,2126,[7],&quot;class=uk-form-row uk-text-center forgot-password&quot;,754,443,753,[7,27],2114,1847,2113,&quot;BUTTON&quot;,&quot;class=uk-button uk-button-primary uk-width-1-1&quot;,&quot;id=submitSmartLoginId&quot;,&quot;style=display: block;&quot;,2111,1845,2110,[35,36],&quot;id=loadSamlIframeBtnId&quot;,&quot;data-gtm-vis-recent-on-screen1343913_142=27711&quot;,&quot;data-gtm-vis-first-on-screen1343913_142=27711&quot;,&quot;data-gtm-vis-total-visible-time1343913_142=100&quot;,&quot;data-gtm-vis-has-fired1343913_142=1&quot;,&quot;style=display: none;&quot;],[30819,6,313,191,312,&quot;LI&quot;,&quot;data-slideshow-slide=img&quot;,&quot;aria-hidden=true&quot;,&quot;class=&quot;,&quot;style=animation-duration: 500ms; opacity: 1; height: 350px;&quot;,317,191,316,[5,6],&quot;aria-hidden=false&quot;,[9],&quot;class=uk-active uk-slideshow-fade-out&quot;,324,193,323,[5],&quot;data-uk-slideshow-item=2&quot;,[8],320,193,319,[5],&quot;data-uk-slideshow-item=0&quot;,&quot;class=uk-active&quot;]]}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Sec-Fetch-Mode" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                <stringProp name="Header.value">cors</stringProp>
              </elementProp>
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">https://www.microfocus.com/</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Site" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                <stringProp name="Header.value">cross-site</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Origin" elementType="Header">
                <stringProp name="Header.name">Origin</stringProp>
                <stringProp name="Header.value">https://www.microfocus.com</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">text/plain;charset=UTF-8</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:128.0) Gecko/20100101 Firefox/128.0</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Dest" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                <stringProp name="Header.value">empty</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/j/collect?v=1&amp;_v=j101&amp;a=713076965&amp;t=event&amp;ni=0&amp;_s=1&amp;dl=https%3A%2F%2Fwww.microfocus.com%2Fmarketplace%2Fappdelivery&amp;ul=en-us&amp;de=UTF-8&amp;dt=Application%20Delivery%20Marketplace%20%7C%20OpenText&amp;sd=24-bit&amp;sr=1536x864&amp;vp=1536x731&amp;je=0&amp;ec=Event%20login&amp;ea=https%3A%2F%2Fwww.microfocus.com%2Fmarketplace%2Fappdelivery&amp;el=CT%20login%20success&amp;_u=SCCACEABBAAAACgAIAC~&amp;jid=1759657975&amp;gjid=325510927&amp;cid=1264267099.1721486760&amp;tid=UA-44010430-10&amp;_gid=675600319.1721486761&amp;_r=1&amp;gtm=45He47h0n71MXKD45v71343913za200&amp;gcs=G111&amp;gcd=13n3n3n3n5&amp;dma=0&amp;tag_exp=0&amp;z=853298817-28" enabled="true">
          <stringProp name="HTTPSampler.domain">www.google-analytics.com</stringProp>
          <stringProp name="HTTPSampler.port">443</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.path">/j/collect?v=1&amp;_v=j101&amp;a=713076965&amp;t=event&amp;ni=0&amp;_s=1&amp;dl=https%3A%2F%2Fwww.microfocus.com%2Fmarketplace%2Fappdelivery&amp;ul=en-us&amp;de=UTF-8&amp;dt=Application%20Delivery%20Marketplace%20%7C%20OpenText&amp;sd=24-bit&amp;sr=1536x864&amp;vp=1536x731&amp;je=0&amp;ec=Event%20login&amp;ea=https%3A%2F%2Fwww.microfocus.com%2Fmarketplace%2Fappdelivery&amp;el=CT%20login%20success&amp;_u=SCCACEABBAAAACgAIAC~&amp;jid=1759657975&amp;gjid=325510927&amp;cid=1264267099.1721486760&amp;tid=UA-44010430-10&amp;_gid=675600319.1721486761&amp;_r=1&amp;gtm=45He47h0n71MXKD45v71343913za200&amp;gcs=G111&amp;gcd=13n3n3n3n5&amp;dma=0&amp;tag_exp=0&amp;z=853298817</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Sec-Fetch-Mode" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                <stringProp name="Header.value">cors</stringProp>
              </elementProp>
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">https://www.microfocus.com/</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Site" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                <stringProp name="Header.value">cross-site</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Origin" elementType="Header">
                <stringProp name="Header.name">Origin</stringProp>
                <stringProp name="Header.value">https://www.microfocus.com</stringProp>
              </elementProp>
              <elementProp name="Priority" elementType="Header">
                <stringProp name="Header.name">Priority</stringProp>
                <stringProp name="Header.value">u=0</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">text/plain</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:128.0) Gecko/20100101 Firefox/128.0</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Dest" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                <stringProp name="Header.value">empty</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/a-30" enabled="true">
          <stringProp name="HTTPSampler.domain">www.googletagmanager.com</stringProp>
          <stringProp name="HTTPSampler.port">443</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.path">/a</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments">
              <elementProp name="id" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">id</stringProp>
                <stringProp name="Argument.value">G-SWJ97E3ZRQ</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="v" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">v</stringProp>
                <stringProp name="Argument.value">3</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="t" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">t</stringProp>
                <stringProp name="Argument.value">t</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="pid" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">pid</stringProp>
                <stringProp name="Argument.value">705380417</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="cv" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">cv</stringProp>
                <stringProp name="Argument.value">1</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="rv" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">rv</stringProp>
                <stringProp name="Argument.value">47h0</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="tc" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">tc</stringProp>
                <stringProp name="Argument.value">10</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="tag_exp" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">tag_exp</stringProp>
                <stringProp name="Argument.value">0</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="es" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">es</stringProp>
                <stringProp name="Argument.value">1</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="e" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">e</stringProp>
                <stringProp name="Argument.value">gtm.click</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="eid" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">eid</stringProp>
                <stringProp name="Argument.value">69</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="u" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">u</stringProp>
                <stringProp name="Argument.value">AgAAAIAIAAAAAIAAAAAAAAAY</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="h" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">h</stringProp>
                <stringProp name="Argument.value">Ag</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="z" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">z</stringProp>
                <stringProp name="Argument.value">0</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Sec-Fetch-Mode" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                <stringProp name="Header.value">no-cors</stringProp>
              </elementProp>
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">https://www.microfocus.com/</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Site" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                <stringProp name="Header.value">cross-site</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Priority" elementType="Header">
                <stringProp name="Header.name">Priority</stringProp>
                <stringProp name="Header.value">u=5, i</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:128.0) Gecko/20100101 Firefox/128.0</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">image/avif,image/webp,image/png,image/svg+xml,image/*;q=0.8,*/*;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Dest" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                <stringProp name="Header.value">image</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/v1/beacon/img.gif-29" enabled="true">
          <stringProp name="HTTPSampler.domain">b.6sc.co</stringProp>
          <stringProp name="HTTPSampler.port">443</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.path">/v1/beacon/img.gif</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments">
              <elementProp name="token" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">token</stringProp>
                <stringProp name="Argument.value">5f90029b56db57cd17027efd926646ef</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="svisitor" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">svisitor</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="visitor" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">visitor</stringProp>
                <stringProp name="Argument.value">e43783fd-0d0b-4b08-8499-84fc86871881</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="session" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">session</stringProp>
                <stringProp name="Argument.value">cfa3825d-7349-4a7a-87a4-13fccbbe3404</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="event" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">event</stringProp>
                <stringProp name="Argument.value">click</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="q" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">q</stringProp>
                <stringProp name="Argument.value">{&quot;event_id&quot;:&quot;submitSmartLoginId&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="isIframe" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">isIframe</stringProp>
                <stringProp name="Argument.value">false</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="m" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">m</stringProp>
                <stringProp name="Argument.value">{&quot;description&quot;:&quot;Accelerate the planning, testing, delivery and support of optimized applications.&quot;,&quot;keywords&quot;:&quot;&quot;,&quot;title&quot;:&quot;Application Delivery Marketplace | OpenText&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="cb" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">cb</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="r" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">r</stringProp>
                <stringProp name="Argument.value">https://www.microfocus.com/marketplace/appdelivery/category/enterprise-agile</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="thirdParty" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">thirdParty</stringProp>
                <stringProp name="Argument.value">{}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="v2" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">v2</stringProp>
                <stringProp name="Argument.value">1</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="pageURL" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">pageURL</stringProp>
                <stringProp name="Argument.value">https://www.microfocus.com/marketplace/appdelivery</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="pageViewId" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">pageViewId</stringProp>
                <stringProp name="Argument.value">8284f563-3780-471c-8f65-86f088176bb7</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="ipv6" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">ipv6</stringProp>
                <stringProp name="Argument.value">2405:201:a008:d18b:9529:4cdd:5ec2:3539</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="v" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">v</stringProp>
                <stringProp name="Argument.value">1.1.22</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Sec-Fetch-Mode" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                <stringProp name="Header.value">no-cors</stringProp>
              </elementProp>
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">https://www.microfocus.com/</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Site" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                <stringProp name="Header.value">cross-site</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Priority" elementType="Header">
                <stringProp name="Header.name">Priority</stringProp>
                <stringProp name="Header.value">u=0, i</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:128.0) Gecko/20100101 Firefox/128.0</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">image/avif,image/webp,image/png,image/svg+xml,image/*;q=0.8,*/*;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Dest" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                <stringProp name="Header.value">image</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/marketplace/smartlogin-31" enabled="true">
          <stringProp name="HTTPSampler.domain">www.microfocus.com</stringProp>
          <stringProp name="HTTPSampler.port">443</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.path">/marketplace/smartlogin</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments">
              <elementProp name="_username" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">_username</stringProp>
                <stringProp name="Argument.value">eeshanacharya@gmail.com</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="_password" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">_password</stringProp>
                <stringProp name="Argument.value">Es.tutu@2811</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="returnUrl" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">returnUrl</stringProp>
                <stringProp name="Argument.value">/appdelivery</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Sec-Fetch-Mode" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                <stringProp name="Header.value">cors</stringProp>
              </elementProp>
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">https://www.microfocus.com/marketplace/appdelivery</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Site" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                <stringProp name="Header.value">same-origin</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Origin" elementType="Header">
                <stringProp name="Header.name">Origin</stringProp>
                <stringProp name="Header.value">https://www.microfocus.com</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="X-Requested-With" elementType="Header">
                <stringProp name="Header.name">X-Requested-With</stringProp>
                <stringProp name="Header.value">XMLHttpRequest</stringProp>
              </elementProp>
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:128.0) Gecko/20100101 Firefox/128.0</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Dest" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                <stringProp name="Header.value">empty</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/a-33" enabled="true">
          <stringProp name="HTTPSampler.domain">www.googletagmanager.com</stringProp>
          <stringProp name="HTTPSampler.port">443</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.path">/a</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments">
              <elementProp name="id" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">id</stringProp>
                <stringProp name="Argument.value">G-SWJ97E3ZRQ</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="v" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">v</stringProp>
                <stringProp name="Argument.value">3</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="t" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">t</stringProp>
                <stringProp name="Argument.value">t</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="pid" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">pid</stringProp>
                <stringProp name="Argument.value">705380417</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="cv" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">cv</stringProp>
                <stringProp name="Argument.value">1</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="rv" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">rv</stringProp>
                <stringProp name="Argument.value">47h0</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="tc" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">tc</stringProp>
                <stringProp name="Argument.value">10</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="tag_exp" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">tag_exp</stringProp>
                <stringProp name="Argument.value">0</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="es" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">es</stringProp>
                <stringProp name="Argument.value">1</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="e" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">e</stringProp>
                <stringProp name="Argument.value">gtm.triggerGroup</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="eid" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">eid</stringProp>
                <stringProp name="Argument.value">71</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="u" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">u</stringProp>
                <stringProp name="Argument.value">AgAAAIAIAAAAAIAAAAAAAAAY</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="h" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">h</stringProp>
                <stringProp name="Argument.value">Ag</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="z" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">z</stringProp>
                <stringProp name="Argument.value">0</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Sec-Fetch-Mode" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                <stringProp name="Header.value">no-cors</stringProp>
              </elementProp>
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">https://www.microfocus.com/</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Site" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                <stringProp name="Header.value">cross-site</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Priority" elementType="Header">
                <stringProp name="Header.name">Priority</stringProp>
                <stringProp name="Header.value">u=5, i</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:128.0) Gecko/20100101 Firefox/128.0</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">image/avif,image/webp,image/png,image/svg+xml,image/*;q=0.8,*/*;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Dest" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                <stringProp name="Header.value">image</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/a-32" enabled="true">
          <stringProp name="HTTPSampler.domain">www.googletagmanager.com</stringProp>
          <stringProp name="HTTPSampler.port">443</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.path">/a</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments">
              <elementProp name="id" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">id</stringProp>
                <stringProp name="Argument.value">G-SWJ97E3ZRQ</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="v" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">v</stringProp>
                <stringProp name="Argument.value">3</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="t" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">t</stringProp>
                <stringProp name="Argument.value">t</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="pid" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">pid</stringProp>
                <stringProp name="Argument.value">705380417</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="cv" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">cv</stringProp>
                <stringProp name="Argument.value">1</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="rv" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">rv</stringProp>
                <stringProp name="Argument.value">47h0</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="tc" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">tc</stringProp>
                <stringProp name="Argument.value">10</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="tag_exp" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">tag_exp</stringProp>
                <stringProp name="Argument.value">0</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="es" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">es</stringProp>
                <stringProp name="Argument.value">1</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="e" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">e</stringProp>
                <stringProp name="Argument.value">gtm.elementVisibility</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="eid" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">eid</stringProp>
                <stringProp name="Argument.value">72</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="u" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">u</stringProp>
                <stringProp name="Argument.value">AgAAAIAIAAAAAIAAAAAAAAAY</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="h" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">h</stringProp>
                <stringProp name="Argument.value">Ag</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="z" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">z</stringProp>
                <stringProp name="Argument.value">0</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Sec-Fetch-Mode" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                <stringProp name="Header.value">no-cors</stringProp>
              </elementProp>
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">https://www.microfocus.com/</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Site" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                <stringProp name="Header.value">cross-site</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Priority" elementType="Header">
                <stringProp name="Header.name">Priority</stringProp>
                <stringProp name="Header.value">u=5, i</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:128.0) Gecko/20100101 Firefox/128.0</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">image/avif,image/webp,image/png,image/svg+xml,image/*;q=0.8,*/*;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Dest" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                <stringProp name="Header.value">image</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/canonical.html-38" enabled="true">
          <stringProp name="HTTPSampler.domain">detectportal.firefox.com</stringProp>
          <stringProp name="HTTPSampler.port">0</stringProp>
          <stringProp name="HTTPSampler.protocol">http</stringProp>
          <stringProp name="HTTPSampler.path">/canonical.html</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Cache-Control" elementType="Header">
                <stringProp name="Header.name">Cache-Control</stringProp>
                <stringProp name="Header.value">no-cache</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate</stringProp>
              </elementProp>
              <elementProp name="Pragma" elementType="Header">
                <stringProp name="Header.name">Pragma</stringProp>
                <stringProp name="Header.value">no-cache</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:128.0) Gecko/20100101 Firefox/128.0</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/collect-40" enabled="true">
          <stringProp name="HTTPSampler.domain">www.google-analytics.com</stringProp>
          <stringProp name="HTTPSampler.port">443</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.path">/collect</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments">
              <elementProp name="v" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">v</stringProp>
                <stringProp name="Argument.value">1</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="_v" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">_v</stringProp>
                <stringProp name="Argument.value">j101</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="a" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">a</stringProp>
                <stringProp name="Argument.value">713076965</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="t" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">t</stringProp>
                <stringProp name="Argument.value">event</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="ni" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">ni</stringProp>
                <stringProp name="Argument.value">0</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="_s" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">_s</stringProp>
                <stringProp name="Argument.value">1</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="dl" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">dl</stringProp>
                <stringProp name="Argument.value">https://www.microfocus.com/marketplace/appdelivery</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="ul" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">ul</stringProp>
                <stringProp name="Argument.value">en-us</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="de" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">de</stringProp>
                <stringProp name="Argument.value">UTF-8</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="dt" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">dt</stringProp>
                <stringProp name="Argument.value">Application Delivery Marketplace | OpenText</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="sd" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">sd</stringProp>
                <stringProp name="Argument.value">24-bit</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="sr" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">sr</stringProp>
                <stringProp name="Argument.value">1536x864</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="vp" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">vp</stringProp>
                <stringProp name="Argument.value">1536x731</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="je" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">je</stringProp>
                <stringProp name="Argument.value">0</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="ec" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">ec</stringProp>
                <stringProp name="Argument.value">Event login</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="ea" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">ea</stringProp>
                <stringProp name="Argument.value">https://www.microfocus.com/marketplace/appdelivery</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="el" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">el</stringProp>
                <stringProp name="Argument.value">CT account detected</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="_u" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">_u</stringProp>
                <stringProp name="Argument.value">SCCACEABBAAAACgAIAC~</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="jid" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">jid</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="gjid" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">gjid</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="cid" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">cid</stringProp>
                <stringProp name="Argument.value">1264267099.1721486760</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="tid" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">tid</stringProp>
                <stringProp name="Argument.value">UA-44010430-10</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="_gid" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">_gid</stringProp>
                <stringProp name="Argument.value">675600319.1721486761</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="gtm" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">gtm</stringProp>
                <stringProp name="Argument.value">45He47h0n71MXKD45v71343913za200</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="gcs" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">gcs</stringProp>
                <stringProp name="Argument.value">G111</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="gcd" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">gcd</stringProp>
                <stringProp name="Argument.value">13n3n3n3n5</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="dma" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">dma</stringProp>
                <stringProp name="Argument.value">0</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="tag_exp" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">tag_exp</stringProp>
                <stringProp name="Argument.value">0</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="z" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">z</stringProp>
                <stringProp name="Argument.value">109474613</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Sec-Fetch-Mode" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                <stringProp name="Header.value">no-cors</stringProp>
              </elementProp>
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">https://www.microfocus.com/</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Site" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                <stringProp name="Header.value">cross-site</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Priority" elementType="Header">
                <stringProp name="Header.name">Priority</stringProp>
                <stringProp name="Header.value">u=6, i</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:128.0) Gecko/20100101 Firefox/128.0</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">image/avif,image/webp,image/png,image/svg+xml,image/*;q=0.8,*/*;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Dest" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                <stringProp name="Header.value">image</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/a-37" enabled="true">
          <stringProp name="HTTPSampler.domain">www.googletagmanager.com</stringProp>
          <stringProp name="HTTPSampler.port">443</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.path">/a</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments">
              <elementProp name="id" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">id</stringProp>
                <stringProp name="Argument.value">G-SWJ97E3ZRQ</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="v" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">v</stringProp>
                <stringProp name="Argument.value">3</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="t" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">t</stringProp>
                <stringProp name="Argument.value">t</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="pid" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">pid</stringProp>
                <stringProp name="Argument.value">705380417</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="cv" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">cv</stringProp>
                <stringProp name="Argument.value">1</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="rv" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">rv</stringProp>
                <stringProp name="Argument.value">47h0</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="tc" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">tc</stringProp>
                <stringProp name="Argument.value">10</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="tag_exp" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">tag_exp</stringProp>
                <stringProp name="Argument.value">0</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="es" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">es</stringProp>
                <stringProp name="Argument.value">1</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="e" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">e</stringProp>
                <stringProp name="Argument.value">gtm.triggerGroup</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="eid" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">eid</stringProp>
                <stringProp name="Argument.value">73</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="u" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">u</stringProp>
                <stringProp name="Argument.value">AgAAAIAIAAAAAIAAAAAAAAAY</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="h" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">h</stringProp>
                <stringProp name="Argument.value">Ag</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="z" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">z</stringProp>
                <stringProp name="Argument.value">0</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Sec-Fetch-Mode" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                <stringProp name="Header.value">no-cors</stringProp>
              </elementProp>
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">https://www.microfocus.com/</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Site" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                <stringProp name="Header.value">cross-site</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Priority" elementType="Header">
                <stringProp name="Header.name">Priority</stringProp>
                <stringProp name="Header.value">u=5, i</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:128.0) Gecko/20100101 Firefox/128.0</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">image/avif,image/webp,image/png,image/svg+xml,image/*;q=0.8,*/*;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Dest" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                <stringProp name="Header.value">image</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/success.txt-42" enabled="true">
          <stringProp name="HTTPSampler.domain">detectportal.firefox.com</stringProp>
          <stringProp name="HTTPSampler.port">0</stringProp>
          <stringProp name="HTTPSampler.protocol">http</stringProp>
          <stringProp name="HTTPSampler.path">/success.txt</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments">
              <elementProp name="ipv6" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">ipv6</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata"></stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Priority" elementType="Header">
                <stringProp name="Header.name">Priority</stringProp>
                <stringProp name="Header.value">u=4</stringProp>
              </elementProp>
              <elementProp name="Cache-Control" elementType="Header">
                <stringProp name="Header.name">Cache-Control</stringProp>
                <stringProp name="Header.value">no-cache</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate</stringProp>
              </elementProp>
              <elementProp name="Pragma" elementType="Header">
                <stringProp name="Header.name">Pragma</stringProp>
                <stringProp name="Header.value">no-cache</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:128.0) Gecko/20100101 Firefox/128.0</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/success.txt-41" enabled="true">
          <stringProp name="HTTPSampler.domain">detectportal.firefox.com</stringProp>
          <stringProp name="HTTPSampler.port">0</stringProp>
          <stringProp name="HTTPSampler.protocol">http</stringProp>
          <stringProp name="HTTPSampler.path">/success.txt</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments">
              <elementProp name="ipv4" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">ipv4</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata"></stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Priority" elementType="Header">
                <stringProp name="Header.name">Priority</stringProp>
                <stringProp name="Header.value">u=4</stringProp>
              </elementProp>
              <elementProp name="Cache-Control" elementType="Header">
                <stringProp name="Header.name">Cache-Control</stringProp>
                <stringProp name="Header.value">no-cache</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate</stringProp>
              </elementProp>
              <elementProp name="Pragma" elementType="Header">
                <stringProp name="Header.name">Pragma</stringProp>
                <stringProp name="Header.value">no-cache</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:128.0) Gecko/20100101 Firefox/128.0</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/collect-36" enabled="true">
          <stringProp name="HTTPSampler.domain">y.clarity.ms</stringProp>
          <stringProp name="HTTPSampler.port">443</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">/collect</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;e&quot;:[&quot;0.7.32&quot;,8,30822,7039,&quot;iu69ce0l9t&quot;,&quot;dprpjk&quot;,&quot;lkifca&quot;,1,0,0],&quot;a&quot;:[[31071,12,2507,1258,241],[31103,12,2507,1274,241],[31149,12,1590,1311,250],[31166,12,1590,1318,255],[31212,12,1590,1329,265],[31228,12,1590,1338,273],[31290,12,2114,1352,292],[31305,12,2114,1353,293],[31352,12,2114,1354,294],[31399,12,2114,1354,295],[31430,12,2114,1354,296],[31463,12,2114,1354,297],[31477,12,2114,1354,298],[31509,12,2114,1354,300],[31540,12,2114,1354,301],[31571,12,2114,1354,302],[31571,12,2114,1353,302],[31603,12,2114,1352,302],[31635,12,2114,1351,302],[31697,12,2114,1351,302],[31712,12,2114,1351,303],[31743,12,2114,1350,303],[31775,12,2114,1350,304],[32024,13,2114,1350,304],[32103,14,2114,1350,304],[32103,9,2114,1350,304,20479,12970,0,0,0,&quot;Sign In&quot;,null,&quot;52xs0cbw0.52xs0cbw0&quot;,1],[32268,2,7,2,204],[30822,4,1,1536,2380,1536,731,0,0,1250,241,30819,0],[37861,0,2,1519,3,23,4,46,5,24,25,54],[37861,36,6,[30845,0,30957,0,31062,0,31164,0,31266,74,31369,7,31477,0,31589,0,31691,100,31894,0,32003,0,32104,49,32207,0,32309,0,32410,0,32511,0,32622,0,37707,0,37814,0]]],&quot;p&quot;:[[30845,6,2507,2107,2506,&quot;INPUT&quot;,&quot;type=password&quot;,&quot;id=password2&quot;,&quot;name=_password2&quot;,&quot;class=uk-width-1-1 &quot;,&quot;placeholder=Password&quot;,&quot;style=display: block&quot;,&quot;aria-labelledby=pwdLoginDivLabel&quot;,&quot;data-gtm-vis-polling-id1343913_139=••••&quot;,&quot;value=••••&quot;],[30957,6,2507,2107,2506,&quot;INPUT&quot;,&quot;type=password&quot;,&quot;id=password2&quot;,&quot;name=_password2&quot;,&quot;class=uk-width-1-1 &quot;,&quot;placeholder=Password&quot;,&quot;style=display: block&quot;,&quot;aria-labelledby=pwdLoginDivLabel&quot;,&quot;data-gtm-vis-polling-id1343913_139=••••&quot;,&quot;data-gtm-vis-recent-on-screen1343913_139=•••••&quot;,&quot;data-gtm-vis-first-on-screen1343913_139=•••••&quot;,&quot;data-gtm-vis-total-visible-time1343913_139=•••&quot;,&quot;value=••••&quot;],[31062,6,2507,2107,2506,&quot;INPUT&quot;,&quot;type=password&quot;,&quot;id=password2&quot;,&quot;name=_password2&quot;,&quot;class=uk-width-1-1 &quot;,&quot;placeholder=Password&quot;,&quot;style=display: block&quot;,&quot;aria-labelledby=pwdLoginDivLabel&quot;,&quot;data-gtm-vis-polling-id1343913_139=••••&quot;,&quot;data-gtm-vis-recent-on-screen1343913_139=•••••&quot;,&quot;data-gtm-vis-first-on-screen1343913_139=•••••&quot;,&quot;data-gtm-vis-total-visible-time1343913_139=•••&quot;,&quot;value=••••&quot;],[31164,6,2507,2107,2506,&quot;INPUT&quot;,&quot;type=password&quot;,&quot;id=password2&quot;,&quot;name=_password2&quot;,&quot;class=uk-width-1-1 &quot;,&quot;placeholder=Password&quot;,&quot;style=display: block&quot;,&quot;aria-labelledby=pwdLoginDivLabel&quot;,&quot;data-gtm-vis-polling-id1343913_139=••••&quot;,&quot;data-gtm-vis-recent-on-screen1343913_139=•••••&quot;,&quot;data-gtm-vis-first-on-screen1343913_139=•••••&quot;,&quot;data-gtm-vis-total-visible-time1343913_139=•••&quot;,&quot;value=••••&quot;],[31266,6,2507,2107,2506,&quot;INPUT&quot;,&quot;type=password&quot;,&quot;id=password2&quot;,&quot;name=_password2&quot;,&quot;class=uk-width-1-1 &quot;,&quot;placeholder=Password&quot;,&quot;style=display: block&quot;,&quot;aria-labelledby=pwdLoginDivLabel&quot;,&quot;data-gtm-vis-polling-id1343913_139=••••&quot;,&quot;data-gtm-vis-recent-on-screen1343913_139=•••••&quot;,&quot;data-gtm-vis-first-on-screen1343913_139=•••••&quot;,&quot;data-gtm-vis-total-visible-time1343913_139=•••&quot;,&quot;value=••••&quot;],[31340,6,317,191,316,&quot;LI&quot;,&quot;data-slideshow-slide=img&quot;,&quot;aria-hidden=false&quot;,&quot;style=animation-duration: 500ms; opacity: 0; height: 350px;&quot;,&quot;class=uk-active&quot;],[31369,6,313,191,312,&quot;LI&quot;,&quot;data-slideshow-slide=img&quot;,&quot;aria-hidden=false&quot;,&quot;class=uk-active&quot;,&quot;style=animation-duration: 500ms; opacity: 1; height: 350px;&quot;,317,191,316,[5,6],&quot;aria-hidden=true&quot;,&quot;style=animation-duration: 500ms; opacity: 0; height: 350px;&quot;,&quot;class=&quot;],[31376,6,2507,2107,2506,&quot;INPUT&quot;,&quot;type=password&quot;,&quot;id=password2&quot;,&quot;name=_password2&quot;,&quot;class=uk-width-1-1 &quot;,&quot;placeholder=Password&quot;,&quot;style=display: block&quot;,&quot;aria-labelledby=pwdLoginDivLabel&quot;,&quot;data-gtm-vis-polling-id1343913_139=••••&quot;,&quot;data-gtm-vis-recent-on-screen1343913_139=•••••&quot;,&quot;data-gtm-vis-first-on-screen1343913_139=•••••&quot;,&quot;data-gtm-vis-total-visible-time1343913_139=•••&quot;,&quot;value=••••&quot;],[31477,6,2507,2107,2506,&quot;INPUT&quot;,&quot;type=password&quot;,&quot;id=password2&quot;,&quot;name=_password2&quot;,&quot;class=uk-width-1-1 &quot;,&quot;placeholder=Password&quot;,&quot;style=display: block&quot;,&quot;aria-labelledby=pwdLoginDivLabel&quot;,&quot;data-gtm-vis-polling-id1343913_139=••••&quot;,&quot;data-gtm-vis-recent-on-screen1343913_139=•••••&quot;,&quot;data-gtm-vis-first-on-screen1343913_139=•••••&quot;,&quot;data-gtm-vis-total-visible-time1343913_139=•••&quot;,&quot;value=••••&quot;],[31589,6,2507,2107,2506,&quot;INPUT&quot;,&quot;type=password&quot;,&quot;id=password2&quot;,&quot;name=_password2&quot;,&quot;class=uk-width-1-1 &quot;,&quot;placeholder=Password&quot;,&quot;style=display: block&quot;,&quot;aria-labelledby=pwdLoginDivLabel&quot;,&quot;data-gtm-vis-polling-id1343913_139=••••&quot;,&quot;data-gtm-vis-recent-on-screen1343913_139=•••••&quot;,&quot;data-gtm-vis-first-on-screen1343913_139=•••••&quot;,&quot;data-gtm-vis-total-visible-time1343913_139=•••&quot;,&quot;value=••••&quot;],[31691,6,2507,2107,2506,&quot;INPUT&quot;,&quot;type=password&quot;,&quot;id=password2&quot;,&quot;name=_password2&quot;,&quot;class=uk-width-1-1 &quot;,&quot;placeholder=Password&quot;,&quot;style=display: block&quot;,&quot;aria-labelledby=pwdLoginDivLabel&quot;,&quot;data-gtm-vis-polling-id1343913_139=••••&quot;,&quot;data-gtm-vis-recent-on-screen1343913_139=•••••&quot;,&quot;data-gtm-vis-first-on-screen1343913_139=•••••&quot;,&quot;data-gtm-vis-total-visible-time1343913_139=•••&quot;,&quot;value=••••&quot;],[31791,6,2507,2107,2506,&quot;INPUT&quot;,&quot;type=password&quot;,&quot;id=password2&quot;,&quot;name=_password2&quot;,&quot;class=uk-width-1-1 &quot;,&quot;placeholder=Password&quot;,&quot;style=display: block&quot;,&quot;aria-labelledby=pwdLoginDivLabel&quot;,&quot;data-gtm-vis-polling-id1343913_139=••••&quot;,&quot;data-gtm-vis-recent-on-screen1343913_139=•••••&quot;,&quot;data-gtm-vis-first-on-screen1343913_139=•••••&quot;,&quot;data-gtm-vis-total-visible-time1343913_139=•••&quot;,&quot;value=••••&quot;],[31894,6,2507,2107,2506,&quot;INPUT&quot;,&quot;type=password&quot;,&quot;id=password2&quot;,&quot;name=_password2&quot;,&quot;class=uk-width-1-1 &quot;,&quot;placeholder=Password&quot;,&quot;style=display: block&quot;,&quot;aria-labelledby=pwdLoginDivLabel&quot;,&quot;data-gtm-vis-polling-id1343913_139=••••&quot;,&quot;data-gtm-vis-recent-on-screen1343913_139=•••••&quot;,&quot;data-gtm-vis-first-on-screen1343913_139=•••••&quot;,&quot;data-gtm-vis-total-visible-time1343913_139=••••&quot;,&quot;value=••••&quot;],[32003,6,2507,2107,2506,&quot;INPUT&quot;,&quot;type=password&quot;,&quot;id=password2&quot;,&quot;name=_password2&quot;,&quot;class=uk-width-1-1 &quot;,&quot;placeholder=Password&quot;,&quot;style=display: block&quot;,&quot;aria-labelledby=pwdLoginDivLabel&quot;,&quot;data-gtm-vis-polling-id1343913_139=••••&quot;,&quot;data-gtm-vis-recent-on-screen1343913_139=•••••&quot;,&quot;data-gtm-vis-first-on-screen1343913_139=•••••&quot;,&quot;data-gtm-vis-total-visible-time1343913_139=••••&quot;,&quot;value=••••&quot;],[32104,6,2507,2107,2506,&quot;INPUT&quot;,&quot;type=password&quot;,&quot;id=password2&quot;,&quot;name=_password2&quot;,&quot;class=uk-width-1-1 &quot;,&quot;placeholder=Password&quot;,&quot;style=display: block&quot;,&quot;aria-labelledby=pwdLoginDivLabel&quot;,&quot;data-gtm-vis-polling-id1343913_139=••••&quot;,&quot;data-gtm-vis-recent-on-screen1343913_139=•••••&quot;,&quot;data-gtm-vis-first-on-screen1343913_139=•••••&quot;,&quot;data-gtm-vis-total-visible-time1343913_139=••••&quot;,&quot;value=••••&quot;],[32131,6,1851,1590,1850,&quot;DIV&quot;,&quot;id=loading&quot;,&quot;style=display: block;&quot;,1841,1590,1840,[5],&quot;id=loginerror&quot;,&quot;class=field-error&quot;,&quot;data-gtm-vis-polling-id1343913_152=980&quot;,&quot;style=display: none;&quot;],[32153,6,1841,1590,1840,&quot;DIV&quot;,&quot;id=loginerror&quot;,&quot;class=field-error&quot;,&quot;style=display: none;&quot;],[32207,6,2507,2107,2506,&quot;INPUT&quot;,&quot;type=password&quot;,&quot;id=password2&quot;,&quot;name=_password2&quot;,&quot;class=uk-width-1-1 &quot;,&quot;placeholder=Password&quot;,&quot;style=display: block&quot;,&quot;aria-labelledby=pwdLoginDivLabel&quot;,&quot;data-gtm-vis-polling-id1343913_139=••••&quot;,&quot;data-gtm-vis-recent-on-screen1343913_139=•••••&quot;,&quot;data-gtm-vis-first-on-screen1343913_139=•••••&quot;,&quot;data-gtm-vis-total-visible-time1343913_139=••••&quot;,&quot;value=••••&quot;],[32309,6,2507,2107,2506,&quot;INPUT&quot;,&quot;type=password&quot;,&quot;id=password2&quot;,&quot;name=_password2&quot;,&quot;class=uk-width-1-1 &quot;,&quot;placeholder=Password&quot;,&quot;style=display: block&quot;,&quot;aria-labelledby=pwdLoginDivLabel&quot;,&quot;data-gtm-vis-polling-id1343913_139=••••&quot;,&quot;data-gtm-vis-recent-on-screen1343913_139=•••••&quot;,&quot;data-gtm-vis-first-on-screen1343913_139=•••••&quot;,&quot;data-gtm-vis-total-visible-time1343913_139=••••&quot;,&quot;value=••••&quot;],[32410,6,2507,2107,2506,&quot;INPUT&quot;,&quot;type=password&quot;,&quot;id=password2&quot;,&quot;name=_password2&quot;,&quot;class=uk-width-1-1 &quot;,&quot;placeholder=Password&quot;,&quot;style=display: block&quot;,&quot;aria-labelledby=pwdLoginDivLabel&quot;,&quot;data-gtm-vis-polling-id1343913_139=••••&quot;,&quot;data-gtm-vis-recent-on-screen1343913_139=•••••&quot;,&quot;data-gtm-vis-first-on-screen1343913_139=•••••&quot;,&quot;data-gtm-vis-total-visible-time1343913_139=••••&quot;,&quot;value=••••&quot;],[32511,6,2507,2107,2506,&quot;INPUT&quot;,&quot;type=password&quot;,&quot;id=password2&quot;,&quot;name=_password2&quot;,&quot;class=uk-width-1-1 &quot;,&quot;placeholder=Password&quot;,&quot;style=display: block&quot;,&quot;aria-labelledby=pwdLoginDivLabel&quot;,&quot;data-gtm-vis-polling-id1343913_139=••••&quot;,&quot;data-gtm-vis-recent-on-screen1343913_139=•••••&quot;,&quot;data-gtm-vis-first-on-screen1343913_139=•••••&quot;,&quot;data-gtm-vis-total-visible-time1343913_139=••••&quot;,&quot;value=••••&quot;],[32622,6,2507,2107,2506,&quot;INPUT&quot;,&quot;type=password&quot;,&quot;id=password2&quot;,&quot;name=_password2&quot;,&quot;class=uk-width-1-1 &quot;,&quot;placeholder=Password&quot;,&quot;style=display: block&quot;,&quot;aria-labelledby=pwdLoginDivLabel&quot;,&quot;data-gtm-vis-polling-id1343913_139=••••&quot;,&quot;data-gtm-vis-recent-on-screen1343913_139=•••••&quot;,&quot;data-gtm-vis-first-on-screen1343913_139=•••••&quot;,&quot;data-gtm-vis-total-visible-time1343913_139=••••&quot;,&quot;value=••••&quot;],[37707,6,2507,2107,2506,&quot;INPUT&quot;,&quot;type=password&quot;,&quot;id=password2&quot;,&quot;name=_password2&quot;,&quot;class=uk-width-1-1 &quot;,&quot;placeholder=Password&quot;,&quot;style=display: block&quot;,&quot;aria-labelledby=pwdLoginDivLabel&quot;,&quot;data-gtm-vis-polling-id1343913_139=••••&quot;,&quot;data-gtm-vis-recent-on-screen1343913_139=•••••&quot;,&quot;data-gtm-vis-first-on-screen1343913_139=•••••&quot;,&quot;data-gtm-vis-total-visible-time1343913_139=••••&quot;,&quot;value=••••&quot;],[37814,6,2507,2107,2506,&quot;INPUT&quot;,&quot;type=password&quot;,&quot;id=password2&quot;,&quot;name=_password2&quot;,&quot;class=uk-width-1-1 &quot;,&quot;placeholder=Password&quot;,&quot;style=display: block&quot;,&quot;aria-labelledby=pwdLoginDivLabel&quot;,&quot;data-gtm-vis-polling-id1343913_139=••••&quot;,&quot;data-gtm-vis-recent-on-screen1343913_139=•••••&quot;,&quot;data-gtm-vis-first-on-screen1343913_139=•••••&quot;,&quot;data-gtm-vis-total-visible-time1343913_139=••••&quot;,&quot;value=••••&quot;]]}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Sec-Fetch-Mode" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                <stringProp name="Header.value">cors</stringProp>
              </elementProp>
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">https://www.microfocus.com/</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Site" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                <stringProp name="Header.value">cross-site</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Origin" elementType="Header">
                <stringProp name="Header.name">Origin</stringProp>
                <stringProp name="Header.value">https://www.microfocus.com</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">text/plain;charset=UTF-8</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:128.0) Gecko/20100101 Firefox/128.0</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Dest" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                <stringProp name="Header.value">empty</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/v1/beacon/img.gif-39" enabled="true">
          <stringProp name="HTTPSampler.domain">b.6sc.co</stringProp>
          <stringProp name="HTTPSampler.port">443</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.path">/v1/beacon/img.gif</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments">
              <elementProp name="token" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">token</stringProp>
                <stringProp name="Argument.value">5f90029b56db57cd17027efd926646ef</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="svisitor" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">svisitor</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="visitor" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">visitor</stringProp>
                <stringProp name="Argument.value">e43783fd-0d0b-4b08-8499-84fc86871881</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="session" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">session</stringProp>
                <stringProp name="Argument.value">cfa3825d-7349-4a7a-87a4-13fccbbe3404</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="event" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">event</stringProp>
                <stringProp name="Argument.value">active_time_track</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="q" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">q</stringProp>
                <stringProp name="Argument.value">{&quot;currentTime&quot;:&quot;Sat, 20 Jul 2024 15:23:47 GMT&quot;,&quot;lastTrackTime&quot;:&quot;Sat, 20 Jul 2024 15:23:40 GMT&quot;,&quot;timeSpent&quot;:&quot;6883&quot;,&quot;totalTimeSpent&quot;:&quot;38292&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="isIframe" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">isIframe</stringProp>
                <stringProp name="Argument.value">false</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="m" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">m</stringProp>
                <stringProp name="Argument.value">{&quot;description&quot;:&quot;Accelerate the planning, testing, delivery and support of optimized applications.&quot;,&quot;keywords&quot;:&quot;&quot;,&quot;title&quot;:&quot;Application Delivery Marketplace | OpenText&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="cb" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">cb</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="r" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">r</stringProp>
                <stringProp name="Argument.value">https://www.microfocus.com/marketplace/appdelivery/category/enterprise-agile</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="thirdParty" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">thirdParty</stringProp>
                <stringProp name="Argument.value">{}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="v2" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">v2</stringProp>
                <stringProp name="Argument.value">1</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="pageURL" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">pageURL</stringProp>
                <stringProp name="Argument.value">https://www.microfocus.com/marketplace/appdelivery</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="pageViewId" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">pageViewId</stringProp>
                <stringProp name="Argument.value">8284f563-3780-471c-8f65-86f088176bb7</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="ipv6" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">ipv6</stringProp>
                <stringProp name="Argument.value">2405:201:a008:d18b:9529:4cdd:5ec2:3539</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="v" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">v</stringProp>
                <stringProp name="Argument.value">1.1.22</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Sec-Fetch-Mode" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                <stringProp name="Header.value">no-cors</stringProp>
              </elementProp>
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">https://www.microfocus.com/</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Site" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                <stringProp name="Header.value">cross-site</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Priority" elementType="Header">
                <stringProp name="Header.name">Priority</stringProp>
                <stringProp name="Header.value">u=6, i</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:128.0) Gecko/20100101 Firefox/128.0</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">image/avif,image/webp,image/png,image/svg+xml,image/*;q=0.8,*/*;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Dest" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                <stringProp name="Header.value">image</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/marketplace/appdelivery-34" enabled="true">
          <stringProp name="HTTPSampler.domain">www.microfocus.com</stringProp>
          <stringProp name="HTTPSampler.port">443</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.path">/marketplace/appdelivery</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Sec-Fetch-Mode" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                <stringProp name="Header.value">navigate</stringProp>
              </elementProp>
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">https://www.microfocus.com/marketplace/appdelivery</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Site" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                <stringProp name="Header.value">same-origin</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Priority" elementType="Header">
                <stringProp name="Header.name">Priority</stringProp>
                <stringProp name="Header.value">u=0, i</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/png,image/svg+xml,*/*;q=0.8</stringProp>
              </elementProp>
              <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:128.0) Gecko/20100101 Firefox/128.0</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Dest" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                <stringProp name="Header.value">document</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/v1/beacon/img.gif-43" enabled="true">
          <stringProp name="HTTPSampler.domain">b.6sc.co</stringProp>
          <stringProp name="HTTPSampler.port">443</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.path">/v1/beacon/img.gif</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments">
              <elementProp name="token" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">token</stringProp>
                <stringProp name="Argument.value">5f90029b56db57cd17027efd926646ef</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="svisitor" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">svisitor</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="visitor" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">visitor</stringProp>
                <stringProp name="Argument.value">e43783fd-0d0b-4b08-8499-84fc86871881</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="session" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">session</stringProp>
                <stringProp name="Argument.value">cfa3825d-7349-4a7a-87a4-13fccbbe3404</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="event" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">event</stringProp>
                <stringProp name="Argument.value">active_time_track</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="q" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">q</stringProp>
                <stringProp name="Argument.value">{&quot;currentTime&quot;:&quot;Sat, 20 Jul 2024 15:23:50 GMT&quot;,&quot;lastTrackTime&quot;:&quot;Sat, 20 Jul 2024 15:23:47 GMT&quot;,&quot;timeSpent&quot;:&quot;3009&quot;,&quot;totalTimeSpent&quot;:&quot;41301&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="isIframe" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">isIframe</stringProp>
                <stringProp name="Argument.value">false</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="m" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">m</stringProp>
                <stringProp name="Argument.value">{&quot;description&quot;:&quot;Accelerate the planning, testing, delivery and support of optimized applications.&quot;,&quot;keywords&quot;:&quot;&quot;,&quot;title&quot;:&quot;Application Delivery Marketplace | OpenText&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="cb" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">cb</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="r" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">r</stringProp>
                <stringProp name="Argument.value">https://www.microfocus.com/marketplace/appdelivery/category/enterprise-agile</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="thirdParty" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">thirdParty</stringProp>
                <stringProp name="Argument.value">{}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="v2" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">v2</stringProp>
                <stringProp name="Argument.value">1</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="pageURL" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">pageURL</stringProp>
                <stringProp name="Argument.value">https://www.microfocus.com/marketplace/appdelivery</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="pageViewId" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">pageViewId</stringProp>
                <stringProp name="Argument.value">8284f563-3780-471c-8f65-86f088176bb7</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="ipv6" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">ipv6</stringProp>
                <stringProp name="Argument.value">2405:201:a008:d18b:9529:4cdd:5ec2:3539</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="v" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">v</stringProp>
                <stringProp name="Argument.value">1.1.22</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Sec-Fetch-Mode" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                <stringProp name="Header.value">no-cors</stringProp>
              </elementProp>
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">https://www.microfocus.com/</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Site" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                <stringProp name="Header.value">cross-site</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Priority" elementType="Header">
                <stringProp name="Header.name">Priority</stringProp>
                <stringProp name="Header.value">u=6, i</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:128.0) Gecko/20100101 Firefox/128.0</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">image/avif,image/webp,image/png,image/svg+xml,image/*;q=0.8,*/*;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Dest" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                <stringProp name="Header.value">image</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/g/collect?v=2&amp;tid=G-SWJ97E3ZRQ&amp;gtm=45je47h0v885797725za200zb71343913&amp;_p=1721488988624&amp;gcs=G111&amp;gcd=13n3n3n3n5&amp;npa=0&amp;dma=0&amp;tag_exp=0&amp;gdid=dYWJhMj&amp;cid=1264267099.1721486760&amp;ul=en-us&amp;sr=1536x864&amp;frm=0&amp;pscdl=noapi&amp;_s=2&amp;sid=1721486760&amp;sct=1&amp;seg=1&amp;dl=https%3A%2F%2Fwww.microfocus.com%2Fmarketplace%2Fappdelivery&amp;dr=https%3A%2F%2Fwww.microfocus.com%2Fmarketplace%2Fappdelivery%2Fcategory%2Fenterprise-agile&amp;dt=Application%20Delivery%20Marketplace%20%7C%20OpenText&amp;en=user_engagement&amp;_et=16455&amp;tfd=47348&amp;_z=fetch-47" enabled="true">
          <stringProp name="HTTPSampler.domain">analytics.google.com</stringProp>
          <stringProp name="HTTPSampler.port">443</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.path">/g/collect?v=2&amp;tid=G-SWJ97E3ZRQ&amp;gtm=45je47h0v885797725za200zb71343913&amp;_p=1721488988624&amp;gcs=G111&amp;gcd=13n3n3n3n5&amp;npa=0&amp;dma=0&amp;tag_exp=0&amp;gdid=dYWJhMj&amp;cid=1264267099.1721486760&amp;ul=en-us&amp;sr=1536x864&amp;frm=0&amp;pscdl=noapi&amp;_s=2&amp;sid=1721486760&amp;sct=1&amp;seg=1&amp;dl=https%3A%2F%2Fwww.microfocus.com%2Fmarketplace%2Fappdelivery&amp;dr=https%3A%2F%2Fwww.microfocus.com%2Fmarketplace%2Fappdelivery%2Fcategory%2Fenterprise-agile&amp;dt=Application%20Delivery%20Marketplace%20%7C%20OpenText&amp;en=user_engagement&amp;_et=16455&amp;tfd=47348&amp;_z=fetch</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Sec-Fetch-Mode" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                <stringProp name="Header.value">no-cors</stringProp>
              </elementProp>
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">https://www.microfocus.com/</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Site" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                <stringProp name="Header.value">cross-site</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Origin" elementType="Header">
                <stringProp name="Header.name">Origin</stringProp>
                <stringProp name="Header.value">https://www.microfocus.com</stringProp>
              </elementProp>
              <elementProp name="Priority" elementType="Header">
                <stringProp name="Header.name">Priority</stringProp>
                <stringProp name="Header.value">u=4</stringProp>
              </elementProp>
              <elementProp name="Pragma" elementType="Header">
                <stringProp name="Header.name">Pragma</stringProp>
                <stringProp name="Header.value">no-cache</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="Cache-Control" elementType="Header">
                <stringProp name="Header.name">Cache-Control</stringProp>
                <stringProp name="Header.value">no-cache</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:128.0) Gecko/20100101 Firefox/128.0</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Dest" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                <stringProp name="Header.value">empty</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/inter/font-files/Inter-ExtraLightItalic.woff-50" enabled="true">
          <stringProp name="HTTPSampler.domain">rsms.me</stringProp>
          <stringProp name="HTTPSampler.port">443</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.path">/inter/font-files/Inter-ExtraLightItalic.woff</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments">
              <elementProp name="v" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">v</stringProp>
                <stringProp name="Argument.value">3.19</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Sec-Fetch-Mode" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                <stringProp name="Header.value">cors</stringProp>
              </elementProp>
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">https://www.microfocus.com/</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Site" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                <stringProp name="Header.value">cross-site</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Origin" elementType="Header">
                <stringProp name="Header.name">Origin</stringProp>
                <stringProp name="Header.value">https://www.microfocus.com</stringProp>
              </elementProp>
              <elementProp name="Priority" elementType="Header">
                <stringProp name="Header.name">Priority</stringProp>
                <stringProp name="Header.value">u=2</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">application/font-woff2;q=1.0,application/font-woff;q=0.9,*/*;q=0.8</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:128.0) Gecko/20100101 Firefox/128.0</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Dest" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                <stringProp name="Header.value">font</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/inter/font-files/Inter-Bold.woff-51" enabled="true">
          <stringProp name="HTTPSampler.domain">rsms.me</stringProp>
          <stringProp name="HTTPSampler.port">443</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.path">/inter/font-files/Inter-Bold.woff</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments">
              <elementProp name="v" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">v</stringProp>
                <stringProp name="Argument.value">3.19</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Sec-Fetch-Mode" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                <stringProp name="Header.value">cors</stringProp>
              </elementProp>
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">https://www.microfocus.com/</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Site" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                <stringProp name="Header.value">cross-site</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Origin" elementType="Header">
                <stringProp name="Header.name">Origin</stringProp>
                <stringProp name="Header.value">https://www.microfocus.com</stringProp>
              </elementProp>
              <elementProp name="Priority" elementType="Header">
                <stringProp name="Header.name">Priority</stringProp>
                <stringProp name="Header.value">u=2</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">application/font-woff2;q=1.0,application/font-woff;q=0.9,*/*;q=0.8</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:128.0) Gecko/20100101 Firefox/128.0</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Dest" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                <stringProp name="Header.value">font</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/inter/font-files/Inter-Light.woff-53" enabled="true">
          <stringProp name="HTTPSampler.domain">rsms.me</stringProp>
          <stringProp name="HTTPSampler.port">443</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.path">/inter/font-files/Inter-Light.woff</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments">
              <elementProp name="v" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">v</stringProp>
                <stringProp name="Argument.value">3.19</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Sec-Fetch-Mode" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                <stringProp name="Header.value">cors</stringProp>
              </elementProp>
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">https://www.microfocus.com/</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Site" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                <stringProp name="Header.value">cross-site</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Origin" elementType="Header">
                <stringProp name="Header.name">Origin</stringProp>
                <stringProp name="Header.value">https://www.microfocus.com</stringProp>
              </elementProp>
              <elementProp name="Priority" elementType="Header">
                <stringProp name="Header.name">Priority</stringProp>
                <stringProp name="Header.value">u=2</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">application/font-woff2;q=1.0,application/font-woff;q=0.9,*/*;q=0.8</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:128.0) Gecko/20100101 Firefox/128.0</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Dest" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                <stringProp name="Header.value">font</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/inter/font-files/Inter-SemiBold.woff-54" enabled="true">
          <stringProp name="HTTPSampler.domain">rsms.me</stringProp>
          <stringProp name="HTTPSampler.port">443</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.path">/inter/font-files/Inter-SemiBold.woff</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments">
              <elementProp name="v" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">v</stringProp>
                <stringProp name="Argument.value">3.19</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Sec-Fetch-Mode" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                <stringProp name="Header.value">cors</stringProp>
              </elementProp>
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">https://www.microfocus.com/</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Site" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                <stringProp name="Header.value">cross-site</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Origin" elementType="Header">
                <stringProp name="Header.name">Origin</stringProp>
                <stringProp name="Header.value">https://www.microfocus.com</stringProp>
              </elementProp>
              <elementProp name="Priority" elementType="Header">
                <stringProp name="Header.name">Priority</stringProp>
                <stringProp name="Header.value">u=2</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">application/font-woff2;q=1.0,application/font-woff;q=0.9,*/*;q=0.8</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:128.0) Gecko/20100101 Firefox/128.0</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Dest" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                <stringProp name="Header.value">font</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/collect-52" enabled="true">
          <stringProp name="HTTPSampler.domain">y.clarity.ms</stringProp>
          <stringProp name="HTTPSampler.port">443</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">/collect</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;e&quot;:[&quot;0.7.32&quot;,9,37861,3229,&quot;iu69ce0l9t&quot;,&quot;dprpjk&quot;,&quot;lkifca&quot;,1,1,1],&quot;a&quot;:[[33399,12,854,1066,234],[39533,2,8,2,204],[41088,26,&quot;pagehide&quot;],[37861,4,1,1536,2380,1536,731,0,0,1350,304,37814,0],[41090,0,2,1015,3,0,4,7,5,1,25,7],[41090,36,6,[37927,0]]],&quot;p&quot;:[[37927,6,2507,2107,2506,&quot;INPUT&quot;,&quot;type=password&quot;,&quot;id=password2&quot;,&quot;name=_password2&quot;,&quot;class=uk-width-1-1 &quot;,&quot;placeholder=Password&quot;,&quot;style=display: block&quot;,&quot;aria-labelledby=pwdLoginDivLabel&quot;,&quot;data-gtm-vis-recent-on-screen1343913_139=•••••&quot;,&quot;data-gtm-vis-first-on-screen1343913_139=•••••&quot;,&quot;data-gtm-vis-total-visible-time1343913_139=••••&quot;,&quot;data-gtm-vis-has-fired1343913_139=•&quot;,&quot;value=••••&quot;]]}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Sec-Fetch-Mode" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                <stringProp name="Header.value">no-cors</stringProp>
              </elementProp>
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">https://www.microfocus.com/</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Site" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                <stringProp name="Header.value">cross-site</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Origin" elementType="Header">
                <stringProp name="Header.name">Origin</stringProp>
                <stringProp name="Header.value">https://www.microfocus.com</stringProp>
              </elementProp>
              <elementProp name="Priority" elementType="Header">
                <stringProp name="Header.name">Priority</stringProp>
                <stringProp name="Header.value">u=6</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">text/plain;charset=UTF-8</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:128.0) Gecko/20100101 Firefox/128.0</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Dest" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                <stringProp name="Header.value">empty</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/marketplace/dist/mktp.bundle.js-44" enabled="true">
          <stringProp name="HTTPSampler.domain">www.microfocus.com</stringProp>
          <stringProp name="HTTPSampler.port">443</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.path">/marketplace/dist/mktp.bundle.js</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Sec-Fetch-Mode" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                <stringProp name="Header.value">no-cors</stringProp>
              </elementProp>
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">https://www.microfocus.com/marketplace/appdelivery</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Site" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                <stringProp name="Header.value">same-origin</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:128.0) Gecko/20100101 Firefox/128.0</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Dest" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                <stringProp name="Header.value">script</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/marketplace/dist/vendor.bundle.js-46" enabled="true">
          <stringProp name="HTTPSampler.domain">www.microfocus.com</stringProp>
          <stringProp name="HTTPSampler.port">443</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.path">/marketplace/dist/vendor.bundle.js</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Sec-Fetch-Mode" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                <stringProp name="Header.value">no-cors</stringProp>
              </elementProp>
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">https://www.microfocus.com/marketplace/appdelivery</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Site" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                <stringProp name="Header.value">same-origin</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:128.0) Gecko/20100101 Firefox/128.0</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Dest" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                <stringProp name="Header.value">script</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/marketplace/dist/generic.css-45" enabled="true">
          <stringProp name="HTTPSampler.domain">www.microfocus.com</stringProp>
          <stringProp name="HTTPSampler.port">443</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.path">/marketplace/dist/generic.css</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Sec-Fetch-Mode" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                <stringProp name="Header.value">no-cors</stringProp>
              </elementProp>
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">https://www.microfocus.com/marketplace/appdelivery</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Site" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                <stringProp name="Header.value">same-origin</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Priority" elementType="Header">
                <stringProp name="Header.name">Priority</stringProp>
                <stringProp name="Header.value">u=2</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">text/css,*/*;q=0.1</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:128.0) Gecko/20100101 Firefox/128.0</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Dest" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                <stringProp name="Header.value">style</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/marketplace/dist/client.css-48" enabled="true">
          <stringProp name="HTTPSampler.domain">www.microfocus.com</stringProp>
          <stringProp name="HTTPSampler.port">443</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.path">/marketplace/dist/client.css</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Sec-Fetch-Mode" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                <stringProp name="Header.value">no-cors</stringProp>
              </elementProp>
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">https://www.microfocus.com/marketplace/appdelivery</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Site" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                <stringProp name="Header.value">same-origin</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Priority" elementType="Header">
                <stringProp name="Header.name">Priority</stringProp>
                <stringProp name="Header.value">u=2</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">text/css,*/*;q=0.1</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:128.0) Gecko/20100101 Firefox/128.0</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Dest" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                <stringProp name="Header.value">style</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/marketplace/dist/commons.css-49" enabled="true">
          <stringProp name="HTTPSampler.domain">www.microfocus.com</stringProp>
          <stringProp name="HTTPSampler.port">443</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.path">/marketplace/dist/commons.css</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Sec-Fetch-Mode" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                <stringProp name="Header.value">no-cors</stringProp>
              </elementProp>
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">https://www.microfocus.com/marketplace/appdelivery</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Site" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                <stringProp name="Header.value">same-origin</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Priority" elementType="Header">
                <stringProp name="Header.name">Priority</stringProp>
                <stringProp name="Header.value">u=2</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">text/css,*/*;q=0.1</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:128.0) Gecko/20100101 Firefox/128.0</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Dest" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                <stringProp name="Header.value">style</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/marketplace/signin/sso-55" enabled="true">
          <stringProp name="HTTPSampler.domain">www.microfocus.com</stringProp>
          <stringProp name="HTTPSampler.port">443</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.path">/marketplace/signin/sso</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Sec-Fetch-Mode" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                <stringProp name="Header.value">navigate</stringProp>
              </elementProp>
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">https://www.microfocus.com/marketplace/appdelivery</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Site" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                <stringProp name="Header.value">same-origin</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Priority" elementType="Header">
                <stringProp name="Header.name">Priority</stringProp>
                <stringProp name="Header.value">u=4</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/png,image/svg+xml,*/*;q=0.8</stringProp>
              </elementProp>
              <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:128.0) Gecko/20100101 Firefox/128.0</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Dest" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                <stringProp name="Header.value">iframe</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/marketplace/marketplace/images/lazyloader.gif-57" enabled="true">
          <stringProp name="HTTPSampler.domain">www.microfocus.com</stringProp>
          <stringProp name="HTTPSampler.port">443</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.path">/marketplace/marketplace/images/lazyloader.gif</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Sec-Fetch-Mode" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                <stringProp name="Header.value">no-cors</stringProp>
              </elementProp>
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">https://www.microfocus.com/marketplace/appdelivery</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Site" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                <stringProp name="Header.value">same-origin</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Priority" elementType="Header">
                <stringProp name="Header.name">Priority</stringProp>
                <stringProp name="Header.value">u=5</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">image/avif,image/webp,image/png,image/svg+xml,image/*;q=0.8,*/*;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:128.0) Gecko/20100101 Firefox/128.0</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Dest" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                <stringProp name="Header.value">image</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/tag/iu69ce0l9t-58" enabled="true">
          <stringProp name="HTTPSampler.domain">www.clarity.ms</stringProp>
          <stringProp name="HTTPSampler.port">443</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.path">/tag/iu69ce0l9t</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Sec-Fetch-Mode" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                <stringProp name="Header.value">no-cors</stringProp>
              </elementProp>
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">https://www.microfocus.com/</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Site" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                <stringProp name="Header.value">cross-site</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:128.0) Gecko/20100101 Firefox/128.0</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Dest" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                <stringProp name="Header.value">script</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/nidp/app-56" enabled="true">
          <stringProp name="TestPlan.comments">Detected the start of a redirect chain</stringProp>
          <stringProp name="HTTPSampler.domain">login.microfocus.com</stringProp>
          <stringProp name="HTTPSampler.port">443</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.path">/nidp/app</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Sec-Fetch-Mode" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                <stringProp name="Header.value">navigate</stringProp>
              </elementProp>
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">https://www.microfocus.com/</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Site" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                <stringProp name="Header.value">same-site</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Priority" elementType="Header">
                <stringProp name="Header.name">Priority</stringProp>
                <stringProp name="Header.value">u=4</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/png,image/svg+xml,*/*;q=0.8</stringProp>
              </elementProp>
              <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:128.0) Gecko/20100101 Firefox/128.0</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Dest" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                <stringProp name="Header.value">iframe</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/api/config.json-60" enabled="true">
          <stringProp name="HTTPSampler.domain">c.go-mpulse.net</stringProp>
          <stringProp name="HTTPSampler.port">443</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.path">/api/config.json</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments">
              <elementProp name="key" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">key</stringProp>
                <stringProp name="Argument.value">5KNJK-8UTBJ-V9LAY-HLX72-YR7DF</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="d" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">d</stringProp>
                <stringProp name="Argument.value">www.microfocus.com</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="t" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">t</stringProp>
                <stringProp name="Argument.value">5738297</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="v" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">v</stringProp>
                <stringProp name="Argument.value">1.720.0</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="sl" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">sl</stringProp>
                <stringProp name="Argument.value">0</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="si" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">si</stringProp>
                <stringProp name="Argument.value">10caed70-3f45-4750-8cc9-6c7024cdc581-sgxhfo</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="plugins" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">plugins</stringProp>
                <stringProp name="Argument.value">AK,ConfigOverride,Continuity,PageParams,IFrameDelay,AutoXHR,SPA,History,Angular,Backbone,Ember,RT,CrossDomain,BW,PaintTiming,NavigationTiming,ResourceTiming,Memory,CACHE_RELOAD,Errors,TPAnalytics,UserTiming,Akamai,Early,EventTiming,LOGN</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="acao" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">acao</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="ak.ai" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">ak.ai</stringProp>
                <stringProp name="Argument.value">492776</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Sec-Fetch-Mode" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                <stringProp name="Header.value">cors</stringProp>
              </elementProp>
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">https://www.microfocus.com/</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Site" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                <stringProp name="Header.value">cross-site</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Origin" elementType="Header">
                <stringProp name="Header.name">Origin</stringProp>
                <stringProp name="Header.value">https://www.microfocus.com</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:128.0) Gecko/20100101 Firefox/128.0</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Dest" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                <stringProp name="Header.value">empty</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/marketplace/api/user/status-59" enabled="true">
          <stringProp name="HTTPSampler.domain">www.microfocus.com</stringProp>
          <stringProp name="HTTPSampler.port">443</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.path">/marketplace/api/user/status</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Sec-Fetch-Mode" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                <stringProp name="Header.value">cors</stringProp>
              </elementProp>
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">https://www.microfocus.com/marketplace/appdelivery</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Site" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                <stringProp name="Header.value">same-origin</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="X-Requested-With" elementType="Header">
                <stringProp name="Header.name">X-Requested-With</stringProp>
                <stringProp name="Header.value">XMLHttpRequest</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:128.0) Gecko/20100101 Firefox/128.0</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Dest" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                <stringProp name="Header.value">empty</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/-61" enabled="true">
          <stringProp name="HTTPSampler.domain">ipv6.6sc.co</stringProp>
          <stringProp name="HTTPSampler.port">443</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.path">/</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Sec-Fetch-Mode" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                <stringProp name="Header.value">cors</stringProp>
              </elementProp>
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">https://www.microfocus.com/</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Site" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                <stringProp name="Header.value">cross-site</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Origin" elementType="Header">
                <stringProp name="Header.name">Origin</stringProp>
                <stringProp name="Header.value">https://www.microfocus.com</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:128.0) Gecko/20100101 Firefox/128.0</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Dest" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                <stringProp name="Header.value">empty</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/-62" enabled="true">
          <stringProp name="HTTPSampler.domain">c.6sc.co</stringProp>
          <stringProp name="HTTPSampler.port">443</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.path">/</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Sec-Fetch-Mode" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                <stringProp name="Header.value">cors</stringProp>
              </elementProp>
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">https://www.microfocus.com/</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Site" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                <stringProp name="Header.value">cross-site</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Origin" elementType="Header">
                <stringProp name="Header.name">Origin</stringProp>
                <stringProp name="Header.value">https://www.microfocus.com</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:128.0) Gecko/20100101 Firefox/128.0</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Dest" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                <stringProp name="Header.value">empty</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/v1/beacon/img.gif-64" enabled="true">
          <stringProp name="HTTPSampler.domain">b.6sc.co</stringProp>
          <stringProp name="HTTPSampler.port">443</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.path">/v1/beacon/img.gif</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments">
              <elementProp name="token" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">token</stringProp>
                <stringProp name="Argument.value">5f90029b56db57cd17027efd926646ef</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="svisitor" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">svisitor</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="visitor" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">visitor</stringProp>
                <stringProp name="Argument.value">e43783fd-0d0b-4b08-8499-84fc86871881</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="session" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">session</stringProp>
                <stringProp name="Argument.value">cfa3825d-7349-4a7a-87a4-13fccbbe3404</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="event" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">event</stringProp>
                <stringProp name="Argument.value">ni:asyncSettingsAudit</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="q" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">q</stringProp>
                <stringProp name="Argument.value">{&quot;settings&quot;:&quot;[{\&quot;name\&quot;:\&quot;enableEventTracking\&quot;,\&quot;value\&quot;:\&quot;true\&quot;,\&quot;dateTime\&quot;:\&quot;Sat, 20 Jul 2024 15:23:54 GMT\&quot;,\&quot;timeSincePageLoad\&quot;:\&quot;0\&quot;},{\&quot;name\&quot;:\&quot;setToken\&quot;,\&quot;value\&quot;:\&quot;5f90029b56db57cd17027efd926646ef\&quot;,\&quot;dateTime\&quot;:\&quot;Sat, 20 Jul 2024 15:23:54 GMT\&quot;,\&quot;timeSincePageLoad\&quot;:\&quot;0\&quot;},{\&quot;name\&quot;:\&quot;setEndpoint\&quot;,\&quot;value\&quot;:\&quot;b.6sc.co\&quot;,\&quot;dateTime\&quot;:\&quot;Sat, 20 Jul 2024 15:23:54 GMT\&quot;,\&quot;timeSincePageLoad\&quot;:\&quot;0\&quot;}]&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="isIframe" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">isIframe</stringProp>
                <stringProp name="Argument.value">false</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="m" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">m</stringProp>
                <stringProp name="Argument.value">{&quot;description&quot;:&quot;Accelerate the planning, testing, delivery and support of optimized applications.&quot;,&quot;keywords&quot;:&quot;&quot;,&quot;title&quot;:&quot;Application Delivery Marketplace | OpenText&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="cb" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">cb</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="r" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">r</stringProp>
                <stringProp name="Argument.value">https://www.microfocus.com/marketplace/appdelivery</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="thirdParty" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">thirdParty</stringProp>
                <stringProp name="Argument.value">{}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="v2" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">v2</stringProp>
                <stringProp name="Argument.value">1</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="pageURL" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">pageURL</stringProp>
                <stringProp name="Argument.value">https://www.microfocus.com/marketplace/appdelivery</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="pageViewId" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">pageViewId</stringProp>
                <stringProp name="Argument.value">08d224e6-f0d9-4af1-8fe4-78c8bb9ff1fa</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="v" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">v</stringProp>
                <stringProp name="Argument.value">1.1.22</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Sec-Fetch-Mode" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                <stringProp name="Header.value">no-cors</stringProp>
              </elementProp>
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">https://www.microfocus.com/</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Site" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                <stringProp name="Header.value">cross-site</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Priority" elementType="Header">
                <stringProp name="Header.name">Priority</stringProp>
                <stringProp name="Header.value">u=6, i</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:128.0) Gecko/20100101 Firefox/128.0</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">image/avif,image/webp,image/png,image/svg+xml,image/*;q=0.8,*/*;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Dest" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                <stringProp name="Header.value">image</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/v1/beacon/img.gif-65" enabled="true">
          <stringProp name="HTTPSampler.domain">b.6sc.co</stringProp>
          <stringProp name="HTTPSampler.port">443</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.path">/v1/beacon/img.gif</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments">
              <elementProp name="token" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">token</stringProp>
                <stringProp name="Argument.value">5f90029b56db57cd17027efd926646ef</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="svisitor" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">svisitor</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="visitor" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">visitor</stringProp>
                <stringProp name="Argument.value">e43783fd-0d0b-4b08-8499-84fc86871881</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="session" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">session</stringProp>
                <stringProp name="Argument.value">cfa3825d-7349-4a7a-87a4-13fccbbe3404</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="event" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">event</stringProp>
                <stringProp name="Argument.value">a_pageload</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="q" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">q</stringProp>
                <stringProp name="Argument.value">{&quot;pageLoadTime&quot;:&quot;Sat, 20 Jul 2024 15:23:54 GMT&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="isIframe" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">isIframe</stringProp>
                <stringProp name="Argument.value">false</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="m" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">m</stringProp>
                <stringProp name="Argument.value">{&quot;description&quot;:&quot;Accelerate the planning, testing, delivery and support of optimized applications.&quot;,&quot;keywords&quot;:&quot;&quot;,&quot;title&quot;:&quot;Application Delivery Marketplace | OpenText&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="cb" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">cb</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="r" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">r</stringProp>
                <stringProp name="Argument.value">https://www.microfocus.com/marketplace/appdelivery</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="thirdParty" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">thirdParty</stringProp>
                <stringProp name="Argument.value">{}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="v2" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">v2</stringProp>
                <stringProp name="Argument.value">1</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="pageURL" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">pageURL</stringProp>
                <stringProp name="Argument.value">https://www.microfocus.com/marketplace/appdelivery</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="pageViewId" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">pageViewId</stringProp>
                <stringProp name="Argument.value">08d224e6-f0d9-4af1-8fe4-78c8bb9ff1fa</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="v" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">v</stringProp>
                <stringProp name="Argument.value">1.1.22</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Sec-Fetch-Mode" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                <stringProp name="Header.value">no-cors</stringProp>
              </elementProp>
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">https://www.microfocus.com/</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Site" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                <stringProp name="Header.value">cross-site</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Priority" elementType="Header">
                <stringProp name="Header.name">Priority</stringProp>
                <stringProp name="Header.value">u=6, i</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:128.0) Gecko/20100101 Firefox/128.0</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">image/avif,image/webp,image/png,image/svg+xml,image/*;q=0.8,*/*;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Dest" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                <stringProp name="Header.value">image</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/tag/3ynmtgenx6-63" enabled="true">
          <stringProp name="HTTPSampler.domain">www.clarity.ms</stringProp>
          <stringProp name="HTTPSampler.port">443</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.path">/tag/3ynmtgenx6</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Sec-Fetch-Mode" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                <stringProp name="Header.value">no-cors</stringProp>
              </elementProp>
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">https://www.microfocus.com/</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Site" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                <stringProp name="Header.value">cross-site</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:128.0) Gecko/20100101 Firefox/128.0</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Dest" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                <stringProp name="Header.value">script</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/v1/beacon/img.gif-66" enabled="true">
          <stringProp name="HTTPSampler.domain">b.6sc.co</stringProp>
          <stringProp name="HTTPSampler.port">443</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.path">/v1/beacon/img.gif</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments">
              <elementProp name="token" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">token</stringProp>
                <stringProp name="Argument.value">5f90029b56db57cd17027efd926646ef</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="svisitor" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">svisitor</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="visitor" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">visitor</stringProp>
                <stringProp name="Argument.value">e43783fd-0d0b-4b08-8499-84fc86871881</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="session" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">session</stringProp>
                <stringProp name="Argument.value">cfa3825d-7349-4a7a-87a4-13fccbbe3404</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="event" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">event</stringProp>
                <stringProp name="Argument.value">active_time_track</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="q" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">q</stringProp>
                <stringProp name="Argument.value">{&quot;currentTime&quot;:&quot;Sat, 20 Jul 2024 15:23:55 GMT&quot;,&quot;lastTrackTime&quot;:&quot;Sat, 20 Jul 2024 15:23:54 GMT&quot;,&quot;timeSpent&quot;:&quot;1015&quot;,&quot;totalTimeSpent&quot;:&quot;1015&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="isIframe" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">isIframe</stringProp>
                <stringProp name="Argument.value">false</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="m" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">m</stringProp>
                <stringProp name="Argument.value">{&quot;description&quot;:&quot;Accelerate the planning, testing, delivery and support of optimized applications.&quot;,&quot;keywords&quot;:&quot;&quot;,&quot;title&quot;:&quot;Application Delivery Marketplace | OpenText&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="cb" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">cb</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="r" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">r</stringProp>
                <stringProp name="Argument.value">https://www.microfocus.com/marketplace/appdelivery</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="thirdParty" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">thirdParty</stringProp>
                <stringProp name="Argument.value">{}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="v2" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">v2</stringProp>
                <stringProp name="Argument.value">1</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="pageURL" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">pageURL</stringProp>
                <stringProp name="Argument.value">https://www.microfocus.com/marketplace/appdelivery</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="pageViewId" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">pageViewId</stringProp>
                <stringProp name="Argument.value">08d224e6-f0d9-4af1-8fe4-78c8bb9ff1fa</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="v" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">v</stringProp>
                <stringProp name="Argument.value">1.1.22</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Sec-Fetch-Mode" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                <stringProp name="Header.value">no-cors</stringProp>
              </elementProp>
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">https://www.microfocus.com/</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Site" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                <stringProp name="Header.value">cross-site</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Priority" elementType="Header">
                <stringProp name="Header.name">Priority</stringProp>
                <stringProp name="Header.value">u=6, i</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:128.0) Gecko/20100101 Firefox/128.0</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">image/avif,image/webp,image/png,image/svg+xml,image/*;q=0.8,*/*;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Dest" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                <stringProp name="Header.value">image</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/nidp/saml2/getintro-68" enabled="true">
          <stringProp name="TestPlan.comments">Detected the start of a redirect chain</stringProp>
          <stringProp name="HTTPSampler.domain">sldlogin.microfocus.com</stringProp>
          <stringProp name="HTTPSampler.port">443</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.path">/nidp/saml2/getintro</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments">
              <elementProp name="RelayState" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">RelayState</stringProp>
                <stringProp name="Argument.value">https://login.microfocus.com/nidp/app/login?sid=34&amp;first=true</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Sec-Fetch-Mode" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                <stringProp name="Header.value">navigate</stringProp>
              </elementProp>
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">https://www.microfocus.com/</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Site" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                <stringProp name="Header.value">same-site</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Priority" elementType="Header">
                <stringProp name="Header.name">Priority</stringProp>
                <stringProp name="Header.value">u=4</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/png,image/svg+xml,*/*;q=0.8</stringProp>
              </elementProp>
              <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:128.0) Gecko/20100101 Firefox/128.0</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Dest" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                <stringProp name="Header.value">iframe</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/collect-70" enabled="true">
          <stringProp name="HTTPSampler.domain">y.clarity.ms</stringProp>
          <stringProp name="HTTPSampler.port">443</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">/collect</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;e&quot;:[&quot;0.7.32&quot;,1,0,115,&quot;iu69ce0l9t&quot;,&quot;dprpjk&quot;,&quot;lkifca&quot;,2,0,0],&quot;a&quot;:[[2,8,1536,2380],[34,11,1536,731],[34,28,&quot;visible&quot;],[115,34,&quot;C_IS&quot;,[&quot;0&quot;]],[115,1,0,[&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:128.0) Gecko/20100101 Firefox/128.0&quot;],1,[&quot;https://www.microfocus.com/marketplace/appdelivery&quot;],2,[&quot;https://www.microfocus.com/marketplace/appdelivery&quot;],3,[&quot;Application Delivery Marketplace | OpenText&quot;],9,[&quot;en-US&quot;],15,[&quot;11oq4ji&quot;],16,[&quot;en&quot;],22,[&quot;Win32&quot;],26,[&quot;1.25&quot;],28,[&quot;1662&quot;],29,[&quot;2&quot;]],[115,0,0,1721489035679,1,0,3,87,4,91,5,9,6,32,7,1,14,1536,15,864,16,24,25,5,26,0,31,1,32,0,33,12,35,0]]}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Sec-Fetch-Mode" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                <stringProp name="Header.value">cors</stringProp>
              </elementProp>
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">https://www.microfocus.com/</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Site" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                <stringProp name="Header.value">cross-site</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Origin" elementType="Header">
                <stringProp name="Header.name">Origin</stringProp>
                <stringProp name="Header.value">https://www.microfocus.com</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">text/plain;charset=UTF-8</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:128.0) Gecko/20100101 Firefox/128.0</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Dest" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                <stringProp name="Header.value">empty</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/v1/beacon/img.gif-73" enabled="true">
          <stringProp name="HTTPSampler.domain">b.6sc.co</stringProp>
          <stringProp name="HTTPSampler.port">443</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.path">/v1/beacon/img.gif</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments">
              <elementProp name="token" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">token</stringProp>
                <stringProp name="Argument.value">5f90029b56db57cd17027efd926646ef</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="svisitor" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">svisitor</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="visitor" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">visitor</stringProp>
                <stringProp name="Argument.value">e43783fd-0d0b-4b08-8499-84fc86871881</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="session" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">session</stringProp>
                <stringProp name="Argument.value">cfa3825d-7349-4a7a-87a4-13fccbbe3404</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="event" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">event</stringProp>
                <stringProp name="Argument.value">active_time_track</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="q" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">q</stringProp>
                <stringProp name="Argument.value">{&quot;currentTime&quot;:&quot;Sat, 20 Jul 2024 15:23:56 GMT&quot;,&quot;lastTrackTime&quot;:&quot;Sat, 20 Jul 2024 15:23:55 GMT&quot;,&quot;timeSpent&quot;:&quot;1008&quot;,&quot;totalTimeSpent&quot;:&quot;2023&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="isIframe" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">isIframe</stringProp>
                <stringProp name="Argument.value">false</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="m" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">m</stringProp>
                <stringProp name="Argument.value">{&quot;description&quot;:&quot;Accelerate the planning, testing, delivery and support of optimized applications.&quot;,&quot;keywords&quot;:&quot;&quot;,&quot;title&quot;:&quot;Application Delivery Marketplace | OpenText&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="cb" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">cb</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="r" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">r</stringProp>
                <stringProp name="Argument.value">https://www.microfocus.com/marketplace/appdelivery</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="thirdParty" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">thirdParty</stringProp>
                <stringProp name="Argument.value">{}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="v2" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">v2</stringProp>
                <stringProp name="Argument.value">1</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="pageURL" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">pageURL</stringProp>
                <stringProp name="Argument.value">https://www.microfocus.com/marketplace/appdelivery</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="pageViewId" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">pageViewId</stringProp>
                <stringProp name="Argument.value">08d224e6-f0d9-4af1-8fe4-78c8bb9ff1fa</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="v" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">v</stringProp>
                <stringProp name="Argument.value">1.1.22</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Sec-Fetch-Mode" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                <stringProp name="Header.value">no-cors</stringProp>
              </elementProp>
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">https://www.microfocus.com/</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Site" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                <stringProp name="Header.value">cross-site</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Priority" elementType="Header">
                <stringProp name="Header.name">Priority</stringProp>
                <stringProp name="Header.value">u=6, i</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:128.0) Gecko/20100101 Firefox/128.0</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">image/avif,image/webp,image/png,image/svg+xml,image/*;q=0.8,*/*;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Dest" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                <stringProp name="Header.value">image</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/nidp/app/login-72" enabled="true">
          <stringProp name="TestPlan.comments">Detected the start of a redirect chain</stringProp>
          <stringProp name="HTTPSampler.domain">login.microfocus.com</stringProp>
          <stringProp name="HTTPSampler.port">443</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.path">/nidp/app/login</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments">
              <elementProp name="sid" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">sid</stringProp>
                <stringProp name="Argument.value">34</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="first" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">first</stringProp>
                <stringProp name="Argument.value">true</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="_saml_idp" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">_saml_idp</stringProp>
                <stringProp name="Argument.value">aHR0cHM6Ly9zbGRsb2dpbi5taWNyb2ZvY3VzLmNvbS9uaWRwL3NhbWwyL21ldGFkYXRh</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Sec-Fetch-Mode" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                <stringProp name="Header.value">navigate</stringProp>
              </elementProp>
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">https://www.microfocus.com/</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Site" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                <stringProp name="Header.value">same-site</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Priority" elementType="Header">
                <stringProp name="Header.name">Priority</stringProp>
                <stringProp name="Header.value">u=4</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/png,image/svg+xml,*/*;q=0.8</stringProp>
              </elementProp>
              <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:128.0) Gecko/20100101 Firefox/128.0</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Dest" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                <stringProp name="Header.value">iframe</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/v1/beacon/img.gif-75" enabled="true">
          <stringProp name="HTTPSampler.domain">b.6sc.co</stringProp>
          <stringProp name="HTTPSampler.port">443</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.path">/v1/beacon/img.gif</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments">
              <elementProp name="token" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">token</stringProp>
                <stringProp name="Argument.value">5f90029b56db57cd17027efd926646ef</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="svisitor" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">svisitor</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="visitor" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">visitor</stringProp>
                <stringProp name="Argument.value">e43783fd-0d0b-4b08-8499-84fc86871881</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="session" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">session</stringProp>
                <stringProp name="Argument.value">cfa3825d-7349-4a7a-87a4-13fccbbe3404</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="event" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">event</stringProp>
                <stringProp name="Argument.value">active_time_track</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="q" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">q</stringProp>
                <stringProp name="Argument.value">{&quot;currentTime&quot;:&quot;Sat, 20 Jul 2024 15:23:57 GMT&quot;,&quot;lastTrackTime&quot;:&quot;Sat, 20 Jul 2024 15:23:56 GMT&quot;,&quot;timeSpent&quot;:&quot;1016&quot;,&quot;totalTimeSpent&quot;:&quot;3039&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="isIframe" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">isIframe</stringProp>
                <stringProp name="Argument.value">false</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="m" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">m</stringProp>
                <stringProp name="Argument.value">{&quot;description&quot;:&quot;Accelerate the planning, testing, delivery and support of optimized applications.&quot;,&quot;keywords&quot;:&quot;&quot;,&quot;title&quot;:&quot;Application Delivery Marketplace | OpenText&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="cb" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">cb</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="r" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">r</stringProp>
                <stringProp name="Argument.value">https://www.microfocus.com/marketplace/appdelivery</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="thirdParty" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">thirdParty</stringProp>
                <stringProp name="Argument.value">{}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="v2" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">v2</stringProp>
                <stringProp name="Argument.value">1</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="pageURL" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">pageURL</stringProp>
                <stringProp name="Argument.value">https://www.microfocus.com/marketplace/appdelivery</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="pageViewId" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">pageViewId</stringProp>
                <stringProp name="Argument.value">08d224e6-f0d9-4af1-8fe4-78c8bb9ff1fa</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="v" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">v</stringProp>
                <stringProp name="Argument.value">1.1.22</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Sec-Fetch-Mode" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                <stringProp name="Header.value">no-cors</stringProp>
              </elementProp>
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">https://www.microfocus.com/</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Site" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                <stringProp name="Header.value">cross-site</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Priority" elementType="Header">
                <stringProp name="Header.name">Priority</stringProp>
                <stringProp name="Header.value">u=6, i</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:128.0) Gecko/20100101 Firefox/128.0</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">image/avif,image/webp,image/png,image/svg+xml,image/*;q=0.8,*/*;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Dest" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                <stringProp name="Header.value">image</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="HTTP Authorization Manager" enabled="true">
          <collectionProp name="AuthManager.auth_list">
            <elementProp name="" elementType="Authorization">
              <stringProp name="Authorization.url">https://epsilon.6sense.com/v3/company/</stringProp>
              <stringProp name="Authorization.username">${AUTH_LOGIN}</stringProp>
              <stringProp name="Authorization.password">${AUTH_PASSWORD}</stringProp>
              <stringProp name="Authorization.domain"></stringProp>
              <stringProp name="Authorization.realm"></stringProp>
              <stringProp name="Authorization.mechanism">KERBEROS</stringProp>
            </elementProp>
          </collectionProp>
          <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
        </AuthManager>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/collect-71" enabled="true">
          <stringProp name="HTTPSampler.domain">y.clarity.ms</stringProp>
          <stringProp name="HTTPSampler.port">443</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">/collect</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;e&quot;:[&quot;0.7.32&quot;,2,115,261,&quot;iu69ce0l9t&quot;,&quot;dprpjk&quot;,&quot;lkifca&quot;,2,0,0],&quot;a&quot;:[[115,4,1,1536,2380,1536,731,0,0,0,0,0,0],[376,0,1,1,2,382,3,121,4,125,5,17,25,3]],&quot;p&quot;:[[3,5,1,&quot;*D&quot;,&quot;name=html&quot;,&quot;publicId=&quot;,&quot;systemId=&quot;,2,1,&quot;HTML&quot;,&quot;lang=en&quot;,&quot;class=uk-height-1-1 uk-notouch&quot;,3,2,&quot;HEAD&quot;,&quot;*B=https://www.microfocus.com/marketplace/appdelivery&quot;,4,2,3,&quot;*T&quot;,&quot;\n    &quot;,5,2,4,&quot;BODY&quot;,&quot;class=uk-height-1-1&quot;,6,3,[19],&quot;\n        &quot;,7,3,6,[19,29],8,3,7,[19,29],9,3,8,[19,29],10,3,9,[19,29],11,3,10,[19,29],12,3,11,[19,29],13,3,12,[19],&quot;\n                            &quot;,14,3,13,[19],&quot;\n        \n        &quot;,15,3,14,&quot;TITLE&quot;,16,3,15,[19],&quot;\n                    &quot;,17,3,16,&quot;LINK&quot;,&quot;rel=icon&quot;,&quot;type=image/x-icon&quot;,&quot;href=https://d3075pyijv0bbs.cloudfront.net/ot_image/favicon.ico&quot;,18,3,17,[19,58],19,3,18,[76],&quot;rel=canonical&quot;,&quot;href=https://www.microfocus.com/marketplace/appdelivery&quot;,20,3,19,[19],&quot;\n                                 &quot;,21,3,20,[76],&quot;rel=preload&quot;,&quot;as=font&quot;,&quot;href=https://rsms.me/inter/font-files/Inter-ExtraLightItalic.woff?v=3.19&quot;,&quot;crossorigin=anonymous&quot;,22,3,21,[19,29],23,3,22,[76,99,100],&quot;href=https://rsms.me/inter/font-files/Inter-Bold.woff?v=3.19&quot;,[102],24,3,23,[19,29],25,3,24,[76,99,100],&quot;href=https://rsms.me/inter/font-files/Inter-SemiBold.woff?v=3.19&quot;,[102],26,3,25,[19,29],27,3,26,[76,99,100],&quot;href=https://rsms.me/inter/font-files/Inter-Light.woff?v=3.19&quot;,[102],28,3,27,[19,29],29,3,28,[76],&quot;rel=preconnect&quot;,&quot;href=http://www.googletagmanager.com&quot;,30,3,29,[19],&quot;\n         &quot;,31,3,30,[76],&quot;href=/marketplace/dist/generic.css&quot;,&quot;rel=stylesheet&quot;,&quot;media=all&quot;,32,3,31,[19,29],33,3,32,[76],&quot;href=/marketplace/dist/commons.css&quot;,[153,154],34,3,33,[19],&quot;\n           &quot;,35,3,34,[76],&quot;href=/marketplace/dist/client.css&quot;,[153,154],36,3,35,[19],&quot;\n        \n        \n        \t    \n&quot;,37,3,36,[19],&quot;\n                              &quot;,38,3,37,[76],&quot;href=https://s.go-mpulse.net/boomerang/5KNJK-8UTBJ-V9LAY-HLX72-YR7DF&quot;,[99],&quot;as=script&quot;,39,3,38,&quot;STYLE&quot;,&quot;id=onetrust-style&quot;,&quot;#onetrust-banner-sdk{-ms-text-size-adjust:100%;-webkit-text-size-adjust:100%}#onetrust-banner-sdk .onetrust-vendors-list-handler{cursor:pointer;color:#1f96db;font-size:inherit;font-weight:bold;text-decoration:none;margin-left:5px}#onetrust-banner-sdk .onetrust-vendors-list-handler:hover{color:#1f96db}#onetrust-banner-sdk:focus{outline:2px solid #000;outline-offset:-2px}#onetrust-banner-sdk a:focus{outline:2px solid #000}#onetrust-banner-sdk #onetrust-accept-btn-handler,#onetrust-banner-sdk #onetrust-reject-all-handler,#onetrust-banner-sdk #onetrust-pc-btn-handler{outline-offset:1px}#onetrust-banner-sdk.ot-bnr-w-logo .ot-bnr-logo{height:64px;width:64px}#onetrust-banner-sdk .ot-tcf2-vendor-count.ot-text-bold{font-weight:bold}#onetrust-banner-sdk .ot-close-icon,#onetrust-pc-sdk .ot-close-icon,#ot-sync-ntfy .ot-close-icon{background-size:contain;background-repeat:no-repeat;background-position:center;height:12px;width:12px}#onetrust-banner-sdk .powered-by-logo,#onetrust-banner-sdk .ot-pc-footer-logo a,#onetrust-pc-sdk .powered-by-logo,#onetrust-pc-sdk .ot-pc-footer-logo a,#ot-sync-ntfy .powered-by-logo,#ot-sync-ntfy .ot-pc-footer-logo a{background-size:contain;background-repeat:no-repeat;background-position:center;height:25px;width:152px;display:block;text-decoration:none;font-size:.75em}#onetrust-banner-sdk .powered-by-logo:hover,#onetrust-banner-sdk .ot-pc-footer-logo a:hover,#onetrust-pc-sdk .powered-by-logo:hover,#onetrust-pc-sdk .ot-pc-footer-logo a:hover,#ot-sync-ntfy .powered-by-logo:hover,#ot-sync-ntfy .ot-pc-footer-logo a:hover{color:#565656}#onetrust-banner-sdk h3 *,#onetrust-banner-sdk h4 *,#onetrust-banner-sdk h6 *,#onetrust-banner-sdk button *,#onetrust-banner-sdk a[data-parent-id] *,#onetrust-pc-sdk h3 *,#onetrust-pc-sdk h4 *,#onetrust-pc-sdk h6 *,#onetrust-pc-sdk button *,#onetrust-pc-sdk a[data-parent-id] *,#ot-sync-ntfy h3 *,#ot-sync-ntfy h4 *,#ot-sync-ntfy h6 *,#ot-sync-ntfy button *,#ot-sync-ntfy a[data-parent-id] *{font-size:inherit;font-weight:inherit;color:inherit}#onetrust-banner-sdk .ot-hide,#onetrust-pc-sdk .ot-hide,#ot-sync-ntfy .ot-hide{display:none !important}#onetrust-banner-sdk button.ot-link-btn:hover,#onetrust-pc-sdk button.ot-link-btn:hover,#ot-sync-ntfy button.ot-link-btn:hover{text-decoration:underline;opacity:1}#onetrust-pc-sdk .ot-sdk-row .ot-sdk-column{padding:0}#onetrust-pc-sdk .ot-sdk-container{padding-right:0}#onetrust-pc-sdk .ot-sdk-row{flex-direction:initial;width:100%}#onetrust-pc-sdk [type=checkbox]:checked,#onetrust-pc-sdk [type=checkbox]:not(:checked){pointer-events:initial}#onetrust-pc-sdk [type=checkbox]:disabled+label::before,#onetrust-pc-sdk [type=checkbox]:disabled+label:after,#onetrust-pc-sdk [type=checkbox]:disabled+label{pointer-events:none;opacity:.7}#onetrust-pc-sdk #vendor-list-content{transform:translate3d(0, 0, 0)}#onetrust-pc-sdk li input[type=checkbox]{z-index:1}#onetrust-pc-sdk li .ot-checkbox label{z-index:2}#onetrust-pc-sdk li .ot-checkbox input[type=checkbox]{height:auto;width:auto}#onetrust-pc-sdk li .host-title a,#onetrust-pc-sdk li .ot-host-name a,#onetrust-pc-sdk li .accordion-text,#onetrust-pc-sdk li .ot-acc-txt{z-index:2;position:relative}#onetrust-pc-sdk input{margin:3px .1ex}#onetrust-pc-sdk .pc-logo,#onetrust-pc-sdk .ot-pc-logo{height:60px;width:180px;background-position:center;background-size:contain;background-repeat:no-repeat;display:inline-flex;justify-content:center;align-items:center}#onetrust-pc-sdk .pc-logo img,#onetrust-pc-sdk .ot-pc-logo img{max-height:100%;max-width:100%}#onetrust-pc-sdk .screen-reader-only,#onetrust-pc-sdk .ot-scrn-rdr,.ot-sdk-cookie-policy .screen-reader-only,.ot-sdk-cookie-policy .ot-scrn-rdr{border:0;clip:rect(0 0 0 0);height:1px;margin:-1px;overflow:hidden;padding:0;position:absolute;width:1px}#onetrust-pc-sdk.ot-fade-in,.onetrust-pc-dark-filter.ot-fade-in,#onetrust-banner-sdk.ot-fade-in{animation-name:onetrust-fade-in;animation-duration:400ms;animation-timing-function:ease-in-out}#onetrust-pc-sdk.ot-hide{display:none !important}.onetrust-pc-dark-filter.ot-hide{display:none !important}#ot-sdk-btn.ot-sdk-show-settings,#ot-sdk-btn.optanon-show-settings{color:#68b631;border:1px solid #68b631;height:auto;white-space:normal;word-wrap:break-word;padding:.8em 2em;font-size:.8em;line-height:1.2;cursor:pointer;-moz-transition:.1s ease;-o-transition:.1s ease;-webkit-transition:1s ease;transition:.1s ease}#ot-sdk-btn.ot-sdk-show-settings:hover,#ot-sdk-btn.optanon-show-settings:hover{color:#fff;background-color:#68b631}.onetrust-pc-dark-filter{background:rgba(0,0,0,.5);z-index:2147483646;width:100%;height:100%;overflow:hidden;position:fixed;top:0;bottom:0;left:0}@keyframes onetrust-fade-in{0%{opacity:0}100%{opacity:1}}.ot-cookie-label{text-decoration:underline}@media only screen and (min-width: 426px)and (max-width: 896px)and (orientation: landscape){#onetrust-pc-sdk p{font-size:.75em}}#onetrust-banner-sdk .banner-option-input:focus+label{outline:1px solid #000;outline-style:auto}.category-vendors-list-handler+a:focus,.category-vendors-list-handler+a:focus-visible{outline:2px solid #000}#onetrust-pc-sdk .ot-userid-title{margin-top:10px}#onetrust-pc-sdk .ot-userid-title&gt;span,#onetrust-pc-sdk .ot-userid-timestamp&gt;span{font-weight:700}#onetrust-pc-sdk .ot-userid-desc{font-style:italic}#onetrust-pc-sdk .ot-host-desc a{pointer-events:initial}#onetrust-pc-sdk .ot-ven-hdr&gt;p a{position:relative;z-index:2;pointer-events:initial}#onetrust-pc-sdk .ot-vnd-serv .ot-vnd-item .ot-vnd-info a,#onetrust-pc-sdk .ot-vs-list .ot-vnd-item .ot-vnd-info a{margin-right:auto}#onetrust-pc-sdk .ot-pc-footer-logo img{width:136px;height:16px}#onetrust-pc-sdk .ot-pur-vdr-count{font-weight:400;font-size:.7rem;padding-top:3px;display:block}#onetrust-banner-sdk .ot-optout-signal,#onetrust-pc-sdk .ot-optout-signal{border:1px solid #32ae88;border-radius:3px;padding:5px;margin-bottom:10px;background-color:#f9fffa;font-size:.85rem;line-height:2}#onetrust-banner-sdk .ot-optout-signal .ot-optout-icon,#onetrust-pc-sdk .ot-optout-signal .ot-optout-icon{display:inline;margin-right:5px}#onetrust-banner-sdk .ot-optout-signal svg,#onetrust-pc-sdk .ot-optout-signal svg{height:20px;width:30px;transform:scale(0.5)}#onetrust-banner-sdk .ot-optout-signal svg path,#onetrust-pc-sdk .ot-optout-signal svg path{fill:#32ae88}#onetrust-consent-sdk .ot-general-modal{overflow:hidden;position:fixed;margin:0 auto;top:50%;left:50%;width:40%;padding:1.5rem;max-width:575px;min-width:575px;z-index:2147483647;border-radius:2.5px;transform:translate(-50%, -50%)}#onetrust-consent-sdk .ot-signature-health-group{margin-top:1rem;padding-left:1.25rem;padding-right:1.25rem;margin-bottom:.625rem;width:calc(100% - 2.5rem)}#onetrust-consent-sdk .ot-signature-health-group .ot-signature-health-form{gap:.5rem}#onetrust-consent-sdk .ot-signature-health .ot-signature-health-form{width:70%;gap:.35rem}#onetrust-consent-sdk .ot-signature-health .ot-signature-input{height:38px;padding:6px 10px;background-color:#fff;border:1px solid #d1d1d1;border-radius:4px;box-shadow:none;box-sizing:border-box}#onetrust-consent-sdk .ot-signature-health .ot-signature-subtitle{font-size:1.125rem}#onetrust-consent-sdk .ot-signature-health .ot-signature-group-title{font-size:1.125rem;font-weight:bold}#onetrust-consent-sdk .ot-signature-health,#onetrust-consent-sdk .ot-signature-health-group{display:flex;flex-direction:column;gap:1rem}#onetrust-consent-sdk .ot-signature-health .ot-signature-cont,#onetrust-consent-sdk .ot-signature-health-group .ot-signature-cont{display:flex;flex-direction:column;gap:.25rem}#onetrust-consent-sdk .ot-signature-health .ot-signarure-paragraph,#onetrust-consent-sdk .ot-signature-health-group .ot-signarure-paragraph{margin:0;line-height:20px;font-size:max(14px,.875rem)}#onetrust-consent-sdk .ot-signature-health .ot-health-signature-error,#onetrust-consent-sdk .ot-signature-health-group .ot-health-signature-error{color:#4d4d4d;font-size:min(12px,.75rem)}#onetrust-consent-sdk .ot-signature-health .ot-signature-buttons-cont,#onetrust-consent-sdk .ot-signature-health-group .ot-signature-buttons-cont{margin-top:max(.75rem,2%);gap:1rem;display:flex;justify-content:flex-end}#onetrust-consent-sdk .ot-signature-health .ot-signature-button,#onetrust-consent-sdk .ot-signature-health-group .ot-signature-button{flex:1;height:auto;color:#fff;cursor:pointer;line-height:1.2;min-width:125px;font-weight:600;font-size:.813em;border-radius:2px;padding:12px 10px;white-space:normal;word-wrap:break-word;word-break:break-word;background-color:#68b631;border:2px solid #68b631}#onetrust-consent-sdk .ot-signature-health .ot-signature-button.reject,#onetrust-consent-sdk .ot-signature-health-group .ot-signature-button.reject{background-color:#fff}#onetrust-consent-sdk .ot-input-field-cont{display:flex;flex-direction:column;gap:.5rem}#onetrust-consent-sdk .ot-input-field-cont .ot-signature-input{width:65%}#onetrust-consent-sdk .ot-signature-health-form{display:flex;flex-direction:column}#onetrust-consent-sdk .ot-signature-health-form .ot-signature-label{margin-bottom:0;line-height:20px;font-size:max(14px,.875rem)}@media only screen and (max-width: 600px){#onetrust-consent-sdk .ot-general-modal{min-width:100%}#onetrust-consent-sdk .ot-signature-health .ot-signature-health-form{width:100%}#onetrust-consent-sdk .ot-input-field-cont .ot-signature-input{width:100%}}#onetrust-banner-sdk,#onetrust-pc-sdk,#ot-sdk-cookie-policy,#ot-sync-ntfy{font-size:16px}#onetrust-banner-sdk *,#onetrust-banner-sdk ::after,#onetrust-banner-sdk ::before,#onetrust-pc-sdk *,#onetrust-pc-sdk ::after,#onetrust-pc-sdk ::before,#ot-sdk-cookie-policy *,#ot-sdk-cookie-policy ::after,#ot-sdk-cookie-policy ::before,#ot-sync-ntfy *,#ot-sync-ntfy ::after,#ot-sync-ntfy ::before{-webkit-box-sizing:content-box;-moz-box-sizing:content-box;box-sizing:content-box}#onetrust-banner-sdk div,#onetrust-banner-sdk span,#onetrust-banner-sdk h1,#onetrust-banner-sdk h2,#onetrust-banner-sdk h3,#onetrust-banner-sdk h4,#onetrust-banner-sdk h5,#onetrust-banner-sdk h6,#onetrust-banner-sdk p,#onetrust-banner-sdk img,#onetrust-banner-sdk svg,#onetrust-banner-sdk button,#onetrust-banner-sdk section,#onetrust-banner-sdk a,#onetrust-banner-sdk label,#onetrust-banner-sdk input,#onetrust-banner-sdk ul,#onetrust-banner-sdk li,#onetrust-banner-sdk nav,#onetrust-banner-sdk table,#onetrust-banner-sdk thead,#onetrust-banner-sdk tr,#onetrust-banner-sdk td,#onetrust-banner-sdk tbody,#onetrust-banner-sdk .ot-main-content,#onetrust-banner-sdk .ot-toggle,#onetrust-banner-sdk #ot-content,#onetrust-banner-sdk #ot-pc-content,#onetrust-banner-sdk .checkbox,#onetrust-pc-sdk div,#onetrust-pc-sdk span,#onetrust-pc-sdk h1,#onetrust-pc-sdk h2,#onetrust-pc-sdk h3,#onetrust-pc-sdk h4,#onetrust-pc-sdk h5,#onetrust-pc-sdk h6,#onetrust-pc-sdk p,#onetrust-pc-sdk img,#onetrust-pc-sdk svg,#onetrust-pc-sdk button,#onetrust-pc-sdk section,#onetrust-pc-sdk a,#onetrust-pc-sdk label,#onetrust-pc-sdk input,#onetrust-pc-sdk ul,#onetrust-pc-sdk li,#onetrust-pc-sdk nav,#onetrust-pc-sdk table,#onetrust-pc-sdk thead,#onetrust-pc-sdk tr,#onetrust-pc-sdk td,#onetrust-pc-sdk tbody,#onetrust-pc-sdk .ot-main-content,#onetrust-pc-sdk .ot-toggle,#onetrust-pc-sdk #ot-content,#onetrust-pc-sdk #ot-pc-content,#onetrust-pc-sdk .checkbox,#ot-sdk-cookie-policy div,#ot-sdk-cookie-policy span,#ot-sdk-cookie-policy h1,#ot-sdk-cookie-policy h2,#ot-sdk-cookie-policy h3,#ot-sdk-cookie-policy h4,#ot-sdk-cookie-policy h5,#ot-sdk-cookie-policy h6,#ot-sdk-cookie-policy p,#ot-sdk-cookie-policy img,#ot-sdk-cookie-policy svg,#ot-sdk-cookie-policy button,#ot-sdk-cookie-policy section,#ot-sdk-cookie-policy a,#ot-sdk-cookie-policy label,#ot-sdk-cookie-policy input,#ot-sdk-cookie-policy ul,#ot-sdk-cookie-policy li,#ot-sdk-cookie-policy nav,#ot-sdk-cookie-policy table,#ot-sdk-cookie-policy thead,#ot-sdk-cookie-policy tr,#ot-sdk-cookie-policy td,#ot-sdk-cookie-policy tbody,#ot-sdk-cookie-policy .ot-main-content,#ot-sdk-cookie-policy .ot-toggle,#ot-sdk-cookie-policy #ot-content,#ot-sdk-cookie-policy #ot-pc-content,#ot-sdk-cookie-policy .checkbox,#ot-sync-ntfy div,#ot-sync-ntfy span,#ot-sync-ntfy h1,#ot-sync-ntfy h2,#ot-sync-ntfy h3,#ot-sync-ntfy h4,#ot-sync-ntfy h5,#ot-sync-ntfy h6,#ot-sync-ntfy p,#ot-sync-ntfy img,#ot-sync-ntfy svg,#ot-sync-ntfy button,#ot-sync-ntfy section,#ot-sync-ntfy a,#ot-sync-ntfy label,#ot-sync-ntfy input,#ot-sync-ntfy ul,#ot-sync-ntfy li,#ot-sync-ntfy nav,#ot-sync-ntfy table,#ot-sync-ntfy thead,#ot-sync-ntfy tr,#ot-sync-ntfy td,#ot-sync-ntfy tbody,#ot-sync-ntfy .ot-main-content,#ot-sync-ntfy .ot-toggle,#ot-sync-ntfy #ot-content,#ot-sync-ntfy #ot-pc-content,#ot-sync-ntfy .checkbox{font-family:inherit;font-weight:normal;-webkit-font-smoothing:auto;letter-spacing:normal;line-height:normal;padding:0;margin:0;height:auto;min-height:0;max-height:none;width:auto;min-width:0;max-width:none;border-radius:0;border:none;clear:none;float:none;position:static;bottom:auto;left:auto;right:auto;top:auto;text-align:left;text-decoration:none;text-indent:0;text-shadow:none;text-transform:none;white-space:normal;background:none;overflow:visible;vertical-align:baseline;visibility:visible;z-index:auto;box-shadow:none}#onetrust-banner-sdk label:before,#onetrust-banner-sdk label:after,#onetrust-banner-sdk .checkbox:after,#onetrust-banner-sdk .checkbox:before,#onetrust-pc-sdk label:before,#onetrust-pc-sdk label:after,#onetrust-pc-sdk .checkbox:after,#onetrust-pc-sdk .checkbox:before,#ot-sdk-cookie-policy label:before,#ot-sdk-cookie-policy label:after,#ot-sdk-cookie-policy .checkbox:after,#ot-sdk-cookie-policy .checkbox:before,#ot-sync-ntfy label:before,#ot-sync-ntfy label:after,#ot-sync-ntfy .checkbox:after,#ot-sync-ntfy .checkbox:before{content:\&quot;\&quot;;content:none}#onetrust-banner-sdk .ot-sdk-container,#onetrust-pc-sdk .ot-sdk-container,#ot-sdk-cookie-policy .ot-sdk-container{position:relative;width:100%;max-width:100%;margin:0 auto;padding:0 20px;box-sizing:border-box}#onetrust-banner-sdk .ot-sdk-column,#onetrust-banner-sdk .ot-sdk-columns,#onetrust-pc-sdk .ot-sdk-column,#onetrust-pc-sdk .ot-sdk-columns,#ot-sdk-cookie-policy .ot-sdk-column,#ot-sdk-cookie-policy .ot-sdk-columns{width:100%;float:left;box-sizing:border-box;padding:0;display:initial}@media(min-width: 400px){#onetrust-banner-sdk .ot-sdk-container,#onetrust-pc-sdk .ot-sdk-container,#ot-sdk-cookie-policy .ot-sdk-container{width:90%;padding:0}}@media(min-width: 550px){#onetrust-banner-sdk .ot-sdk-container,#onetrust-pc-sdk .ot-sdk-container,#ot-sdk-cookie-policy .ot-sdk-container{width:100%}#onetrust-banner-sdk .ot-sdk-column,#onetrust-banner-sdk .ot-sdk-columns,#onetrust-pc-sdk .ot-sdk-column,#onetrust-pc-sdk .ot-sdk-columns,#ot-sdk-cookie-policy .ot-sdk-column,#ot-sdk-cookie-policy .ot-sdk-columns{margin-left:4%}#onetrust-banner-sdk .ot-sdk-column:first-child,#onetrust-banner-sdk .ot-sdk-columns:first-child,#onetrust-pc-sdk .ot-sdk-column:first-child,#onetrust-pc-sdk .ot-sdk-columns:first-child,#ot-sdk-cookie-policy .ot-sdk-column:first-child,#ot-sdk-cookie-policy .ot-sdk-columns:first-child{margin-left:0}#onetrust-banner-sdk .ot-sdk-two.ot-sdk-columns,#onetrust-pc-sdk .ot-sdk-two.ot-sdk-columns,#ot-sdk-cookie-policy .ot-sdk-two.ot-sdk-columns{width:13.3333333333%}#onetrust-banner-sdk .ot-sdk-three.ot-sdk-columns,#onetrust-pc-sdk .ot-sdk-three.ot-sdk-columns,#ot-sdk-cookie-policy .ot-sdk-three.ot-sdk-columns{width:22%}#onetrust-banner-sdk .ot-sdk-four.ot-sdk-columns,#onetrust-pc-sdk .ot-sdk-four.ot-sdk-columns,#ot-sdk-cookie-policy .ot-sdk-four.ot-sdk-columns{width:30.6666666667%}#onetrust-banner-sdk .ot-sdk-eight.ot-sdk-columns,#onetrust-pc-sdk .ot-sdk-eight.ot-sdk-columns,#ot-sdk-cookie-policy .ot-sdk-eight.ot-sdk-columns{width:65.3333333333%}#onetrust-banner-sdk .ot-sdk-nine.ot-sdk-columns,#onetrust-pc-sdk .ot-sdk-nine.ot-sdk-columns,#ot-sdk-cookie-policy .ot-sdk-nine.ot-sdk-columns{width:74%}#onetrust-banner-sdk .ot-sdk-ten.ot-sdk-columns,#onetrust-pc-sdk .ot-sdk-ten.ot-sdk-columns,#ot-sdk-cookie-policy .ot-sdk-ten.ot-sdk-columns{width:82.6666666667%}#onetrust-banner-sdk .ot-sdk-eleven.ot-sdk-columns,#onetrust-pc-sdk .ot-sdk-eleven.ot-sdk-columns,#ot-sdk-cookie-policy .ot-sdk-eleven.ot-sdk-columns{width:91.3333333333%}#onetrust-banner-sdk .ot-sdk-twelve.ot-sdk-columns,#onetrust-pc-sdk .ot-sdk-twelve.ot-sdk-columns,#ot-sdk-cookie-policy .ot-sdk-twelve.ot-sdk-columns{width:100%;margin-left:0}}#onetrust-banner-sdk h1,#onetrust-banner-sdk h2,#onetrust-banner-sdk h3,#onetrust-banner-sdk h4,#onetrust-banner-sdk h5,#onetrust-banner-sdk h6,#onetrust-pc-sdk h1,#onetrust-pc-sdk h2,#onetrust-pc-sdk h3,#onetrust-pc-sdk h4,#onetrust-pc-sdk h5,#onetrust-pc-sdk h6,#ot-sdk-cookie-policy h1,#ot-sdk-cookie-policy h2,#ot-sdk-cookie-policy h3,#ot-sdk-cookie-policy h4,#ot-sdk-cookie-policy h5,#ot-sdk-cookie-policy h6{margin-top:0;font-weight:600;font-family:inherit}#onetrust-banner-sdk h1,#onetrust-pc-sdk h1,#ot-sdk-cookie-policy h1{font-size:1.5rem;line-height:1.2}#onetrust-banner-sdk h2,#onetrust-pc-sdk h2,#ot-sdk-cookie-policy h2{font-size:1.5rem;line-height:1.25}#onetrust-banner-sdk h3,#onetrust-pc-sdk h3,#ot-sdk-cookie-policy h3{font-size:1.5rem;line-height:1.3}#onetrust-banner-sdk h4,#onetrust-pc-sdk h4,#ot-sdk-cookie-policy h4{font-size:1.5rem;line-height:1.35}#onetrust-banner-sdk h5,#onetrust-pc-sdk h5,#ot-sdk-cookie-policy h5{font-size:1.5rem;line-height:1.5}#onetrust-banner-sdk h6,#onetrust-pc-sdk h6,#ot-sdk-cookie-policy h6{font-size:1.5rem;line-height:1.6}@media(min-width: 550px){#onetrust-banner-sdk h1,#onetrust-pc-sdk h1,#ot-sdk-cookie-policy h1{font-size:1.5rem}#onetrust-banner-sdk h2,#onetrust-pc-sdk h2,#ot-sdk-cookie-policy h2{font-size:1.5rem}#onetrust-banner-sdk h3,#onetrust-pc-sdk h3,#ot-sdk-cookie-policy h3{font-size:1.5rem}#onetrust-banner-sdk h4,#onetrust-pc-sdk h4,#ot-sdk-cookie-policy h4{font-size:1.5rem}#onetrust-banner-sdk h5,#onetrust-pc-sdk h5,#ot-sdk-cookie-policy h5{font-size:1.5rem}#onetrust-banner-sdk h6,#onetrust-pc-sdk h6,#ot-sdk-cookie-policy h6{font-size:1.5rem}}#onetrust-banner-sdk p,#onetrust-pc-sdk p,#ot-sdk-cookie-policy p{margin:0 0 1em 0;font-family:inherit;line-height:normal}#onetrust-banner-sdk a,#onetrust-pc-sdk a,#ot-sdk-cookie-policy a{color:#565656;text-decoration:underline}#onetrust-banner-sdk a:hover,#onetrust-pc-sdk a:hover,#ot-sdk-cookie-policy a:hover{color:#565656;text-decoration:none}#onetrust-banner-sdk .ot-sdk-button,#onetrust-banner-sdk button,#onetrust-pc-sdk .ot-sdk-button,#onetrust-pc-sdk button,#ot-sdk-cookie-policy .ot-sdk-button,#ot-sdk-cookie-policy button{margin-bottom:1rem;font-family:inherit}#onetrust-banner-sdk .ot-sdk-button,#onetrust-banner-sdk button,#onetrust-pc-sdk .ot-sdk-button,#onetrust-pc-sdk button,#ot-sdk-cookie-policy .ot-sdk-button,#ot-sdk-cookie-policy button{display:inline-block;height:38px;padding:0 30px;color:#555;text-align:center;font-size:.9em;font-weight:400;line-height:38px;letter-spacing:.01em;text-decoration:none;white-space:nowrap;background-color:rgba(0,0,0,0);border-radius:2px;border:1px solid #bbb;cursor:pointer;box-sizing:border-box}#onetrust-banner-sdk .ot-sdk-button:hover,#onetrust-banner-sdk :not(.ot-leg-btn-container)&gt;button:not(.ot-link-btn):hover,#onetrust-banner-sdk :not(.ot-leg-btn-container)&gt;button:not(.ot-link-btn):focus,#onetrust-pc-sdk .ot-sdk-button:hover,#onetrust-pc-sdk :not(.ot-leg-btn-container)&gt;button:not(.ot-link-btn):hover,#onetrust-pc-sdk :not(.ot-leg-btn-container)&gt;button:not(.ot-link-btn):focus,#ot-sdk-cookie-policy .ot-sdk-button:hover,#ot-sdk-cookie-policy :not(.ot-leg-btn-container)&gt;button:not(.ot-link-btn):hover,#ot-sdk-cookie-policy :not(.ot-leg-btn-container)&gt;button:not(.ot-link-btn):focus{color:#333;border-color:#888;opacity:.7}#onetrust-banner-sdk .ot-sdk-button:focus,#onetrust-banner-sdk :not(.ot-leg-btn-container)&gt;button:focus,#onetrust-pc-sdk .ot-sdk-button:focus,#onetrust-pc-sdk :not(.ot-leg-btn-container)&gt;button:focus,#ot-sdk-cookie-policy .ot-sdk-button:focus,#ot-sdk-cookie-policy :not(.ot-leg-btn-container)&gt;button:focus{outline:2px solid #000}#onetrust-banner-sdk .ot-sdk-button.ot-sdk-button-primary,#onetrust-banner-sdk button.ot-sdk-button-primary,#onetrust-banner-sdk input[type=submit].ot-sdk-button-primary,#onetrust-banner-sdk input[type=reset].ot-sdk-button-primary,#onetrust-banner-sdk input[type=button].ot-sdk-button-primary,#onetrust-pc-sdk .ot-sdk-button.ot-sdk-button-primary,#onetrust-pc-sdk button.ot-sdk-button-primary,#onetrust-pc-sdk input[type=submit].ot-sdk-button-primary,#onetrust-pc-sdk input[type=reset].ot-sdk-button-primary,#onetrust-pc-sdk input[type=button].ot-sdk-button-primary,#ot-sdk-cookie-policy .ot-sdk-button.ot-sdk-button-primary,#ot-sdk-cookie-policy button.ot-sdk-button-primary,#ot-sdk-cookie-policy input[type=submit].ot-sdk-button-primary,#ot-sdk-cookie-policy input[type=reset].ot-sdk-button-primary,#ot-sdk-cookie-policy input[type=button].ot-sdk-button-primary{color:#fff;background-color:#33c3f0;border-color:#33c3f0}#onetrust-banner-sdk .ot-sdk-button.ot-sdk-button-primary:hover,#onetrust-banner-sdk button.ot-sdk-button-primary:hover,#onetrust-banner-sdk input[type=submit].ot-sdk-button-primary:hover,#onetrust-banner-sdk input[type=reset].ot-sdk-button-primary:hover,#onetrust-banner-sdk input[type=button].ot-sdk-button-primary:hover,#onetrust-banner-sdk .ot-sdk-button.ot-sdk-button-primary:focus,#onetrust-banner-sdk button.ot-sdk-button-primary:focus,#onetrust-banner-sdk input[type=submit].ot-sdk-button-primary:focus,#onetrust-banner-sdk input[type=reset].ot-sdk-button-primary:focus,#onetrust-banner-sdk input[type=button].ot-sdk-button-primary:focus,#onetrust-pc-sdk .ot-sdk-button.ot-sdk-button-primary:hover,#onetrust-pc-sdk button.ot-sdk-button-primary:hover,#onetrust-pc-sdk input[type=submit].ot-sdk-button-primary:hover,#onetrust-pc-sdk input[type=reset].ot-sdk-button-primary:hover,#onetrust-pc-sdk input[type=button].ot-sdk-button-primary:hover,#onetrust-pc-sdk .ot-sdk-button.ot-sdk-button-primary:focus,#onetrust-pc-sdk button.ot-sdk-button-primary:focus,#onetrust-pc-sdk input[type=submit].ot-sdk-button-primary:focus,#onetrust-pc-sdk input[type=reset].ot-sdk-button-primary:focus,#onetrust-pc-sdk input[type=button].ot-sdk-button-primary:focus,#ot-sdk-cookie-policy .ot-sdk-button.ot-sdk-button-primary:hover,#ot-sdk-cookie-policy button.ot-sdk-button-primary:hover,#ot-sdk-cookie-policy input[type=submit].ot-sdk-button-primary:hover,#ot-sdk-cookie-policy input[type=reset].ot-sdk-button-primary:hover,#ot-sdk-cookie-policy input[type=button].ot-sdk-button-primary:hover,#ot-sdk-cookie-policy .ot-sdk-button.ot-sdk-button-primary:focus,#ot-sdk-cookie-policy button.ot-sdk-button-primary:focus,#ot-sdk-cookie-policy input[type=submit].ot-sdk-button-primary:focus,#ot-sdk-cookie-policy input[type=reset].ot-sdk-button-primary:focus,#ot-sdk-cookie-policy input[type=button].ot-sdk-button-primary:focus{color:#fff;background-color:#1eaedb;border-color:#1eaedb}#onetrust-banner-sdk input[type=text],#onetrust-pc-sdk input[type=text],#ot-sdk-cookie-policy input[type=text]{height:38px;padding:6px 10px;background-color:#fff;border:1px solid #d1d1d1;border-radius:4px;box-shadow:none;box-sizing:border-box}#onetrust-banner-sdk input[type=text],#onetrust-pc-sdk input[type=text],#ot-sdk-cookie-policy input[type=text]{-webkit-appearance:none;-moz-appearance:none;appearance:none}#onetrust-banner-sdk input[type=text]:focus,#onetrust-pc-sdk input[type=text]:focus,#ot-sdk-cookie-policy input[type=text]:focus{border:1px solid #000;outline:0}#onetrust-banner-sdk label,#onetrust-pc-sdk label,#ot-sdk-cookie-policy label{display:block;margin-bottom:.5rem;font-weight:600}#onetrust-banner-sdk input[type=checkbox],#onetrust-pc-sdk input[type=checkbox],#ot-sdk-cookie-policy input[type=checkbox]{display:inline}#onetrust-banner-sdk ul,#onetrust-pc-sdk ul,#ot-sdk-cookie-policy ul{list-style:circle inside}#onetrust-banner-sdk ul,#onetrust-pc-sdk ul,#ot-sdk-cookie-policy ul{padding-left:0;margin-top:0}#onetrust-banner-sdk ul ul,#onetrust-pc-sdk ul ul,#ot-sdk-cookie-policy ul ul{margin:1.5rem 0 1.5rem 3rem;font-size:90%}#onetrust-banner-sdk li,#onetrust-pc-sdk li,#ot-sdk-cookie-policy li{margin-bottom:1rem}#onetrust-banner-sdk th,#onetrust-banner-sdk td,#onetrust-pc-sdk th,#onetrust-pc-sdk td,#ot-sdk-cookie-policy th,#ot-sdk-cookie-policy td{padding:12px 15px;text-align:left;border-bottom:1px solid #e1e1e1}#onetrust-banner-sdk button,#onetrust-pc-sdk button,#ot-sdk-cookie-policy button{margin-bottom:1rem;font-family:inherit}#onetrust-banner-sdk .ot-sdk-container:after,#onetrust-banner-sdk .ot-sdk-row:after,#onetrust-pc-sdk .ot-sdk-container:after,#onetrust-pc-sdk .ot-sdk-row:after,#ot-sdk-cookie-policy .ot-sdk-container:after,#ot-sdk-cookie-policy .ot-sdk-row:after{content:\&quot;\&quot;;display:table;clear:both}#onetrust-banner-sdk .ot-sdk-row,#onetrust-pc-sdk .ot-sdk-row,#ot-sdk-cookie-policy .ot-sdk-row{margin:0;max-width:none;display:block}#onetrust-banner-sdk{box-shadow:0 0 18px rgba(0,0,0,.2)}#onetrust-banner-sdk.otFlat{position:fixed;z-index:2147483645;bottom:0;right:0;left:0;background-color:#fff;max-height:90%;overflow-x:hidden;overflow-y:auto}#onetrust-banner-sdk.otFlat.top{top:0px;bottom:auto}#onetrust-banner-sdk.otRelFont{font-size:1rem}#onetrust-banner-sdk&gt;.ot-sdk-container{overflow:hidden}#onetrust-banner-sdk::-webkit-scrollbar{width:11px}#onetrust-banner-sdk::-webkit-scrollbar-thumb{border-radius:10px;background:#c1c1c1}#onetrust-banner-sdk{scrollbar-arrow-color:#c1c1c1;scrollbar-darkshadow-color:#c1c1c1;scrollbar-face-color:#c1c1c1;scrollbar-shadow-color:#c1c1c1}#onetrust-banner-sdk #onetrust-policy{margin:1.25em 0 .625em 2em;overflow:hidden}#onetrust-banner-sdk #onetrust-policy .ot-gv-list-handler{float:left;font-size:.82em;padding:0;margin-bottom:0;border:0;line-height:normal;height:auto;width:auto}#onetrust-banner-sdk #onetrust-policy-title{font-size:1.2em;line-height:1.3;margin-bottom:10px}#onetrust-banner-sdk #onetrust-policy-text{clear:both;text-align:left;font-size:.88em;line-height:1.4}#onetrust-banner-sdk #onetrust-policy-text *{font-size:inherit;line-height:inherit}#onetrust-banner-sdk #onetrust-policy-text a{font-weight:bold;margin-left:5px}#onetrust-banner-sdk #onetrust-policy-title,#onetrust-banner-sdk #onetrust-policy-text{color:dimgray;float:left}#onetrust-banner-sdk #onetrust-button-group-parent{min-height:1px;text-align:center}#onetrust-banner-sdk #onetrust-button-group{display:inline-block}#onetrust-banner-sdk #onetrust-accept-btn-handler,#onetrust-banner-sdk #onetrust-reject-all-handler,#onetrust-banner-sdk #onetrust-pc-btn-handler{background-color:#68b631;color:#fff;border-color:#68b631;margin-right:1em;min-width:125px;height:auto;white-space:normal;word-break:break-word;word-wrap:break-word;padding:12px 10px;line-height:1.2;font-size:.813em;font-weight:600}#onetrust-banner-sdk #onetrust-pc-btn-handler.cookie-setting-link{background-color:#fff;border:none;color:#68b631;text-decoration:underline;padding-left:0;padding-right:0}#onetrust-banner-sdk .onetrust-close-btn-ui{width:44px;height:44px;background-size:12px;border:none;position:relative;margin:auto;padding:0}#onetrust-banner-sdk .banner_logo{display:none}#onetrust-banner-sdk.ot-bnr-w-logo .ot-bnr-logo{position:absolute;top:50%;transform:translateY(-50%);left:0px}#onetrust-banner-sdk.ot-bnr-w-logo #onetrust-policy{margin-left:65px}#onetrust-banner-sdk .ot-b-addl-desc{clear:both;float:left;display:block}#onetrust-banner-sdk #banner-options{float:left;display:table;margin-right:0;margin-left:1em;width:calc(100% - 1em)}#onetrust-banner-sdk .banner-option-input{cursor:pointer;width:auto;height:auto;border:none;padding:0;padding-right:3px;margin:0 0 10px;font-size:.82em;line-height:1.4}#onetrust-banner-sdk .banner-option-input *{pointer-events:none;font-size:inherit;line-height:inherit}#onetrust-banner-sdk .banner-option-input[aria-expanded=true]~.banner-option-details{display:block;height:auto}#onetrust-banner-sdk .banner-option-input[aria-expanded=true] .ot-arrow-container{transform:rotate(90deg)}#onetrust-banner-sdk .banner-option{margin-bottom:12px;margin-left:0;border:none;float:left;padding:0}#onetrust-banner-sdk .banner-option:first-child{padding-left:2px}#onetrust-banner-sdk .banner-option:not(:first-child){padding:0;border:none}#onetrust-banner-sdk .banner-option-header{cursor:pointer;display:inline-block}#onetrust-banner-sdk .banner-option-header :first-child{color:dimgray;font-weight:bold;float:left}#onetrust-banner-sdk .banner-option-header .ot-arrow-container{display:inline-block;border-top:6px solid rgba(0,0,0,0);border-bottom:6px solid rgba(0,0,0,0);border-left:6px solid dimgray;margin-left:10px;vertical-align:middle}#onetrust-banner-sdk .banner-option-details{display:none;font-size:.83em;line-height:1.5;padding:10px 0px 5px 10px;margin-right:10px;height:0px}#onetrust-banner-sdk .banner-option-details *{font-size:inherit;line-height:inherit;color:dimgray}#onetrust-banner-sdk .ot-arrow-container,#onetrust-banner-sdk .banner-option-details{transition:all 300ms ease-in 0s;-webkit-transition:all 300ms ease-in 0s;-moz-transition:all 300ms ease-in 0s;-o-transition:all 300ms ease-in 0s}#onetrust-banner-sdk .ot-dpd-container{float:left}#onetrust-banner-sdk .ot-dpd-title{margin-bottom:10px}#onetrust-banner-sdk .ot-dpd-title,#onetrust-banner-sdk .ot-dpd-desc{font-size:.88em;line-height:1.4;color:dimgray}#onetrust-banner-sdk .ot-dpd-title *,#onetrust-banner-sdk .ot-dpd-desc *{font-size:inherit;line-height:inherit}#onetrust-banner-sdk.ot-iab-2 #onetrust-policy-text *{margin-bottom:0}#onetrust-banner-sdk.ot-iab-2 .onetrust-vendors-list-handler{display:block;margin-left:0;margin-top:5px;clear:both;margin-bottom:0;padding:0;border:0;height:auto;width:auto}#onetrust-banner-sdk.ot-iab-2 #onetrust-button-group button{display:block}#onetrust-banner-sdk.ot-close-btn-link{padding-top:25px}#onetrust-banner-sdk.ot-close-btn-link #onetrust-close-btn-container{top:15px;transform:none;right:15px}#onetrust-banner-sdk.ot-close-btn-link #onetrust-close-btn-container button{padding:0;white-space:pre-wrap;border:none;height:auto;line-height:1.5;text-decoration:underline;font-size:.69em}#onetrust-banner-sdk #onetrust-policy-text,#onetrust-banner-sdk .ot-dpd-desc,#onetrust-banner-sdk .ot-b-addl-desc{font-size:.813em;line-height:1.5}#onetrust-banner-sdk .ot-dpd-desc{margin-bottom:10px}#onetrust-banner-sdk .ot-dpd-desc&gt;.ot-b-addl-desc{margin-top:10px;margin-bottom:10px;font-size:1em}@media only screen and (max-width: 425px){#onetrust-banner-sdk #onetrust-close-btn-container{position:absolute;top:6px;right:2px}#onetrust-banner-sdk #onetrust-policy{margin-left:0;margin-top:3em}#onetrust-banner-sdk #onetrust-button-group{display:block}#onetrust-banner-sdk #onetrust-accept-btn-handler,#onetrust-banner-sdk #onetrust-reject-all-handler,#onetrust-banner-sdk #onetrust-pc-btn-handler{width:100%}#onetrust-banner-sdk .onetrust-close-btn-ui{top:auto;transform:none}#onetrust-banner-sdk #onetrust-policy-title{display:inline;float:none}#onetrust-banner-sdk #banner-options{margin:0;padding:0;width:100%}}@media only screen and (min-width: 426px)and (max-width: 896px){#onetrust-banner-sdk #onetrust-close-btn-container{position:absolute;top:0;right:0}#onetrust-banner-sdk #onetrust-policy{margin-left:1em;margin-right:1em}#onetrust-banner-sdk .onetrust-close-btn-ui{top:10px;right:10px}#onetrust-banner-sdk:not(.ot-iab-2) #onetrust-group-container{width:95%}#onetrust-banner-sdk.ot-iab-2 #onetrust-group-container{width:100%}#onetrust-banner-sdk.ot-bnr-w-logo #onetrust-button-group-parent{padding-left:50px}#onetrust-banner-sdk #onetrust-button-group-parent{width:100%;position:relative;margin-left:0}#onetrust-banner-sdk #onetrust-button-group button{display:inline-block}#onetrust-banner-sdk #onetrust-button-group{margin-right:0;text-align:center}#onetrust-banner-sdk .has-reject-all-button #onetrust-pc-btn-handler{float:left}#onetrust-banner-sdk .has-reject-all-button #onetrust-reject-all-handler,#onetrust-banner-sdk .has-reject-all-button #onetrust-accept-btn-handler{float:right}#onetrust-banner-sdk .has-reject-all-button #onetrust-button-group{width:calc(100% - 2em);margin-right:0}#onetrust-banner-sdk .has-reject-all-button #onetrust-pc-btn-handler.cookie-setting-link{padding-left:0px;text-align:left}#onetrust-banner-sdk.ot-buttons-fw .ot-sdk-three button{width:100%;text-align:center}#onetrust-banner-sdk.ot-buttons-fw #onetrust-button-group-parent button{float:none}#onetrust-banner-sdk.ot-buttons-fw #onetrust-pc-btn-handler.cookie-setting-link{text-align:center}}@media only screen and (min-width: 550px){#onetrust-banner-sdk .banner-option:not(:first-child){border-left:1px solid #d8d8d8;padding-left:25px}}@media only screen and (min-width: 425px)and (max-width: 550px){#onetrust-banner-sdk.ot-iab-2 #onetrust-button-group,#onetrust-banner-sdk.ot-iab-2 #onetrust-policy,#onetrust-banner-sdk.ot-iab-2 .banner-option{width:100%}#onetrust-banner-sdk.ot-iab-2 #onetrust-button-group #onetrust-accept-btn-handler,#onetrust-banner-sdk.ot-iab-2 #onetrust-button-group #onetrust-reject-all-handler,#onetrust-banner-sdk.ot-iab-2 #onetrust-button-group #onetrust-pc-btn-handler{width:100%}#onetrust-banner-sdk.ot-iab-2 #onetrust-button-group #onetrust-accept-btn-handler,#onetrust-banner-sdk.ot-iab-2 #onetrust-button-group #onetrust-reject-all-handler{float:left}}@media only screen and (min-width: 769px){#onetrust-banner-sdk #onetrust-button-group{margin-right:30%}#onetrust-banner-sdk #banner-options{margin-left:2em;margin-right:5em;margin-bottom:1.25em;width:calc(100% - 7em)}}@media only screen and (min-width: 897px)and (max-width: 1023px){#onetrust-banner-sdk.vertical-align-content #onetrust-button-group-parent{position:absolute;top:50%;left:75%;transform:translateY(-50%)}#onetrust-banner-sdk #onetrust-close-btn-container{top:50%;margin:auto;transform:translate(-50%, -50%);position:absolute;padding:0;right:0}#onetrust-banner-sdk #onetrust-close-btn-container button{position:relative;margin:0;right:-22px;top:2px}}@media only screen and (min-width: 1024px){#onetrust-banner-sdk #onetrust-close-btn-container{top:50%;margin:auto;transform:translate(-50%, -50%);position:absolute;right:0}#onetrust-banner-sdk #onetrust-close-btn-container button{right:-12px}#onetrust-banner-sdk #onetrust-policy{margin-left:2em}#onetrust-banner-sdk.vertical-align-content #onetrust-button-group-parent{position:absolute;top:50%;left:60%;transform:translateY(-50%)}#onetrust-banner-sdk .ot-optout-signal{width:50%}#onetrust-banner-sdk.ot-iab-2 #onetrust-policy-title{width:50%}#onetrust-banner-sdk.ot-iab-2 #onetrust-policy-text,#onetrust-banner-sdk.ot-iab-2 :not(.ot-dpd-desc)&gt;.ot-b-addl-desc{margin-bottom:1em;width:50%;border-right:1px solid #d8d8d8;padding-right:1rem}#onetrust-banner-sdk.ot-iab-2 #onetrust-policy-text{margin-bottom:0;padding-bottom:1em}#onetrust-banner-sdk.ot-iab-2 :not(.ot-dpd-desc)&gt;.ot-b-addl-desc{margin-bottom:0;padding-bottom:1em}#onetrust-banner-sdk.ot-iab-2 .ot-dpd-container{width:45%;padding-left:1rem;display:inline-block;float:none}#onetrust-banner-sdk.ot-iab-2 .ot-dpd-title{line-height:1.7}#onetrust-banner-sdk.ot-iab-2 #onetrust-button-group-parent{left:auto;right:4%;margin-left:0}#onetrust-banner-sdk.ot-iab-2 #onetrust-button-group button{display:block}#onetrust-banner-sdk:not(.ot-iab-2) #onetrust-button-group-parent{margin:auto;width:30%}#onetrust-banner-sdk:not(.ot-iab-2) #onetrust-group-container{width:60%}#onetrust-banner-sdk #onetrust-button-group{margin-right:auto}#onetrust-banner-sdk #onetrust-accept-btn-handler,#onetrust-banner-sdk #onetrust-reject-all-handler,#onetrust-banner-sdk #onetrust-pc-btn-handler{margin-top:1em}}@media only screen and (min-width: 890px){#onetrust-banner-sdk.ot-buttons-fw:not(.ot-iab-2) #onetrust-button-group-parent{padding-left:3%;padding-right:4%;margin-left:0}#onetrust-banner-sdk.ot-buttons-fw:not(.ot-iab-2) #onetrust-button-group{margin-right:0;margin-top:1.25em;width:100%}#onetrust-banner-sdk.ot-buttons-fw:not(.ot-iab-2) #onetrust-button-group button{width:100%;margin-bottom:5px;margin-top:5px}#onetrust-banner-sdk.ot-buttons-fw:not(.ot-iab-2) #onetrust-button-group button:last-of-type{margin-bottom:20px}}@media only screen and (min-width: 1280px){#onetrust-banner-sdk:not(.ot-iab-2) #onetrust-group-container{width:55%}#onetrust-banner-sdk:not(.ot-iab-2) #onetrust-button-group-parent{width:44%;padding-left:2%;padding-right:2%}#onetrust-banner-sdk:not(.ot-iab-2).vertical-align-content #onetrust-button-group-parent{position:absolute;left:55%}}\n        #onetrust-consent-sdk #onetrust-banner-sdk {background-color: #FFFFFF;}\n            #onetrust-consent-sdk #onetrust-policy-title,\n                    #onetrust-consent-sdk #onetrust-policy-text,\n                    #onetrust-consent-sdk .ot-b-addl-desc,\n                    #onetrust-consent-sdk .ot-dpd-desc,\n                    #onetrust-consent-sdk .ot-dpd-title,\n                    #onetrust-consent-sdk #onetrust-policy-text *:not(.onetrust-vendors-list-handler),\n                    #onetrust-consent-sdk .ot-dpd-desc *:not(.onetrust-vendors-list-handler),\n                    #onetrust-consent-sdk #onetrust-banner-sdk #banner-options *,\n                    #onetrust-banner-sdk .ot-cat-header,\n                    #onetrust-banner-sdk .ot-optout-signal\n                    {\n                        color: #35393D;\n                    }\n            #onetrust-consent-sdk #onetrust-banner-sdk .banner-option-details {\n                    background-color: #E9E9E9;}\n             #onetrust-consent-sdk #onetrust-banner-sdk a[href],\n                    #onetrust-consent-sdk #onetrust-banner-sdk a[href] font,\n                    #onetrust-consent-sdk #onetrust-banner-sdk .ot-link-btn\n                        {\n                            color: #06f;\n                        }#onetrust-consent-sdk #onetrust-accept-btn-handler,\n                         #onetrust-banner-sdk #onetrust-reject-all-handler {\n                            background-color: #06f;border-color: #06f;\n                color: #FFFFFF;\n            }\n            #onetrust-consent-sdk #onetrust-banner-sdk *:focus,\n            #onetrust-consent-sdk #onetrust-banner-sdk:focus {\n               outline-color: #000000;\n               outline-width: 1px;\n            }\n            #onetrust-consent-sdk #onetrust-pc-btn-handler,\n            #onetrust-consent-sdk #onetrust-pc-btn-handler.cookie-setting-link {\n                color: #06f; border-color: #06f;\n                background-color:\n                #FFFFFF;\n            }#onetrust-pc-sdk .ot-pc-footer-logo a{   \n    display: none !important;\n}#onetrust-pc-sdk.otPcCenter{overflow:hidden;position:fixed;margin:0 auto;top:5%;right:0;left:0;width:40%;max-width:575px;min-width:575px;border-radius:2.5px;z-index:2147483647;background-color:#fff;-webkit-box-shadow:0px 2px 10px -3px #999;-moz-box-shadow:0px 2px 10px -3px #999;box-shadow:0px 2px 10px -3px #999}#onetrust-pc-sdk.otPcCenter[dir=rtl]{right:0;left:0}#onetrust-pc-sdk.otRelFont{font-size:1rem}#onetrust-pc-sdk .ot-optout-signal{margin-top:.625rem}#onetrust-pc-sdk #ot-addtl-venlst .ot-arw-cntr,#onetrust-pc-sdk #ot-addtl-venlst .ot-plus-minus,#onetrust-pc-sdk .ot-hide-tgl{visibility:hidden}#onetrust-pc-sdk #ot-addtl-venlst .ot-arw-cntr *,#onetrust-pc-sdk #ot-addtl-venlst .ot-plus-minus *,#onetrust-pc-sdk .ot-hide-tgl *{visibility:hidden}#onetrust-pc-sdk #ot-gn-venlst .ot-ven-item .ot-acc-hdr{min-height:40px}#onetrust-pc-sdk .ot-pc-header{height:39px;padding:10px 0 10px 30px;border-bottom:1px solid #e9e9e9}#onetrust-pc-sdk #ot-pc-title,#onetrust-pc-sdk #ot-category-title,#onetrust-pc-sdk .ot-cat-header,#onetrust-pc-sdk #ot-lst-title,#onetrust-pc-sdk .ot-ven-hdr .ot-ven-name,#onetrust-pc-sdk .ot-always-active{font-weight:bold;color:dimgray}#onetrust-pc-sdk .ot-always-active-group .ot-cat-header{width:55%;font-weight:700}#onetrust-pc-sdk .ot-cat-item p{clear:both;float:left;margin-top:10px;margin-bottom:5px;line-height:1.5;font-size:.812em;color:dimgray}#onetrust-pc-sdk .ot-close-icon{height:44px;width:44px;background-size:10px}#onetrust-pc-sdk #ot-pc-title{float:left;font-size:1em;line-height:1.5;margin-bottom:10px;margin-top:10px;width:100%}#onetrust-pc-sdk #accept-recommended-btn-handler{margin-right:10px;margin-bottom:25px;outline-offset:-1px}#onetrust-pc-sdk #ot-pc-desc{clear:both;width:100%;font-size:.812em;line-height:1.5;margin-bottom:25px}#onetrust-pc-sdk #ot-pc-desc a{margin-left:5px}#onetrust-pc-sdk #ot-pc-desc *{font-size:inherit;line-height:inherit}#onetrust-pc-sdk #ot-pc-desc ul li{padding:10px 0px}#onetrust-pc-sdk a{color:#656565;cursor:pointer}#onetrust-pc-sdk a:hover{color:#3860be}#onetrust-pc-sdk label{margin-bottom:0}#onetrust-pc-sdk #vdr-lst-dsc{font-size:.812em;line-height:1.5;padding:10px 15px 5px 15px}#onetrust-pc-sdk button{max-width:394px;padding:12px 30px;line-height:1;word-break:break-word;word-wrap:break-word;white-space:normal;font-weight:bold;height:auto}#onetrust-pc-sdk .ot-link-btn{padding:0;margin-bottom:0;border:0;font-weight:normal;line-height:normal;width:auto;height:auto}#onetrust-pc-sdk #ot-pc-content{position:absolute;overflow-y:scroll;padding-left:0px;padding-right:30px;top:60px;bottom:110px;margin:1px 3px 0 30px;width:calc(100% - 63px)}#onetrust-pc-sdk .ot-vs-list .ot-always-active,#onetrust-pc-sdk .ot-cat-grp .ot-always-active{float:right;clear:none;color:#3860be;margin:0;font-size:.813em;line-height:1.3}#onetrust-pc-sdk .ot-pc-scrollbar::-webkit-scrollbar-track{margin-right:20px}#onetrust-pc-sdk .ot-pc-scrollbar::-webkit-scrollbar{width:11px}#onetrust-pc-sdk .ot-pc-scrollbar::-webkit-scrollbar-thumb{border-radius:10px;background:#d8d8d8}#onetrust-pc-sdk input[type=checkbox]:focus+.ot-acc-hdr{outline:#000 1px solid}#onetrust-pc-sdk .ot-pc-scrollbar{scrollbar-arrow-color:#d8d8d8;scrollbar-darkshadow-color:#d8d8d8;scrollbar-face-color:#d8d8d8;scrollbar-shadow-color:#d8d8d8}#onetrust-pc-sdk .save-preference-btn-handler{margin-right:20px}#onetrust-pc-sdk .ot-pc-refuse-all-handler{margin-right:10px}#onetrust-pc-sdk #ot-pc-desc .privacy-notice-link{margin-left:0;margin-right:8px}#onetrust-pc-sdk #ot-pc-desc .ot-imprint-handler{margin-left:0;margin-right:8px}#onetrust-pc-sdk .ot-subgrp-cntr{display:inline-block;clear:both;width:100%;padding-top:15px}#onetrust-pc-sdk .ot-switch+.ot-subgrp-cntr{padding-top:10px}#onetrust-pc-sdk ul.ot-subgrps{margin:0;font-size:initial}#onetrust-pc-sdk ul.ot-subgrps li p,#onetrust-pc-sdk ul.ot-subgrps li h5{font-size:.813em;line-height:1.4;color:dimgray}#onetrust-pc-sdk ul.ot-subgrps .ot-switch{min-height:auto}#onetrust-pc-sdk ul.ot-subgrps .ot-switch-nob{top:0}#onetrust-pc-sdk ul.ot-subgrps .ot-acc-hdr{display:inline-block;width:100%}#onetrust-pc-sdk ul.ot-subgrps .ot-acc-txt{margin:0}#onetrust-pc-sdk ul.ot-subgrps li{padding:0;border:none}#onetrust-pc-sdk ul.ot-subgrps li h5{position:relative;top:5px;font-weight:bold;margin-bottom:0;float:left}#onetrust-pc-sdk li.ot-subgrp{margin-left:20px;overflow:auto}#onetrust-pc-sdk li.ot-subgrp&gt;h5{width:calc(100% - 100px)}#onetrust-pc-sdk .ot-cat-item p&gt;ul,#onetrust-pc-sdk li.ot-subgrp p&gt;ul{margin:0px;list-style:disc;margin-left:15px;font-size:inherit}#onetrust-pc-sdk .ot-cat-item p&gt;ul li,#onetrust-pc-sdk li.ot-subgrp p&gt;ul li{font-size:inherit;padding-top:10px;padding-left:0px;padding-right:0px;border:none}#onetrust-pc-sdk .ot-cat-item p&gt;ul li:last-child,#onetrust-pc-sdk li.ot-subgrp p&gt;ul li:last-child{padding-bottom:10px}#onetrust-pc-sdk .ot-pc-logo{height:40px;width:120px}#onetrust-pc-sdk .ot-pc-footer{position:absolute;bottom:0px;width:100%;max-height:160px;border-top:1px solid #d8d8d8}#onetrust-pc-sdk.ot-ftr-stacked .ot-pc-refuse-all-handler{margin-bottom:0px}#onetrust-pc-sdk.ot-ftr-stacked #ot-pc-content{bottom:160px}#onetrust-pc-sdk.ot-ftr-stacked .ot-pc-footer button{width:100%;max-width:none}#onetrust-pc-sdk.ot-ftr-stacked .ot-btn-container{margin:0 30px;width:calc(100% - 60px);padding-right:0}#onetrust-pc-sdk .ot-pc-footer-logo{height:30px;width:100%;text-align:right;background:#f4f4f4}#onetrust-pc-sdk .ot-pc-footer-logo a{display:inline-block;margin-top:5px;margin-right:10px}#onetrust-pc-sdk[dir=rtl] .ot-pc-footer-logo{direction:rtl}#onetrust-pc-sdk[dir=rtl] .ot-pc-footer-logo a{margin-right:25px}#onetrust-pc-sdk .ot-tgl{float:right;position:relative;z-index:1}#onetrust-pc-sdk .ot-tgl input:checked+.ot-switch .ot-switch-nob{background-color:#468254;border:1px solid #fff}#onetrust-pc-sdk .ot-tgl input:checked+.ot-switch .ot-switch-nob:before{-webkit-transform:translateX(20px);-ms-transform:translateX(20px);transform:translateX(20px);background-color:#fff;border-color:#fff}#onetrust-pc-sdk .ot-tgl input:focus+.ot-switch{outline:#000 solid 1px}#onetrust-pc-sdk .ot-switch{position:relative;display:inline-block;width:45px;height:25px}#onetrust-pc-sdk .ot-switch-nob{position:absolute;cursor:pointer;top:0;left:0;right:0;bottom:0;background-color:#767676;border:1px solid #ddd;transition:all .2s ease-in 0s;-moz-transition:all .2s ease-in 0s;-o-transition:all .2s ease-in 0s;-webkit-transition:all .2s ease-in 0s;border-radius:20px}#onetrust-pc-sdk .ot-switch-nob:before{position:absolute;content:\&quot;\&quot;;height:18px;width:18px;bottom:3px;left:3px;background-color:#fff;-webkit-transition:.4s;transition:.4s;border-radius:20px}#onetrust-pc-sdk .ot-chkbox input:checked~label::before{background-color:#3860be}#onetrust-pc-sdk .ot-chkbox input+label::after{content:none;color:#fff}#onetrust-pc-sdk .ot-chkbox input:checked+label::after{content:\&quot;\&quot;}#onetrust-pc-sdk .ot-chkbox input:focus+label::before{outline-style:solid;outline-width:2px;outline-style:auto}#onetrust-pc-sdk .ot-chkbox label{position:relative;display:inline-block;padding-left:30px;cursor:pointer;font-weight:500}#onetrust-pc-sdk .ot-chkbox label::before,#onetrust-pc-sdk .ot-chkbox label::after{position:absolute;content:\&quot;\&quot;;display:inline-block;border-radius:3px}#onetrust-pc-sdk .ot-chkbox label::before{height:18px;width:18px;border:1px solid #3860be;left:0px;top:auto}#onetrust-pc-sdk .ot-chkbox label::after{height:5px;width:9px;border-left:3px solid;border-bottom:3px solid;transform:rotate(-45deg);-o-transform:rotate(-45deg);-ms-transform:rotate(-45deg);-webkit-transform:rotate(-45deg);left:4px;top:5px}#onetrust-pc-sdk .ot-label-txt{display:none}#onetrust-pc-sdk .ot-chkbox input,#onetrust-pc-sdk .ot-tgl input{position:absolute;opacity:0;width:0;height:0}#onetrust-pc-sdk .ot-arw-cntr{float:right;position:relative;pointer-events:none}#onetrust-pc-sdk .ot-arw-cntr .ot-arw{width:16px;height:16px;margin-left:5px;color:dimgray;display:inline-block;vertical-align:middle;-webkit-transition:all 150ms ease-in 0s;-moz-transition:all 150ms ease-in 0s;-o-transition:all 150ms ease-in 0s;transition:all 150ms ease-in 0s}#onetrust-pc-sdk input:checked~.ot-acc-hdr .ot-arw,#onetrust-pc-sdk button[aria-expanded=true]~.ot-acc-hdr .ot-arw-cntr svg{transform:rotate(90deg);-o-transform:rotate(90deg);-ms-transform:rotate(90deg);-webkit-transform:rotate(90deg)}#onetrust-pc-sdk input[type=checkbox]:focus+.ot-acc-hdr{outline:#000 1px solid}#onetrust-pc-sdk .ot-tgl-cntr,#onetrust-pc-sdk .ot-arw-cntr{display:inline-block}#onetrust-pc-sdk .ot-tgl-cntr{width:45px;float:right;margin-top:2px}#onetrust-pc-sdk #ot-lst-cnt .ot-tgl-cntr{margin-top:10px}#onetrust-pc-sdk .ot-always-active-subgroup{width:auto;padding-left:0px !important;top:3px;position:relative}#onetrust-pc-sdk .ot-label-status{padding-left:5px;font-size:.75em;display:none}#onetrust-pc-sdk .ot-arw-cntr{margin-top:-1px}#onetrust-pc-sdk .ot-arw-cntr svg{-webkit-transition:all 300ms ease-in 0s;-moz-transition:all 300ms ease-in 0s;-o-transition:all 300ms ease-in 0s;transition:all 300ms ease-in 0s;height:10px;width:10px}#onetrust-pc-sdk input:checked~.ot-acc-hdr .ot-arw{transform:rotate(90deg);-o-transform:rotate(90deg);-ms-transform:rotate(90deg);-webkit-transform:rotate(90deg)}#onetrust-pc-sdk .ot-arw{width:10px;margin-left:15px;transition:all 300ms ease-in 0s;-webkit-transition:all 300ms ease-in 0s;-moz-transition:all 300ms ease-in 0s;-o-transition:all 300ms ease-in 0s}#onetrust-pc-sdk .ot-vlst-cntr{margin-bottom:0}#onetrust-pc-sdk .ot-hlst-cntr{margin-top:5px;display:inline-block;width:100%}#onetrust-pc-sdk .category-vendors-list-handler,#onetrust-pc-sdk .category-vendors-list-handler+a,#onetrust-pc-sdk .category-host-list-handler{clear:both;color:#3860be;margin-left:0;font-size:.813em;text-decoration:none;float:left;overflow:hidden}#onetrust-pc-sdk .category-vendors-list-handler:hover,#onetrust-pc-sdk .category-vendors-list-handler+a:hover,#onetrust-pc-sdk .category-host-list-handler:hover{text-decoration-line:underline}#onetrust-pc-sdk .category-vendors-list-handler+a{clear:none}#onetrust-pc-sdk .ot-vlst-cntr .ot-ext-lnk,#onetrust-pc-sdk .ot-ven-hdr .ot-ext-lnk{display:inline-block;height:13px;width:13px;background-repeat:no-repeat;margin-left:1px;margin-top:6px;cursor:pointer}#onetrust-pc-sdk .ot-ven-hdr .ot-ext-lnk{margin-bottom:-1px}#onetrust-pc-sdk .back-btn-handler{font-size:1em;text-decoration:none}#onetrust-pc-sdk .back-btn-handler:hover{opacity:.6}#onetrust-pc-sdk #ot-lst-title h3{display:inline-block;word-break:break-word;word-wrap:break-word;margin-bottom:0;color:#656565;font-size:1em;font-weight:bold;margin-left:15px}#onetrust-pc-sdk #ot-lst-title{margin:10px 0 10px 0px;font-size:1em;text-align:left}#onetrust-pc-sdk #ot-pc-hdr{margin:0 0 0 30px;height:auto;width:auto}#onetrust-pc-sdk #ot-pc-hdr input::placeholder{color:#d4d4d4;font-style:italic}#onetrust-pc-sdk #vendor-search-handler{height:31px;width:100%;border-radius:50px;font-size:.8em;padding-right:35px;padding-left:15px;float:left;margin-left:15px}#onetrust-pc-sdk .ot-ven-name{display:block;width:auto;padding-right:5px}#onetrust-pc-sdk #ot-lst-cnt{overflow-y:auto;margin-left:20px;margin-right:7px;width:calc(100% - 27px);max-height:calc(100% - 80px);height:100%;transform:translate3d(0, 0, 0)}#onetrust-pc-sdk #ot-pc-lst{width:100%;bottom:100px;position:absolute;top:60px}#onetrust-pc-sdk #ot-pc-lst:not(.ot-enbl-chr) .ot-tgl-cntr .ot-arw-cntr,#onetrust-pc-sdk #ot-pc-lst:not(.ot-enbl-chr) .ot-tgl-cntr .ot-arw-cntr *{visibility:hidden}#onetrust-pc-sdk #ot-pc-lst .ot-tgl-cntr{right:12px;position:absolute}#onetrust-pc-sdk #ot-pc-lst .ot-arw-cntr{float:right;position:relative}#onetrust-pc-sdk #ot-pc-lst .ot-arw{margin-left:10px}#onetrust-pc-sdk #ot-pc-lst .ot-acc-hdr{overflow:hidden;cursor:pointer}#onetrust-pc-sdk .ot-vlst-cntr{overflow:hidden}#onetrust-pc-sdk #ot-sel-blk{overflow:hidden;width:100%;position:sticky;position:-webkit-sticky;top:0;z-index:3}#onetrust-pc-sdk #ot-back-arw{height:12px;width:12px}#onetrust-pc-sdk .ot-lst-subhdr{width:100%;display:inline-block}#onetrust-pc-sdk .ot-search-cntr{float:left;width:78%;position:relative}#onetrust-pc-sdk .ot-search-cntr&gt;svg{width:30px;height:30px;position:absolute;float:left;right:-15px}#onetrust-pc-sdk .ot-fltr-cntr{float:right;right:50px;position:relative}#onetrust-pc-sdk #filter-btn-handler{background-color:#3860be;border-radius:17px;display:inline-block;position:relative;width:32px;height:32px;-moz-transition:.1s ease;-o-transition:.1s ease;-webkit-transition:1s ease;transition:.1s ease;padding:0;margin:0}#onetrust-pc-sdk #filter-btn-handler:hover{background-color:#3860be}#onetrust-pc-sdk #filter-btn-handler svg{width:12px;height:12px;margin:3px 10px 0 10px;display:block;position:static;right:auto;top:auto}#onetrust-pc-sdk .ot-ven-link,#onetrust-pc-sdk .ot-ven-legclaim-link{color:#3860be;text-decoration:none;font-weight:100;display:inline-block;padding-top:10px;transform:translate(0, 1%);-o-transform:translate(0, 1%);-ms-transform:translate(0, 1%);-webkit-transform:translate(0, 1%);position:relative;z-index:2}#onetrust-pc-sdk .ot-ven-link *,#onetrust-pc-sdk .ot-ven-legclaim-link *{font-size:inherit}#onetrust-pc-sdk .ot-ven-link:hover,#onetrust-pc-sdk .ot-ven-legclaim-link:hover{text-decoration:underline}#onetrust-pc-sdk .ot-ven-hdr{width:calc(100% - 160px);height:auto;float:left;word-break:break-word;word-wrap:break-word;vertical-align:middle;padding-bottom:3px}#onetrust-pc-sdk .ot-ven-link,#onetrust-pc-sdk .ot-ven-legclaim-link{letter-spacing:.03em;font-size:.75em;font-weight:400}#onetrust-pc-sdk .ot-ven-dets{border-radius:2px;background-color:#f8f8f8}#onetrust-pc-sdk .ot-ven-dets li:first-child p:first-child{border-top:none}#onetrust-pc-sdk .ot-ven-dets .ot-ven-disc:not(:first-child){border-top:1px solid #ddd !important}#onetrust-pc-sdk .ot-ven-dets .ot-ven-disc:nth-child(n+3) p{display:inline-block}#onetrust-pc-sdk .ot-ven-dets .ot-ven-disc:nth-child(n+3) p:nth-of-type(odd){width:30%}#onetrust-pc-sdk .ot-ven-dets .ot-ven-disc:nth-child(n+3) p:nth-of-type(even){width:50%;word-break:break-word;word-wrap:break-word}#onetrust-pc-sdk .ot-ven-dets .ot-ven-disc p,#onetrust-pc-sdk .ot-ven-dets .ot-ven-disc h4{padding-top:5px;padding-bottom:5px;display:block}#onetrust-pc-sdk .ot-ven-dets .ot-ven-disc h4{display:inline-block}#onetrust-pc-sdk .ot-ven-dets .ot-ven-disc p:nth-last-child(-n+1){padding-bottom:10px}#onetrust-pc-sdk .ot-ven-dets .ot-ven-disc p:nth-child(-n+2):not(.disc-pur){padding-top:10px}#onetrust-pc-sdk .ot-ven-dets .ot-ven-disc .disc-pur-cont{display:inline}#onetrust-pc-sdk .ot-ven-dets .ot-ven-disc .disc-pur{position:relative;width:50% !important;word-break:break-word;word-wrap:break-word;left:calc(30% + 17px)}#onetrust-pc-sdk .ot-ven-dets .ot-ven-disc .disc-pur:nth-child(-n+1){position:static}#onetrust-pc-sdk .ot-ven-dets p,#onetrust-pc-sdk .ot-ven-dets h4,#onetrust-pc-sdk .ot-ven-dets span{font-size:.69em;text-align:left;vertical-align:middle;word-break:break-word;word-wrap:break-word;margin:0;padding-bottom:10px;padding-left:15px;color:#2e3644}#onetrust-pc-sdk .ot-ven-dets h4{padding-top:5px}#onetrust-pc-sdk .ot-ven-dets span{color:dimgray;padding:0;vertical-align:baseline}#onetrust-pc-sdk .ot-ven-dets .ot-ven-pur h4{border-top:1px solid #e9e9e9;border-bottom:1px solid #e9e9e9;padding-bottom:5px;margin-bottom:5px;font-weight:bold}#onetrust-pc-sdk #ot-host-lst .ot-sel-all{float:right;position:relative;margin-right:42px;top:10px}#onetrust-pc-sdk #ot-host-lst .ot-sel-all input[type=checkbox]{width:auto;height:auto}#onetrust-pc-sdk #ot-host-lst .ot-sel-all label{height:20px;width:20px;padding-left:0px}#onetrust-pc-sdk #ot-host-lst .ot-acc-txt{overflow:hidden;width:95%}#onetrust-pc-sdk .ot-host-hdr{position:relative;z-index:1;pointer-events:none;width:calc(100% - 125px);float:left}#onetrust-pc-sdk .ot-host-name,#onetrust-pc-sdk .ot-host-desc{display:inline-block;width:90%}#onetrust-pc-sdk .ot-host-name{pointer-events:none}#onetrust-pc-sdk .ot-host-hdr&gt;a{text-decoration:underline;font-size:.82em;position:relative;z-index:2;float:left;margin-bottom:5px;pointer-events:initial}#onetrust-pc-sdk .ot-host-name+a{margin-top:5px}#onetrust-pc-sdk .ot-host-name,#onetrust-pc-sdk .ot-host-name a,#onetrust-pc-sdk .ot-host-desc,#onetrust-pc-sdk .ot-host-info{color:dimgray;word-break:break-word;word-wrap:break-word}#onetrust-pc-sdk .ot-host-name,#onetrust-pc-sdk .ot-host-name a{font-weight:bold;font-size:.82em;line-height:1.3}#onetrust-pc-sdk .ot-host-name a{font-size:1em}#onetrust-pc-sdk .ot-host-expand{margin-top:3px;margin-bottom:3px;clear:both;display:block;color:#3860be;font-size:.72em;font-weight:normal}#onetrust-pc-sdk .ot-host-expand *{font-size:inherit}#onetrust-pc-sdk .ot-host-desc,#onetrust-pc-sdk .ot-host-info{font-size:.688em;line-height:1.4;font-weight:normal}#onetrust-pc-sdk .ot-host-desc{margin-top:10px}#onetrust-pc-sdk .ot-host-opt{margin:0;font-size:inherit;display:inline-block;width:100%}#onetrust-pc-sdk .ot-host-opt li&gt;div div{font-size:.8em;padding:5px 0}#onetrust-pc-sdk .ot-host-opt li&gt;div div:nth-child(1){width:30%;float:left}#onetrust-pc-sdk .ot-host-opt li&gt;div div:nth-child(2){width:70%;float:left;word-break:break-word;word-wrap:break-word}#onetrust-pc-sdk .ot-host-info{border:none;display:inline-block;width:calc(100% - 10px);padding:10px;margin-bottom:10px;background-color:#f8f8f8}#onetrust-pc-sdk .ot-host-info&gt;div{overflow:auto}#onetrust-pc-sdk #no-results{text-align:center;margin-top:30px}#onetrust-pc-sdk #no-results p{font-size:1em;color:#2e3644;word-break:break-word;word-wrap:break-word}#onetrust-pc-sdk #no-results p span{font-weight:bold}#onetrust-pc-sdk #ot-fltr-modal{width:100%;height:auto;display:none;-moz-transition:.2s ease;-o-transition:.2s ease;-webkit-transition:2s ease;transition:.2s ease;overflow:hidden;opacity:1;right:0}#onetrust-pc-sdk #ot-fltr-modal .ot-label-txt{display:inline-block;font-size:.85em;color:dimgray}#onetrust-pc-sdk #ot-fltr-cnt{z-index:2147483646;background-color:#fff;position:absolute;height:90%;max-height:300px;width:325px;left:210px;margin-top:10px;margin-bottom:20px;padding-right:10px;border-radius:3px;-webkit-box-shadow:0px 0px 12px 2px #c7c5c7;-moz-box-shadow:0px 0px 12px 2px #c7c5c7;box-shadow:0px 0px 12px 2px #c7c5c7}#onetrust-pc-sdk .ot-fltr-scrlcnt{overflow-y:auto;overflow-x:hidden;clear:both;max-height:calc(100% - 60px)}#onetrust-pc-sdk #ot-anchor{border:12px solid rgba(0,0,0,0);display:none;position:absolute;z-index:2147483647;right:55px;top:75px;transform:rotate(45deg);-o-transform:rotate(45deg);-ms-transform:rotate(45deg);-webkit-transform:rotate(45deg);background-color:#fff;-webkit-box-shadow:-3px -3px 5px -2px #c7c5c7;-moz-box-shadow:-3px -3px 5px -2px #c7c5c7;box-shadow:-3px -3px 5px -2px #c7c5c7}#onetrust-pc-sdk .ot-fltr-btns{margin-left:15px}#onetrust-pc-sdk #filter-apply-handler{margin-right:15px}#onetrust-pc-sdk .ot-fltr-opt{margin-bottom:25px;margin-left:15px;width:75%;position:relative}#onetrust-pc-sdk .ot-fltr-opt p{display:inline-block;margin:0;font-size:.9em;color:#2e3644}#onetrust-pc-sdk .ot-chkbox label span{font-size:.85em;color:dimgray}#onetrust-pc-sdk .ot-chkbox input[type=checkbox]+label::after{content:none;color:#fff}#onetrust-pc-sdk .ot-chkbox input[type=checkbox]:checked+label::after{content:\&quot;\&quot;}#onetrust-pc-sdk .ot-chkbox input[type=checkbox]:focus+label::before{outline-style:solid;outline-width:2px;outline-style:auto}#onetrust-pc-sdk #ot-selall-vencntr,#onetrust-pc-sdk #ot-selall-adtlvencntr,#onetrust-pc-sdk #ot-selall-hostcntr,#onetrust-pc-sdk #ot-selall-licntr,#onetrust-pc-sdk #ot-selall-gnvencntr{right:15px;position:relative;width:20px;height:20px;float:right}#onetrust-pc-sdk #ot-selall-vencntr label,#onetrust-pc-sdk #ot-selall-adtlvencntr label,#onetrust-pc-sdk #ot-selall-hostcntr label,#onetrust-pc-sdk #ot-selall-licntr label,#onetrust-pc-sdk #ot-selall-gnvencntr label{float:left;padding-left:0}#onetrust-pc-sdk #ot-ven-lst:first-child{border-top:1px solid #e2e2e2}#onetrust-pc-sdk ul{list-style:none;padding:0}#onetrust-pc-sdk ul li{position:relative;margin:0;padding:15px 15px 15px 10px;border-bottom:1px solid #e2e2e2}#onetrust-pc-sdk ul li h3{font-size:.75em;color:#656565;margin:0;display:inline-block;width:70%;height:auto;word-break:break-word;word-wrap:break-word}#onetrust-pc-sdk ul li p{margin:0;font-size:.7em}#onetrust-pc-sdk ul li input[type=checkbox]{position:absolute;cursor:pointer;width:100%;height:100%;opacity:0;margin:0;top:0;left:0}#onetrust-pc-sdk .ot-cat-item&gt;button:focus,#onetrust-pc-sdk .ot-acc-cntr&gt;button:focus,#onetrust-pc-sdk li&gt;button:focus{outline:#000 solid 2px}#onetrust-pc-sdk .ot-cat-item&gt;button,#onetrust-pc-sdk .ot-acc-cntr&gt;button,#onetrust-pc-sdk li&gt;button{position:absolute;cursor:pointer;width:100%;height:100%;margin:0;top:0;left:0;z-index:1;max-width:none;border:none}#onetrust-pc-sdk .ot-cat-item&gt;button[aria-expanded=false]~.ot-acc-txt,#onetrust-pc-sdk .ot-acc-cntr&gt;button[aria-expanded=false]~.ot-acc-txt,#onetrust-pc-sdk li&gt;button[aria-expanded=false]~.ot-acc-txt{margin-top:0;max-height:0;opacity:0;overflow:hidden;width:100%;transition:.25s ease-out;display:none}#onetrust-pc-sdk .ot-cat-item&gt;button[aria-expanded=true]~.ot-acc-txt,#onetrust-pc-sdk .ot-acc-cntr&gt;button[aria-expanded=true]~.ot-acc-txt,#onetrust-pc-sdk li&gt;button[aria-expanded=true]~.ot-acc-txt{transition:.1s ease-in;margin-top:10px;width:100%;overflow:auto;display:block}#onetrust-pc-sdk .ot-cat-item&gt;button[aria-expanded=true]~.ot-acc-grpcntr,#onetrust-pc-sdk .ot-acc-cntr&gt;button[aria-expanded=true]~.ot-acc-grpcntr,#onetrust-pc-sdk li&gt;button[aria-expanded=true]~.ot-acc-grpcntr{width:auto;margin-top:0px;padding-bottom:10px}#onetrust-pc-sdk .ot-host-item&gt;button:focus,#onetrust-pc-sdk .ot-ven-item&gt;button:focus{outline:0;border:2px solid #000}#onetrust-pc-sdk .ot-hide-acc&gt;button{pointer-events:none}#onetrust-pc-sdk .ot-hide-acc .ot-plus-minus&gt;*,#onetrust-pc-sdk .ot-hide-acc .ot-arw-cntr&gt;*{visibility:hidden}#onetrust-pc-sdk .ot-hide-acc .ot-acc-hdr{min-height:30px}#onetrust-pc-sdk.ot-addtl-vendors #ot-lst-cnt:not(.ot-host-cnt){padding-right:10px;width:calc(100% - 37px);margin-top:10px;max-height:calc(100% - 90px)}#onetrust-pc-sdk.ot-addtl-vendors #ot-lst-cnt:not(.ot-host-cnt) #ot-sel-blk{background-color:#f9f9fc;border:1px solid #e2e2e2;width:calc(100% - 2px);padding-bottom:5px;padding-top:5px}#onetrust-pc-sdk.ot-addtl-vendors #ot-lst-cnt:not(.ot-host-cnt) #ot-sel-blk.ot-vnd-list-cnt{border:unset;background-color:unset}#onetrust-pc-sdk.ot-addtl-vendors #ot-lst-cnt:not(.ot-host-cnt) #ot-sel-blk.ot-vnd-list-cnt .ot-sel-all-hdr{display:none}#onetrust-pc-sdk.ot-addtl-vendors #ot-lst-cnt:not(.ot-host-cnt) #ot-sel-blk.ot-vnd-list-cnt .ot-sel-all{padding-right:.5rem}#onetrust-pc-sdk.ot-addtl-vendors #ot-lst-cnt:not(.ot-host-cnt) #ot-sel-blk.ot-vnd-list-cnt .ot-sel-all .ot-chkbox{right:0}#onetrust-pc-sdk.ot-addtl-vendors #ot-lst-cnt:not(.ot-host-cnt) .ot-sel-all{padding-right:34px}#onetrust-pc-sdk.ot-addtl-vendors #ot-lst-cnt:not(.ot-host-cnt) .ot-sel-all-chkbox{width:auto}#onetrust-pc-sdk.ot-addtl-vendors #ot-lst-cnt:not(.ot-host-cnt) ul li{border:1px solid #e2e2e2;margin-bottom:10px}#onetrust-pc-sdk.ot-addtl-vendors #ot-lst-cnt:not(.ot-host-cnt) .ot-acc-cntr&gt;.ot-acc-hdr{padding:10px 0 10px 15px}#onetrust-pc-sdk.ot-addtl-vendors .ot-sel-all-chkbox{float:right}#onetrust-pc-sdk.ot-addtl-vendors .ot-plus-minus~.ot-sel-all-chkbox{right:34px}#onetrust-pc-sdk.ot-addtl-vendors #ot-ven-lst:first-child{border-top:none}#onetrust-pc-sdk .ot-acc-cntr{position:relative;border-left:1px solid #e2e2e2;border-right:1px solid #e2e2e2;border-bottom:1px solid #e2e2e2}#onetrust-pc-sdk .ot-acc-cntr input{z-index:1}#onetrust-pc-sdk .ot-acc-cntr&gt;.ot-acc-hdr{background-color:#f9f9fc;padding:5px 0 5px 15px;width:auto}#onetrust-pc-sdk .ot-acc-cntr&gt;.ot-acc-hdr .ot-plus-minus{vertical-align:middle;top:auto}#onetrust-pc-sdk .ot-acc-cntr&gt;.ot-acc-hdr .ot-arw-cntr{right:10px}#onetrust-pc-sdk .ot-acc-cntr&gt;.ot-acc-hdr input{z-index:2}#onetrust-pc-sdk .ot-acc-cntr.ot-add-tech .ot-acc-hdr{padding:10px 0 10px 15px}#onetrust-pc-sdk .ot-acc-cntr&gt;input[type=checkbox]:checked~.ot-acc-hdr{border-bottom:1px solid #e2e2e2}#onetrust-pc-sdk .ot-acc-cntr&gt;.ot-acc-txt{padding-left:10px;padding-right:10px}#onetrust-pc-sdk .ot-acc-cntr button[aria-expanded=true]~.ot-acc-txt{width:auto}#onetrust-pc-sdk .ot-acc-cntr .ot-addtl-venbox{display:none}#onetrust-pc-sdk .ot-vlst-cntr{margin-bottom:0;width:100%}#onetrust-pc-sdk .ot-vensec-title{font-size:.813em;vertical-align:middle;display:inline-block}#onetrust-pc-sdk .category-vendors-list-handler,#onetrust-pc-sdk .category-vendors-list-handler+a{margin-left:0;margin-top:10px}#onetrust-pc-sdk #ot-selall-vencntr.line-through label::after,#onetrust-pc-sdk #ot-selall-adtlvencntr.line-through label::after,#onetrust-pc-sdk #ot-selall-licntr.line-through label::after,#onetrust-pc-sdk #ot-selall-hostcntr.line-through label::after,#onetrust-pc-sdk #ot-selall-gnvencntr.line-through label::after{height:auto;border-left:0;transform:none;-o-transform:none;-ms-transform:none;-webkit-transform:none;left:5px;top:9px}#onetrust-pc-sdk #ot-category-title{float:left;padding-bottom:10px;font-size:1em;width:100%}#onetrust-pc-sdk .ot-cat-grp{margin-top:10px}#onetrust-pc-sdk .ot-cat-item{line-height:1.1;margin-top:10px;display:inline-block;width:100%}#onetrust-pc-sdk .ot-btn-container{text-align:right}#onetrust-pc-sdk .ot-btn-container button{display:inline-block;font-size:.75em;letter-spacing:.08em;margin-top:19px}#onetrust-pc-sdk #close-pc-btn-handler.ot-close-icon{position:absolute;top:10px;right:0;z-index:1;padding:0;background-color:rgba(0,0,0,0);border:none}#onetrust-pc-sdk #close-pc-btn-handler.ot-close-icon svg{display:block;height:10px;width:10px}#onetrust-pc-sdk #clear-filters-handler{margin-top:20px;margin-bottom:10px;float:right;max-width:200px;text-decoration:none;color:#3860be;font-size:.9em;font-weight:bold;background-color:rgba(0,0,0,0);border-color:rgba(0,0,0,0);padding:1px}#onetrust-pc-sdk #clear-filters-handler:hover{color:#2285f7}#onetrust-pc-sdk #clear-filters-handler:focus{outline:#000 solid 1px}#onetrust-pc-sdk .ot-enbl-chr h4~.ot-tgl,#onetrust-pc-sdk .ot-enbl-chr h4~.ot-always-active{right:45px}#onetrust-pc-sdk .ot-enbl-chr h4~.ot-tgl+.ot-tgl{right:120px}#onetrust-pc-sdk .ot-enbl-chr .ot-pli-hdr.ot-leg-border-color span:first-child{width:90px}#onetrust-pc-sdk .ot-enbl-chr li.ot-subgrp&gt;h5+.ot-tgl-cntr{padding-right:25px}#onetrust-pc-sdk .ot-plus-minus{width:20px;height:20px;font-size:1.5em;position:relative;display:inline-block;margin-right:5px;top:3px}#onetrust-pc-sdk .ot-plus-minus span{position:absolute;background:#27455c;border-radius:1px}#onetrust-pc-sdk .ot-plus-minus span:first-of-type{top:25%;bottom:25%;width:10%;left:45%}#onetrust-pc-sdk .ot-plus-minus span:last-of-type{left:25%;right:25%;height:10%;top:45%}#onetrust-pc-sdk button[aria-expanded=true]~.ot-acc-hdr .ot-arw,#onetrust-pc-sdk button[aria-expanded=true]~.ot-acc-hdr .ot-plus-minus span:first-of-type,#onetrust-pc-sdk button[aria-expanded=true]~.ot-acc-hdr .ot-plus-minus span:last-of-type{transform:rotate(90deg)}#onetrust-pc-sdk button[aria-expanded=true]~.ot-acc-hdr .ot-plus-minus span:last-of-type{left:50%;right:50%}#onetrust-pc-sdk #ot-selall-vencntr label,#onetrust-pc-sdk #ot-selall-adtlvencntr label,#onetrust-pc-sdk #ot-selall-hostcntr label,#onetrust-pc-sdk #ot-selall-licntr label{position:relative;display:inline-block;width:20px;height:20px}#onetrust-pc-sdk .ot-host-item .ot-plus-minus,#onetrust-pc-sdk .ot-ven-item .ot-plus-minus{float:left;margin-right:8px;top:10px}#onetrust-pc-sdk .ot-ven-item ul{list-style:none inside;font-size:100%;margin:0}#onetrust-pc-sdk .ot-ven-item ul li{margin:0 !important;padding:0;border:none !important}#onetrust-pc-sdk .ot-pli-hdr{color:#77808e;overflow:hidden;padding-top:7.5px;padding-bottom:7.5px;width:calc(100% - 2px);border-top-left-radius:3px;border-top-right-radius:3px}#onetrust-pc-sdk .ot-pli-hdr span:first-child{top:50%;transform:translateY(50%);max-width:90px}#onetrust-pc-sdk .ot-pli-hdr span:last-child{padding-right:10px;max-width:95px;text-align:center}#onetrust-pc-sdk .ot-li-title{float:right;font-size:.813em}#onetrust-pc-sdk .ot-pli-hdr.ot-leg-border-color{background-color:#f4f4f4;border:1px solid #d8d8d8}#onetrust-pc-sdk .ot-pli-hdr.ot-leg-border-color span:first-child{text-align:left;width:70px}#onetrust-pc-sdk li.ot-subgrp&gt;h5,#onetrust-pc-sdk .ot-cat-header{width:calc(100% - 130px)}#onetrust-pc-sdk li.ot-subgrp&gt;h5+.ot-tgl-cntr{padding-left:13px}#onetrust-pc-sdk .ot-acc-grpcntr .ot-acc-grpdesc{margin-bottom:5px}#onetrust-pc-sdk .ot-acc-grpcntr .ot-subgrp-cntr{border-top:1px solid #d8d8d8}#onetrust-pc-sdk .ot-acc-grpcntr .ot-vlst-cntr+.ot-subgrp-cntr{border-top:none}#onetrust-pc-sdk .ot-acc-hdr .ot-arw-cntr+.ot-tgl-cntr,#onetrust-pc-sdk .ot-acc-txt h4+.ot-tgl-cntr{padding-left:13px}#onetrust-pc-sdk .ot-pli-hdr~.ot-cat-item .ot-subgrp&gt;h5,#onetrust-pc-sdk .ot-pli-hdr~.ot-cat-item .ot-cat-header{width:calc(100% - 145px)}#onetrust-pc-sdk .ot-pli-hdr~.ot-cat-item h5+.ot-tgl-cntr,#onetrust-pc-sdk .ot-pli-hdr~.ot-cat-item .ot-cat-header+.ot-tgl{padding-left:28px}#onetrust-pc-sdk .ot-sel-all-hdr,#onetrust-pc-sdk .ot-sel-all-chkbox{display:inline-block;width:100%;position:relative}#onetrust-pc-sdk .ot-sel-all-chkbox{z-index:1}#onetrust-pc-sdk .ot-sel-all{margin:0;position:relative;padding-right:23px;float:right}#onetrust-pc-sdk .ot-consent-hdr,#onetrust-pc-sdk .ot-li-hdr{float:right;font-size:.812em;line-height:normal;text-align:center;word-break:break-word;word-wrap:break-word}#onetrust-pc-sdk .ot-li-hdr{max-width:100px;padding-right:10px}#onetrust-pc-sdk .ot-consent-hdr{max-width:55px}#onetrust-pc-sdk #ot-selall-licntr{display:block;width:21px;height:auto;float:right;position:relative;right:80px}#onetrust-pc-sdk #ot-selall-licntr label{position:absolute}#onetrust-pc-sdk .ot-ven-ctgl{margin-left:66px}#onetrust-pc-sdk .ot-ven-litgl+.ot-arw-cntr{margin-left:81px}#onetrust-pc-sdk .ot-enbl-chr .ot-host-cnt .ot-tgl-cntr{width:auto}#onetrust-pc-sdk #ot-lst-cnt:not(.ot-host-cnt) .ot-tgl-cntr{width:auto;top:auto;height:20px}#onetrust-pc-sdk #ot-lst-cnt .ot-chkbox{position:relative;display:inline-block;width:20px;height:20px}#onetrust-pc-sdk #ot-lst-cnt .ot-chkbox label{position:absolute;padding:0;width:20px;height:20px}#onetrust-pc-sdk #ot-lst-cnt .ot-vnd-info-cntr{border:1px solid #d8d8d8;padding:.75rem 2rem;padding-bottom:0;width:auto;margin-top:.5rem}#onetrust-pc-sdk .ot-acc-grpdesc+.ot-leg-btn-container{padding-left:20px;padding-right:20px;width:calc(100% - 40px);margin-bottom:5px}#onetrust-pc-sdk .ot-subgrp .ot-leg-btn-container{margin-bottom:5px}#onetrust-pc-sdk #ot-ven-lst .ot-leg-btn-container{margin-top:10px}#onetrust-pc-sdk .ot-leg-btn-container{display:inline-block;width:100%;margin-bottom:10px}#onetrust-pc-sdk .ot-leg-btn-container button{height:auto;padding:6.5px 8px;margin-bottom:0;letter-spacing:0;font-size:.75em;line-height:normal}#onetrust-pc-sdk .ot-leg-btn-container svg{display:none;height:14px;width:14px;padding-right:5px;vertical-align:sub}#onetrust-pc-sdk .ot-active-leg-btn{cursor:default;pointer-events:none}#onetrust-pc-sdk .ot-active-leg-btn svg{display:inline-block}#onetrust-pc-sdk .ot-remove-objection-handler{text-decoration:underline;padding:0;font-size:.75em;font-weight:600;line-height:1;padding-left:10px}#onetrust-pc-sdk .ot-obj-leg-btn-handler span{font-weight:bold;text-align:center;font-size:inherit;line-height:1.5}#onetrust-pc-sdk.ot-close-btn-link #close-pc-btn-handler{border:none;height:auto;line-height:1.5;text-decoration:underline;font-size:.69em;background:none;right:15px;top:15px;width:auto;font-weight:normal}#onetrust-pc-sdk .ot-pgph-link{font-size:.813em !important;margin-top:5px;position:relative}#onetrust-pc-sdk .ot-pgph-link.ot-pgph-link-subgroup{margin-bottom:1rem}#onetrust-pc-sdk .ot-pgph-contr{margin:0 2.5rem}#onetrust-pc-sdk .ot-pgph-title{font-size:1.18rem;margin-bottom:2rem}#onetrust-pc-sdk .ot-pgph-desc{font-size:1rem;font-weight:400;margin-bottom:2rem;line-height:1.5rem}#onetrust-pc-sdk .ot-pgph-desc:not(:last-child):after{content:\&quot;\&quot;;width:96%;display:block;margin:0 auto;padding-bottom:2rem;border-bottom:1px solid #e9e9e9}#onetrust-pc-sdk .ot-cat-header{float:left;font-weight:600;font-size:.875em;line-height:1.5;max-width:90%;vertical-align:middle}#onetrust-pc-sdk .ot-vnd-item&gt;button:focus{outline:#000 solid 2px}#onetrust-pc-sdk .ot-vnd-item&gt;button{position:absolute;cursor:pointer;width:100%;height:100%;margin:0;top:0;left:0;z-index:1;max-width:none;border:none}#onetrust-pc-sdk .ot-vnd-item&gt;button[aria-expanded=false]~.ot-acc-txt{margin-top:0;max-height:0;opacity:0;overflow:hidden;width:100%;transition:.25s ease-out;display:none}#onetrust-pc-sdk .ot-vnd-item&gt;button[aria-expanded=true]~.ot-acc-txt{transition:.1s ease-in;margin-top:10px;width:100%;overflow:auto;display:block}#onetrust-pc-sdk .ot-vnd-item&gt;button[aria-expanded=true]~.ot-acc-grpcntr{width:auto;margin-top:0px;padding-bottom:10px}#onetrust-pc-sdk .ot-accordion-layout.ot-cat-item{position:relative;border-radius:2px;margin:0;padding:0;border:1px solid #d8d8d8;border-top:none;width:calc(100% - 2px);float:left}#onetrust-pc-sdk .ot-accordion-layout.ot-cat-item:first-of-type{margin-top:10px;border-top:1px solid #d8d8d8}#onetrust-pc-sdk .ot-accordion-layout .ot-acc-grpdesc{padding-left:20px;padding-right:20px;width:calc(100% - 40px);font-size:.812em;margin-bottom:10px;margin-top:15px}#onetrust-pc-sdk .ot-accordion-layout .ot-acc-grpdesc&gt;ul{padding-top:10px}#onetrust-pc-sdk .ot-accordion-layout .ot-acc-grpdesc&gt;ul li{padding-top:0;line-height:1.5;padding-bottom:10px}#onetrust-pc-sdk .ot-accordion-layout div+.ot-acc-grpdesc{margin-top:5px}#onetrust-pc-sdk .ot-accordion-layout .ot-vlst-cntr:first-child{margin-top:10px}#onetrust-pc-sdk .ot-accordion-layout .ot-vlst-cntr:last-child,#onetrust-pc-sdk .ot-accordion-layout .ot-hlst-cntr:last-child{margin-bottom:5px}#onetrust-pc-sdk .ot-accordion-layout .ot-acc-hdr{padding-top:11.5px;padding-bottom:11.5px;padding-left:20px;padding-right:20px;width:calc(100% - 40px);display:inline-block}#onetrust-pc-sdk .ot-accordion-layout .ot-acc-txt{width:100%;padding:0}#onetrust-pc-sdk .ot-accordion-layout .ot-subgrp-cntr{padding-left:20px;padding-right:15px;padding-bottom:0;width:calc(100% - 35px)}#onetrust-pc-sdk .ot-accordion-layout .ot-subgrp{padding-right:5px}#onetrust-pc-sdk .ot-accordion-layout .ot-acc-grpcntr{z-index:1;position:relative}#onetrust-pc-sdk .ot-accordion-layout .ot-cat-header+.ot-arw-cntr{position:absolute;top:50%;transform:translateY(-50%);right:20px;margin-top:-2px}#onetrust-pc-sdk .ot-accordion-layout .ot-cat-header+.ot-arw-cntr .ot-arw{width:15px;height:20px;margin-left:5px;color:dimgray}#onetrust-pc-sdk .ot-accordion-layout .ot-cat-header{float:none;color:#2e3644;margin:0;display:inline-block;height:auto;word-wrap:break-word;min-height:inherit}#onetrust-pc-sdk .ot-accordion-layout .ot-vlst-cntr,#onetrust-pc-sdk .ot-accordion-layout .ot-hlst-cntr{padding-left:20px;width:calc(100% - 20px);display:inline-block;margin-top:0;padding-bottom:2px}#onetrust-pc-sdk .ot-accordion-layout .ot-acc-hdr{position:relative;min-height:25px}#onetrust-pc-sdk .ot-accordion-layout h4~.ot-tgl,#onetrust-pc-sdk .ot-accordion-layout h4~.ot-always-active{position:absolute;top:50%;transform:translateY(-50%);right:20px}#onetrust-pc-sdk .ot-accordion-layout h4~.ot-tgl+.ot-tgl{right:95px}#onetrust-pc-sdk .ot-accordion-layout .category-vendors-list-handler,#onetrust-pc-sdk .ot-accordion-layout .category-vendors-list-handler+a{margin-top:5px}#onetrust-pc-sdk #ot-lst-cnt{margin-top:1rem;max-height:calc(100% - 96px)}#onetrust-pc-sdk #ot-lst-cnt .ot-vnd-info-cntr{border:1px solid #d8d8d8;padding:.75rem 2rem;padding-bottom:0;width:auto;margin-top:.5rem}#onetrust-pc-sdk #ot-lst-cnt .ot-vnd-info{margin-bottom:1rem;padding-left:.75rem;padding-right:.75rem;display:flex;flex-direction:column}#onetrust-pc-sdk #ot-lst-cnt .ot-vnd-info[data-vnd-info-key*=DPOEmail]{border-top:1px solid #d8d8d8;padding-top:1rem}#onetrust-pc-sdk #ot-lst-cnt .ot-vnd-info[data-vnd-info-key*=DPOLink]{border-bottom:1px solid #d8d8d8;padding-bottom:1rem}#onetrust-pc-sdk #ot-lst-cnt .ot-vnd-info .ot-vnd-lbl{font-weight:bold;font-size:.85em;margin-bottom:.5rem}#onetrust-pc-sdk #ot-lst-cnt .ot-vnd-info .ot-vnd-cnt{margin-left:.5rem;font-weight:500;font-size:.85rem}#onetrust-pc-sdk .ot-vs-list,#onetrust-pc-sdk .ot-vnd-serv{width:auto;padding:1rem 1.25rem;padding-bottom:0}#onetrust-pc-sdk .ot-vs-list .ot-vnd-serv-hdr-cntr,#onetrust-pc-sdk .ot-vnd-serv .ot-vnd-serv-hdr-cntr{padding-bottom:.75rem;border-bottom:1px solid #d8d8d8}#onetrust-pc-sdk .ot-vs-list .ot-vnd-serv-hdr-cntr .ot-vnd-serv-hdr,#onetrust-pc-sdk .ot-vnd-serv .ot-vnd-serv-hdr-cntr .ot-vnd-serv-hdr{font-weight:600;font-size:.95em;line-height:2;margin-left:.5rem}#onetrust-pc-sdk .ot-vs-list .ot-vnd-item,#onetrust-pc-sdk .ot-vnd-serv .ot-vnd-item{border:none;margin:0;padding:0}#onetrust-pc-sdk .ot-vs-list .ot-vnd-item button,#onetrust-pc-sdk .ot-vnd-serv .ot-vnd-item button{outline:none;border-bottom:1px solid #d8d8d8}#onetrust-pc-sdk .ot-vs-list .ot-vnd-item button[aria-expanded=true],#onetrust-pc-sdk .ot-vnd-serv .ot-vnd-item button[aria-expanded=true]{border-bottom:none}#onetrust-pc-sdk .ot-vs-list .ot-vnd-item:first-child,#onetrust-pc-sdk .ot-vnd-serv .ot-vnd-item:first-child{margin-top:.25rem;border-top:unset}#onetrust-pc-sdk .ot-vs-list .ot-vnd-item:last-child,#onetrust-pc-sdk .ot-vnd-serv .ot-vnd-item:last-child{margin-bottom:.5rem}#onetrust-pc-sdk .ot-vs-list .ot-vnd-item:last-child button,#onetrust-pc-sdk .ot-vnd-serv .ot-vnd-item:last-child button{border-bottom:none}#onetrust-pc-sdk .ot-vs-list .ot-vnd-item .ot-vnd-info-cntr,#onetrust-pc-sdk .ot-vnd-serv .ot-vnd-item .ot-vnd-info-cntr{border:1px solid #d8d8d8;padding:.75rem 1.75rem;padding-bottom:0;width:auto;margin-top:.5rem}#onetrust-pc-sdk .ot-vs-list .ot-vnd-item .ot-vnd-info,#onetrust-pc-sdk .ot-vnd-serv .ot-vnd-item .ot-vnd-info{margin-bottom:1rem;padding-left:.75rem;padding-right:.75rem;display:flex;flex-direction:column}#onetrust-pc-sdk .ot-vs-list .ot-vnd-item .ot-vnd-info[data-vnd-info-key*=DPOEmail],#onetrust-pc-sdk .ot-vnd-serv .ot-vnd-item .ot-vnd-info[data-vnd-info-key*=DPOEmail]{border-top:1px solid #d8d8d8;padding-top:1rem}#onetrust-pc-sdk .ot-vs-list .ot-vnd-item .ot-vnd-info[data-vnd-info-key*=DPOLink],#onetrust-pc-sdk .ot-vnd-serv .ot-vnd-item .ot-vnd-info[data-vnd-info-key*=DPOLink]{border-bottom:1px solid #d8d8d8;padding-bottom:1rem}#onetrust-pc-sdk .ot-vs-list .ot-vnd-item .ot-vnd-info .ot-vnd-lbl,#onetrust-pc-sdk .ot-vnd-serv .ot-vnd-item .ot-vnd-info .ot-vnd-lbl{font-weight:bold;font-size:.85em;margin-bottom:.5rem}#onetrust-pc-sdk .ot-vs-list .ot-vnd-item .ot-vnd-info .ot-vnd-cnt,#onetrust-pc-sdk .ot-vnd-serv .ot-vnd-item .ot-vnd-info .ot-vnd-cnt{margin-left:.5rem;font-weight:500;font-size:.85rem}#onetrust-pc-sdk .ot-vs-list.ot-vnd-subgrp-cnt,#onetrust-pc-sdk .ot-vnd-serv.ot-vnd-subgrp-cnt{padding-left:40px}#onetrust-pc-sdk .ot-vs-list.ot-vnd-subgrp-cnt .ot-vnd-serv-hdr-cntr .ot-vnd-serv-hdr,#onetrust-pc-sdk .ot-vnd-serv.ot-vnd-subgrp-cnt .ot-vnd-serv-hdr-cntr .ot-vnd-serv-hdr{font-size:.8em}#onetrust-pc-sdk .ot-vs-list.ot-vnd-subgrp-cnt .ot-cat-header,#onetrust-pc-sdk .ot-vnd-serv.ot-vnd-subgrp-cnt .ot-cat-header{font-size:.8em}#onetrust-pc-sdk .ot-subgrp-cntr .ot-vnd-serv{margin-bottom:1rem;padding:1rem .95rem}#onetrust-pc-sdk .ot-subgrp-cntr .ot-vnd-serv .ot-vnd-serv-hdr-cntr{padding-bottom:.75rem;border-bottom:1px solid #d8d8d8}#onetrust-pc-sdk .ot-subgrp-cntr .ot-vnd-serv .ot-vnd-serv-hdr-cntr .ot-vnd-serv-hdr{font-weight:700;font-size:.8em;line-height:20px;margin-left:.82rem}#onetrust-pc-sdk .ot-subgrp-cntr .ot-cat-header{font-weight:700;font-size:.8em;line-height:20px}#onetrust-pc-sdk .ot-subgrp-cntr ul.ot-subgrps .ot-vnd-serv .ot-vnd-lst-cont .ot-accordion-layout .ot-acc-hdr div.ot-chkbox{margin-left:.82rem}#onetrust-pc-sdk .ot-vs-config .ot-acc-hdr,#onetrust-pc-sdk ul.ot-subgrps .ot-acc-hdr,#onetrust-pc-sdk .ot-subgrp-cntr ul.ot-subgrps .ot-acc-hdr,#onetrust-pc-sdk .ot-vs-list .ot-vnd-item .ot-acc-hdr,#onetrust-pc-sdk .ot-vnd-serv .ot-vnd-item .ot-acc-hdr,#onetrust-pc-sdk #ot-pc-lst .ot-vs-list .ot-vnd-item .ot-acc-hdr,#onetrust-pc-sdk .ot-accordion-layout.ot-checkbox-consent .ot-acc-hdr{padding:.7rem 0;margin:0;display:flex;width:100%;align-items:center;justify-content:space-between}#onetrust-pc-sdk .ot-vs-config .ot-acc-hdr div:first-child,#onetrust-pc-sdk ul.ot-subgrps .ot-acc-hdr div:first-child,#onetrust-pc-sdk .ot-subgrp-cntr ul.ot-subgrps .ot-acc-hdr div:first-child,#onetrust-pc-sdk .ot-vs-list .ot-vnd-item .ot-acc-hdr div:first-child,#onetrust-pc-sdk .ot-vnd-serv .ot-vnd-item .ot-acc-hdr div:first-child,#onetrust-pc-sdk #ot-pc-lst .ot-vs-list .ot-vnd-item .ot-acc-hdr div:first-child,#onetrust-pc-sdk .ot-accordion-layout.ot-checkbox-consent .ot-acc-hdr div:first-child{margin-left:.5rem}#onetrust-pc-sdk .ot-vs-config .ot-acc-hdr div:last-child,#onetrust-pc-sdk ul.ot-subgrps .ot-acc-hdr div:last-child,#onetrust-pc-sdk .ot-subgrp-cntr ul.ot-subgrps .ot-acc-hdr div:last-child,#onetrust-pc-sdk .ot-vs-list .ot-vnd-item .ot-acc-hdr div:last-child,#onetrust-pc-sdk .ot-vnd-serv .ot-vnd-item .ot-acc-hdr div:last-child,#onetrust-pc-sdk #ot-pc-lst .ot-vs-list .ot-vnd-item .ot-acc-hdr div:last-child,#onetrust-pc-sdk .ot-accordion-layout.ot-checkbox-consent .ot-acc-hdr div:last-child{margin-right:.5rem;margin-left:.5rem}#onetrust-pc-sdk .ot-vs-config .ot-acc-hdr .ot-always-active,#onetrust-pc-sdk ul.ot-subgrps .ot-acc-hdr .ot-always-active,#onetrust-pc-sdk .ot-subgrp-cntr ul.ot-subgrps .ot-acc-hdr .ot-always-active,#onetrust-pc-sdk .ot-vs-list .ot-vnd-item .ot-acc-hdr .ot-always-active,#onetrust-pc-sdk .ot-vnd-serv .ot-vnd-item .ot-acc-hdr .ot-always-active,#onetrust-pc-sdk #ot-pc-lst .ot-vs-list .ot-vnd-item .ot-acc-hdr .ot-always-active,#onetrust-pc-sdk .ot-accordion-layout.ot-checkbox-consent .ot-acc-hdr .ot-always-active{position:relative;right:unset;top:unset;transform:unset}#onetrust-pc-sdk .ot-vs-config .ot-acc-hdr .ot-plus-minus,#onetrust-pc-sdk ul.ot-subgrps .ot-acc-hdr .ot-plus-minus,#onetrust-pc-sdk .ot-subgrp-cntr ul.ot-subgrps .ot-acc-hdr .ot-plus-minus,#onetrust-pc-sdk .ot-vs-list .ot-vnd-item .ot-acc-hdr .ot-plus-minus,#onetrust-pc-sdk .ot-vnd-serv .ot-vnd-item .ot-acc-hdr .ot-plus-minus,#onetrust-pc-sdk #ot-pc-lst .ot-vs-list .ot-vnd-item .ot-acc-hdr .ot-plus-minus,#onetrust-pc-sdk .ot-accordion-layout.ot-checkbox-consent .ot-acc-hdr .ot-plus-minus{top:0}#onetrust-pc-sdk .ot-vs-config .ot-acc-hdr .ot-arw-cntr,#onetrust-pc-sdk ul.ot-subgrps .ot-acc-hdr .ot-arw-cntr,#onetrust-pc-sdk .ot-subgrp-cntr ul.ot-subgrps .ot-acc-hdr .ot-arw-cntr,#onetrust-pc-sdk .ot-vs-list .ot-vnd-item .ot-acc-hdr .ot-arw-cntr,#onetrust-pc-sdk .ot-vnd-serv .ot-vnd-item .ot-acc-hdr .ot-arw-cntr,#onetrust-pc-sdk #ot-pc-lst .ot-vs-list .ot-vnd-item .ot-acc-hdr .ot-arw-cntr,#onetrust-pc-sdk .ot-accordion-layout.ot-checkbox-consent .ot-acc-hdr .ot-arw-cntr{float:none;top:unset;right:unset;transform:unset;margin-top:-2px;position:relative}#onetrust-pc-sdk .ot-vs-config .ot-acc-hdr .ot-cat-header,#onetrust-pc-sdk ul.ot-subgrps .ot-acc-hdr .ot-cat-header,#onetrust-pc-sdk .ot-subgrp-cntr ul.ot-subgrps .ot-acc-hdr .ot-cat-header,#onetrust-pc-sdk .ot-vs-list .ot-vnd-item .ot-acc-hdr .ot-cat-header,#onetrust-pc-sdk .ot-vnd-serv .ot-vnd-item .ot-acc-hdr .ot-cat-header,#onetrust-pc-sdk #ot-pc-lst .ot-vs-list .ot-vnd-item .ot-acc-hdr .ot-cat-header,#onetrust-pc-sdk .ot-accordion-layout.ot-checkbox-consent .ot-acc-hdr .ot-cat-header{flex:1;margin:0 .5rem}#onetrust-pc-sdk .ot-vs-config .ot-acc-hdr .ot-tgl,#onetrust-pc-sdk ul.ot-subgrps .ot-acc-hdr .ot-tgl,#onetrust-pc-sdk .ot-subgrp-cntr ul.ot-subgrps .ot-acc-hdr .ot-tgl,#onetrust-pc-sdk .ot-vs-list .ot-vnd-item .ot-acc-hdr .ot-tgl,#onetrust-pc-sdk .ot-vnd-serv .ot-vnd-item .ot-acc-hdr .ot-tgl,#onetrust-pc-sdk #ot-pc-lst .ot-vs-list .ot-vnd-item .ot-acc-hdr .ot-tgl,#onetrust-pc-sdk .ot-accordion-layout.ot-checkbox-consent .ot-acc-hdr .ot-tgl{position:relative;transform:none;right:0;top:0;float:none}#onetrust-pc-sdk .ot-vs-config .ot-acc-hdr .ot-chkbox,#onetrust-pc-sdk ul.ot-subgrps .ot-acc-hdr .ot-chkbox,#onetrust-pc-sdk .ot-subgrp-cntr ul.ot-subgrps .ot-acc-hdr .ot-chkbox,#onetrust-pc-sdk .ot-vs-list .ot-vnd-item .ot-acc-hdr .ot-chkbox,#onetrust-pc-sdk .ot-vnd-serv .ot-vnd-item .ot-acc-hdr .ot-chkbox,#onetrust-pc-sdk #ot-pc-lst .ot-vs-list .ot-vnd-item .ot-acc-hdr .ot-chkbox,#onetrust-pc-sdk .ot-accordion-layout.ot-checkbox-consent .ot-acc-hdr .ot-chkbox{position:relative;margin:0 .5rem}#onetrust-pc-sdk .ot-vs-config .ot-acc-hdr .ot-chkbox label,#onetrust-pc-sdk ul.ot-subgrps .ot-acc-hdr .ot-chkbox label,#onetrust-pc-sdk .ot-subgrp-cntr ul.ot-subgrps .ot-acc-hdr .ot-chkbox label,#onetrust-pc-sdk .ot-vs-list .ot-vnd-item .ot-acc-hdr .ot-chkbox label,#onetrust-pc-sdk .ot-vnd-serv .ot-vnd-item .ot-acc-hdr .ot-chkbox label,#onetrust-pc-sdk #ot-pc-lst .ot-vs-list .ot-vnd-item .ot-acc-hdr .ot-chkbox label,#onetrust-pc-sdk .ot-accordion-layout.ot-checkbox-consent .ot-acc-hdr .ot-chkbox label{padding:0}#onetrust-pc-sdk .ot-vs-config .ot-acc-hdr .ot-chkbox label::before,#onetrust-pc-sdk ul.ot-subgrps .ot-acc-hdr .ot-chkbox label::before,#onetrust-pc-sdk .ot-subgrp-cntr ul.ot-subgrps .ot-acc-hdr .ot-chkbox label::before,#onetrust-pc-sdk .ot-vs-list .ot-vnd-item .ot-acc-hdr .ot-chkbox label::before,#onetrust-pc-sdk .ot-vnd-serv .ot-vnd-item .ot-acc-hdr .ot-chkbox label::before,#onetrust-pc-sdk #ot-pc-lst .ot-vs-list .ot-vnd-item .ot-acc-hdr .ot-chkbox label::before,#onetrust-pc-sdk .ot-accordion-layout.ot-checkbox-consent .ot-acc-hdr .ot-chkbox label::before{position:relative}#onetrust-pc-sdk .ot-vs-config .ot-acc-hdr .ot-chkbox input,#onetrust-pc-sdk ul.ot-subgrps .ot-acc-hdr .ot-chkbox input,#onetrust-pc-sdk .ot-subgrp-cntr ul.ot-subgrps .ot-acc-hdr .ot-chkbox input,#onetrust-pc-sdk .ot-vs-list .ot-vnd-item .ot-acc-hdr .ot-chkbox input,#onetrust-pc-sdk .ot-vnd-serv .ot-vnd-item .ot-acc-hdr .ot-chkbox input,#onetrust-pc-sdk #ot-pc-lst .ot-vs-list .ot-vnd-item .ot-acc-hdr .ot-chkbox input,#onetrust-pc-sdk .ot-accordion-layout.ot-checkbox-consent .ot-acc-hdr .ot-chkbox input{position:absolute;cursor:pointer;width:100%;height:100%;opacity:0;margin:0;top:0;left:0;z-index:1}#onetrust-pc-sdk .ot-subgrp-cntr ul.ot-subgrps li.ot-subgrp .ot-acc-hdr h5.ot-cat-header,#onetrust-pc-sdk .ot-subgrp-cntr ul.ot-subgrps li.ot-subgrp .ot-acc-hdr h4.ot-cat-header{margin:0}#onetrust-pc-sdk .ot-vs-config .ot-subgrp-cntr ul.ot-subgrps li.ot-subgrp h5{top:0;line-height:20px}#onetrust-pc-sdk .ot-vs-list{display:flex;flex-direction:column;padding:0;margin:.5rem 4px}#onetrust-pc-sdk .ot-vs-selc-all{display:flex;padding:0;float:unset;align-items:center;justify-content:flex-start}#onetrust-pc-sdk .ot-vs-selc-all.ot-toggle-conf{justify-content:flex-end}#onetrust-pc-sdk .ot-vs-selc-all.ot-toggle-conf.ot-caret-conf .ot-sel-all-chkbox{margin-right:48px}#onetrust-pc-sdk .ot-vs-selc-all.ot-toggle-conf .ot-sel-all-chkbox{margin:0;padding:0;margin-right:14px;justify-content:flex-end}#onetrust-pc-sdk .ot-vs-selc-all.ot-toggle-conf #ot-selall-vencntr.ot-chkbox,#onetrust-pc-sdk .ot-vs-selc-all.ot-toggle-conf #ot-selall-vencntr.ot-tgl{display:inline-block;right:unset;width:auto;height:auto;float:none}#onetrust-pc-sdk .ot-vs-selc-all.ot-toggle-conf #ot-selall-vencntr label{width:45px;height:25px}#onetrust-pc-sdk .ot-vs-selc-all .ot-sel-all-chkbox{margin-right:11px;margin-left:.75rem;display:flex;align-items:center}#onetrust-pc-sdk .ot-vs-selc-all .sel-all-hdr{margin:0 1.25rem;font-size:.812em;line-height:normal;text-align:center;word-break:break-word;word-wrap:break-word}#onetrust-pc-sdk .ot-vnd-list-cnt #ot-selall-vencntr.ot-chkbox{float:unset;right:0}#onetrust-pc-sdk[dir=rtl] #ot-back-arw,#onetrust-pc-sdk[dir=rtl] input~.ot-acc-hdr .ot-arw{transform:rotate(180deg);-o-transform:rotate(180deg);-ms-transform:rotate(180deg);-webkit-transform:rotate(180deg)}#onetrust-pc-sdk[dir=rtl] input:checked~.ot-acc-hdr .ot-arw{transform:rotate(270deg);-o-transform:rotate(270deg);-ms-transform:rotate(270deg);-webkit-transform:rotate(270deg)}#onetrust-pc-sdk[dir=rtl] .ot-chkbox label::after{transform:rotate(45deg);-webkit-transform:rotate(45deg);-o-transform:rotate(45deg);-ms-transform:rotate(45deg);border-left:0;border-right:3px solid}#onetrust-pc-sdk[dir=rtl] .ot-search-cntr&gt;svg{right:0}@media only screen and (max-width: 600px){#onetrust-pc-sdk.otPcCenter{left:0;min-width:100%;height:100%;top:0;border-radius:0}#onetrust-pc-sdk #ot-pc-content,#onetrust-pc-sdk.ot-ftr-stacked .ot-btn-container{margin:1px 3px 0 10px;padding-right:10px;width:calc(100% - 23px)}#onetrust-pc-sdk .ot-btn-container button{max-width:none;letter-spacing:.01em}#onetrust-pc-sdk #close-pc-btn-handler{top:10px;right:17px}#onetrust-pc-sdk p{font-size:.7em}#onetrust-pc-sdk #ot-pc-hdr{margin:10px 10px 0 5px;width:calc(100% - 15px)}#onetrust-pc-sdk .vendor-search-handler{font-size:1em}#onetrust-pc-sdk #ot-back-arw{margin-left:12px}#onetrust-pc-sdk #ot-lst-cnt{margin:0;padding:0 5px 0 10px;min-width:95%}#onetrust-pc-sdk .switch+p{max-width:80%}#onetrust-pc-sdk .ot-ftr-stacked button{width:100%}#onetrust-pc-sdk #ot-fltr-cnt{max-width:320px;width:90%;border-top-right-radius:0;border-bottom-right-radius:0;margin:0;margin-left:15px;left:auto;right:40px;top:85px}#onetrust-pc-sdk .ot-fltr-opt{margin-left:25px;margin-bottom:10px}#onetrust-pc-sdk .ot-pc-refuse-all-handler{margin-bottom:0}#onetrust-pc-sdk #ot-fltr-cnt{right:40px}}@media only screen and (max-width: 476px){#onetrust-pc-sdk .ot-fltr-cntr,#onetrust-pc-sdk #ot-fltr-cnt{right:10px}#onetrust-pc-sdk #ot-anchor{right:25px}#onetrust-pc-sdk button{width:100%}#onetrust-pc-sdk:not(.ot-addtl-vendors) #ot-pc-lst:not(.ot-enbl-chr) .ot-sel-all{padding-right:9px}#onetrust-pc-sdk:not(.ot-addtl-vendors) #ot-pc-lst:not(.ot-enbl-chr) .ot-tgl-cntr{right:0}}@media only screen and (max-width: 896px)and (max-height: 425px)and (orientation: landscape){#onetrust-pc-sdk.otPcCenter{left:0;top:0;min-width:100%;height:100%;border-radius:0}#onetrust-pc-sdk .ot-pc-header{height:auto;min-height:20px}#onetrust-pc-sdk .ot-pc-header .ot-pc-logo{max-height:30px}#onetrust-pc-sdk .ot-pc-footer{max-height:60px;overflow-y:auto}#onetrust-pc-sdk #ot-pc-content,#onetrust-pc-sdk #ot-pc-lst{bottom:70px}#onetrust-pc-sdk.ot-ftr-stacked #ot-pc-content{bottom:70px}#onetrust-pc-sdk #ot-anchor{left:initial;right:50px}#onetrust-pc-sdk #ot-lst-title{margin-top:12px}#onetrust-pc-sdk #ot-lst-title *{font-size:inherit}#onetrust-pc-sdk #ot-pc-hdr input{margin-right:0;padding-right:45px}#onetrust-pc-sdk .switch+p{max-width:85%}#onetrust-pc-sdk #ot-sel-blk{position:static}#onetrust-pc-sdk #ot-pc-lst{overflow:auto}#onetrust-pc-sdk #ot-lst-cnt{max-height:none;overflow:initial}#onetrust-pc-sdk #ot-lst-cnt.no-results{height:auto}#onetrust-pc-sdk input{font-size:1em !important}#onetrust-pc-sdk p{font-size:.6em}#onetrust-pc-sdk #ot-fltr-modal{width:100%;top:0}#onetrust-pc-sdk ul li p,#onetrust-pc-sdk .category-vendors-list-handler,#onetrust-pc-sdk .category-vendors-list-handler+a,#onetrust-pc-sdk .category-host-list-handler{font-size:.6em}#onetrust-pc-sdk.ot-shw-fltr #ot-anchor{display:none !important}#onetrust-pc-sdk.ot-shw-fltr #ot-pc-lst{height:100% !important;overflow:hidden;top:0px}#onetrust-pc-sdk.ot-shw-fltr #ot-fltr-cnt{margin:0;height:100%;max-height:none;padding:10px;top:0;width:calc(100% - 20px);position:absolute;right:0;left:0;max-width:none}#onetrust-pc-sdk.ot-shw-fltr .ot-fltr-scrlcnt{max-height:calc(100% - 65px)}}\n            #onetrust-consent-sdk #onetrust-pc-sdk,\n                #onetrust-consent-sdk #ot-search-cntr,\n                #onetrust-consent-sdk #onetrust-pc-sdk .ot-switch.ot-toggle,\n                #onetrust-consent-sdk #onetrust-pc-sdk ot-grp-hdr1 .checkbox,\n                #onetrust-consent-sdk #onetrust-pc-sdk #ot-pc-title:after\n                ,#onetrust-consent-sdk #onetrust-pc-sdk #ot-sel-blk,\n                        #onetrust-consent-sdk #onetrust-pc-sdk #ot-fltr-cnt,\n                        #onetrust-consent-sdk #onetrust-pc-sdk #ot-anchor {\n                    background-color: #FFFFFF;\n                }\n               \n            #onetrust-consent-sdk #onetrust-pc-sdk h3,\n                #onetrust-consent-sdk #onetrust-pc-sdk h4,\n                #onetrust-consent-sdk #onetrust-pc-sdk h5,\n                #onetrust-consent-sdk #onetrust-pc-sdk h6,\n                #onetrust-consent-sdk #onetrust-pc-sdk p,\n                #onetrust-consent-sdk #onetrust-pc-sdk #ot-ven-lst .ot-ven-opts p,\n                #onetrust-consent-sdk #onetrust-pc-sdk #ot-pc-desc,\n                #onetrust-consent-sdk #onetrust-pc-sdk #ot-pc-title,\n                #onetrust-consent-sdk #onetrust-pc-sdk .ot-li-title,\n                #onetrust-consent-sdk #onetrust-pc-sdk .ot-sel-all-hdr span,\n                #onetrust-consent-sdk #onetrust-pc-sdk #ot-host-lst .ot-host-info,\n                #onetrust-consent-sdk #onetrust-pc-sdk #ot-fltr-modal #modal-header,\n                #onetrust-consent-sdk #onetrust-pc-sdk .ot-checkbox label span,\n                #onetrust-consent-sdk #onetrust-pc-sdk #ot-pc-lst #ot-sel-blk p,\n                #onetrust-consent-sdk #onetrust-pc-sdk #ot-pc-lst #ot-lst-title h3,\n                #onetrust-consent-sdk #onetrust-pc-sdk #ot-pc-lst .back-btn-handler p,\n                #onetrust-consent-sdk #onetrust-pc-sdk #ot-pc-lst .ot-ven-name,\n                #onetrust-consent-sdk #onetrust-pc-sdk #ot-pc-lst #ot-ven-lst .consent-category,\n                #onetrust-consent-sdk #onetrust-pc-sdk .ot-leg-btn-container .ot-inactive-leg-btn,\n                #onetrust-consent-sdk #onetrust-pc-sdk .ot-label-status,\n                #onetrust-consent-sdk #onetrust-pc-sdk .ot-chkbox label span,\n                #onetrust-consent-sdk #onetrust-pc-sdk #clear-filters-handler,\n                #onetrust-consent-sdk #onetrust-pc-sdk .ot-optout-signal\n                {\n                    color: #35393D;\n                }\n             #onetrust-consent-sdk #onetrust-pc-sdk .privacy-notice-link,\n                    #onetrust-consent-sdk #onetrust-pc-sdk .ot-pgph-link,\n                    #onetrust-consent-sdk #onetrust-pc-sdk .category-vendors-list-handler,\n                    #onetrust-consent-sdk #onetrust-pc-sdk .category-vendors-list-handler + a,\n                    #onetrust-consent-sdk #onetrust-pc-sdk .category-host-list-handler,\n                    #onetrust-consent-sdk #onetrust-pc-sdk .ot-ven-link,\n                    #onetrust-consent-sdk #onetrust-pc-sdk .ot-ven-legclaim-link,\n                    #onetrust-consent-sdk #onetrust-pc-sdk #ot-host-lst .ot-host-name a,\n                    #onetrust-consent-sdk #onetrust-pc-sdk #ot-host-lst .ot-acc-hdr .ot-host-expand,\n                    #onetrust-consent-sdk #onetrust-pc-sdk #ot-host-lst .ot-host-info a,\n                    #onetrust-consent-sdk #onetrust-pc-sdk #ot-pc-content #ot-pc-desc .ot-link-btn,\n                    #onetrust-consent-sdk #onetrust-pc-sdk .ot-vnd-serv .ot-vnd-item .ot-vnd-info a,\n                    #onetrust-consent-sdk #onetrust-pc-sdk #ot-lst-cnt .ot-vnd-info a\n                    {\n                        color: #06f;\n                    }\n            #onetrust-consent-sdk #onetrust-pc-sdk .category-vendors-list-handler:hover { text-decoration: underline;}\n            #onetrust-consent-sdk #onetrust-pc-sdk .ot-acc-grpcntr.ot-acc-txt,\n            #onetrust-consent-sdk #onetrust-pc-sdk .ot-acc-txt .ot-subgrp-tgl .ot-switch.ot-toggle\n             {\n                background-color: #E9E9E9;\n            }\n             #onetrust-consent-sdk #onetrust-pc-sdk #ot-host-lst .ot-host-info,\n                    #onetrust-consent-sdk #onetrust-pc-sdk .ot-acc-txt .ot-ven-dets\n                            {\n                                background-color: #E9E9E9;\n                            }\n        #onetrust-consent-sdk #onetrust-pc-sdk\n            button:not(#clear-filters-handler):not(.ot-close-icon):not(#filter-btn-handler):not(.ot-remove-objection-handler):not(.ot-obj-leg-btn-handler):not([aria-expanded]):not(.ot-link-btn),\n            #onetrust-consent-sdk #onetrust-pc-sdk .ot-leg-btn-container .ot-active-leg-btn {\n                background-color: #06f;border-color: #06f;\n                color: #FFFFFF;\n            }\n            #onetrust-consent-sdk #onetrust-pc-sdk .ot-active-menu {\n                border-color: #06f;\n            }\n            \n            #onetrust-consent-sdk #onetrust-pc-sdk .ot-leg-btn-container .ot-remove-objection-handler{\n                background-color: transparent;\n                border: 1px solid transparent;\n            }\n            #onetrust-consent-sdk #onetrust-pc-sdk .ot-leg-btn-container .ot-inactive-leg-btn {\n                background-color: #FFFFFF;\n                color: #78808E; border-color: #78808E;\n            }\n            #onetrust-consent-sdk #onetrust-pc-sdk .ot-tgl input:focus + .ot-switch, .ot-switch .ot-switch-nob, .ot-switch .ot-switch-nob:before,\n            #onetrust-pc-sdk .ot-checkbox input[type=\&quot;checkbox\&quot;]:focus + label::before,\n            #onetrust-pc-sdk .ot-chkbox input[type=\&quot;checkbox\&quot;]:focus + label::before {\n                outline-color: #000000;\n                outline-width: 1px;\n            }\n            #onetrust-pc-sdk .ot-host-item &gt; button:focus, #onetrust-pc-sdk .ot-ven-item &gt; button:focus {\n                border: 1px solid #000000;\n            }\n            #onetrust-consent-sdk #onetrust-pc-sdk *:focus,\n            #onetrust-consent-sdk #onetrust-pc-sdk .ot-vlst-cntr &gt; a:focus {\n               outline: 1px solid #000000;\n            }#onetrust-pc-sdk .ot-vlst-cntr .ot-ext-lnk,  #onetrust-pc-sdk .ot-ven-hdr .ot-ext-lnk{\n                    background-image: url(&apos;https://cdn.cookielaw.org/logos/static/ot_external_link.svg&apos;);\n                }\n            #onetrust-banner-sdk {\n  font-size: 16px !important;\n}\n#onetrust-pc-sdk .ot-tgl input:checked + .ot-switch .ot-switch-nob {\n  background-color: #06f !important;\n}\n.ot-sdk-cookie-policy{font-family:inherit;font-size:16px}.ot-sdk-cookie-policy.otRelFont{font-size:1rem}.ot-sdk-cookie-policy h3,.ot-sdk-cookie-policy h4,.ot-sdk-cookie-policy h6,.ot-sdk-cookie-policy p,.ot-sdk-cookie-policy li,.ot-sdk-cookie-policy a,.ot-sdk-cookie-policy th,.ot-sdk-cookie-policy #cookie-policy-description,.ot-sdk-cookie-policy .ot-sdk-cookie-policy-group,.ot-sdk-cookie-policy #cookie-policy-title{color:dimgray}.ot-sdk-cookie-policy #cookie-policy-description{margin-bottom:1em}.ot-sdk-cookie-policy h4{font-size:1.2em}.ot-sdk-cookie-policy h6{font-size:1em;margin-top:2em}.ot-sdk-cookie-policy th{min-width:75px}.ot-sdk-cookie-policy a,.ot-sdk-cookie-policy a:hover{background:#fff}.ot-sdk-cookie-policy thead{background-color:#f6f6f4;font-weight:bold}.ot-sdk-cookie-policy .ot-mobile-border{display:none}.ot-sdk-cookie-policy section{margin-bottom:2em}.ot-sdk-cookie-policy table{border-collapse:inherit}#ot-sdk-cookie-policy-v2.ot-sdk-cookie-policy{font-family:inherit;font-size:1rem}#ot-sdk-cookie-policy-v2.ot-sdk-cookie-policy h3,#ot-sdk-cookie-policy-v2.ot-sdk-cookie-policy h4,#ot-sdk-cookie-policy-v2.ot-sdk-cookie-policy h6,#ot-sdk-cookie-policy-v2.ot-sdk-cookie-policy p,#ot-sdk-cookie-policy-v2.ot-sdk-cookie-policy li,#ot-sdk-cookie-policy-v2.ot-sdk-cookie-policy a,#ot-sdk-cookie-policy-v2.ot-sdk-cookie-policy th,#ot-sdk-cookie-policy-v2.ot-sdk-cookie-policy #cookie-policy-description,#ot-sdk-cookie-policy-v2.ot-sdk-cookie-policy .ot-sdk-cookie-policy-group,#ot-sdk-cookie-policy-v2.ot-sdk-cookie-policy #cookie-policy-title{color:dimgray}#ot-sdk-cookie-policy-v2.ot-sdk-cookie-policy #cookie-policy-description{margin-bottom:1em}#ot-sdk-cookie-policy-v2.ot-sdk-cookie-policy .ot-sdk-subgroup{margin-left:1.5em}#ot-sdk-cookie-policy-v2.ot-sdk-cookie-policy #cookie-policy-description,#ot-sdk-cookie-policy-v2.ot-sdk-cookie-policy .ot-sdk-cookie-policy-group-desc,#ot-sdk-cookie-policy-v2.ot-sdk-cookie-policy .ot-table-header,#ot-sdk-cookie-policy-v2.ot-sdk-cookie-policy a,#ot-sdk-cookie-policy-v2.ot-sdk-cookie-policy span,#ot-sdk-cookie-policy-v2.ot-sdk-cookie-policy td{font-size:.9em}#ot-sdk-cookie-policy-v2.ot-sdk-cookie-policy td span,#ot-sdk-cookie-policy-v2.ot-sdk-cookie-policy td a{font-size:inherit}#ot-sdk-cookie-policy-v2.ot-sdk-cookie-policy .ot-sdk-cookie-policy-group{font-size:1em;margin-bottom:.6em}#ot-sdk-cookie-policy-v2.ot-sdk-cookie-policy .ot-sdk-cookie-policy-title{margin-bottom:1.2em}#ot-sdk-cookie-policy-v2.ot-sdk-cookie-policy&gt;section{margin-bottom:1em}#ot-sdk-cookie-policy-v2.ot-sdk-cookie-policy th{min-width:75px}#ot-sdk-cookie-policy-v2.ot-sdk-cookie-policy a,#ot-sdk-cookie-policy-v2.ot-sdk-cookie-policy a:hover{background:#fff}#ot-sdk-cookie-policy-v2.ot-sdk-cookie-policy thead{background-color:#f6f6f4;font-weight:bold}#ot-sdk-cookie-policy-v2.ot-sdk-cookie-policy .ot-mobile-border{display:none}#ot-sdk-cookie-policy-v2.ot-sdk-cookie-policy section{margin-bottom:2em}#ot-sdk-cookie-policy-v2.ot-sdk-cookie-policy .ot-sdk-subgroup ul li{list-style:disc;margin-left:1.5em}#ot-sdk-cookie-policy-v2.ot-sdk-cookie-policy .ot-sdk-subgroup ul li h4{display:inline-block}#ot-sdk-cookie-policy-v2.ot-sdk-cookie-policy table{border-collapse:inherit;margin:auto;border:1px solid #d7d7d7;border-radius:5px;border-spacing:initial;width:100%;overflow:hidden}#ot-sdk-cookie-policy-v2.ot-sdk-cookie-policy table th,#ot-sdk-cookie-policy-v2.ot-sdk-cookie-policy table td{border-bottom:1px solid #d7d7d7;border-right:1px solid #d7d7d7}#ot-sdk-cookie-policy-v2.ot-sdk-cookie-policy table tr:last-child td{border-bottom:0px}#ot-sdk-cookie-policy-v2.ot-sdk-cookie-policy table tr th:last-child,#ot-sdk-cookie-policy-v2.ot-sdk-cookie-policy table tr td:last-child{border-right:0px}#ot-sdk-cookie-policy-v2.ot-sdk-cookie-policy table .ot-host,#ot-sdk-cookie-policy-v2.ot-sdk-cookie-policy table .ot-cookies-type{width:25%}.ot-sdk-cookie-policy[dir=rtl]{text-align:left}#ot-sdk-cookie-policy h3{font-size:1.5em}@media only screen and (max-width: 530px){.ot-sdk-cookie-policy:not(#ot-sdk-cookie-policy-v2) table,.ot-sdk-cookie-policy:not(#ot-sdk-cookie-policy-v2) thead,.ot-sdk-cookie-policy:not(#ot-sdk-cookie-policy-v2) tbody,.ot-sdk-cookie-policy:not(#ot-sdk-cookie-policy-v2) th,.ot-sdk-cookie-policy:not(#ot-sdk-cookie-policy-v2) td,.ot-sdk-cookie-policy:not(#ot-sdk-cookie-policy-v2) tr{display:block}.ot-sdk-cookie-policy:not(#ot-sdk-cookie-policy-v2) thead tr{position:absolute;top:-9999px;left:-9999px}.ot-sdk-cookie-policy:not(#ot-sdk-cookie-policy-v2) tr{margin:0 0 1em 0}.ot-sdk-cookie-policy:not(#ot-sdk-cookie-policy-v2) tr:nth-child(odd),.ot-sdk-cookie-policy:not(#ot-sdk-cookie-policy-v2) tr:nth-child(odd) a{background:#f6f6f4}.ot-sdk-cookie-policy:not(#ot-sdk-cookie-policy-v2) td{border:none;border-bottom:1px solid #eee;position:relative;padding-left:50%}.ot-sdk-cookie-policy:not(#ot-sdk-cookie-policy-v2) td:before{position:absolute;height:100%;left:6px;width:40%;padding-right:10px}.ot-sdk-cookie-policy:not(#ot-sdk-cookie-policy-v2) .ot-mobile-border{display:inline-block;background-color:#e4e4e4;position:absolute;height:100%;top:0;left:45%;width:2px}.ot-sdk-cookie-policy:not(#ot-sdk-cookie-policy-v2) td:before{content:attr(data-label);font-weight:bold}.ot-sdk-cookie-policy:not(#ot-sdk-cookie-policy-v2) li{word-break:break-word;word-wrap:break-word}#ot-sdk-cookie-policy-v2.ot-sdk-cookie-policy table{overflow:hidden}#ot-sdk-cookie-policy-v2.ot-sdk-cookie-policy table td{border:none;border-bottom:1px solid #d7d7d7}#ot-sdk-cookie-policy-v2.ot-sdk-cookie-policy table,#ot-sdk-cookie-policy-v2.ot-sdk-cookie-policy thead,#ot-sdk-cookie-policy-v2.ot-sdk-cookie-policy tbody,#ot-sdk-cookie-policy-v2.ot-sdk-cookie-policy th,#ot-sdk-cookie-policy-v2.ot-sdk-cookie-policy td,#ot-sdk-cookie-policy-v2.ot-sdk-cookie-policy tr{display:block}#ot-sdk-cookie-policy-v2.ot-sdk-cookie-policy table .ot-host,#ot-sdk-cookie-policy-v2.ot-sdk-cookie-policy table .ot-cookies-type{width:auto}#ot-sdk-cookie-policy-v2.ot-sdk-cookie-policy tr{margin:0 0 1em 0}#ot-sdk-cookie-policy-v2.ot-sdk-cookie-policy td:before{height:100%;width:40%;padding-right:10px}#ot-sdk-cookie-policy-v2.ot-sdk-cookie-policy td:before{content:attr(data-label);font-weight:bold}#ot-sdk-cookie-policy-v2.ot-sdk-cookie-policy li{word-break:break-word;word-wrap:break-word}#ot-sdk-cookie-policy-v2.ot-sdk-cookie-policy thead tr{position:absolute;top:-9999px;left:-9999px;z-index:-9999}#ot-sdk-cookie-policy-v2.ot-sdk-cookie-policy table tr:last-child td{border-bottom:1px solid #d7d7d7;border-right:0px}#ot-sdk-cookie-policy-v2.ot-sdk-cookie-policy table tr:last-child td:last-child{border-bottom:0px}}\n                \n                    #ot-sdk-cookie-policy-v2.ot-sdk-cookie-policy h5,\n                    #ot-sdk-cookie-policy-v2.ot-sdk-cookie-policy h6,\n                    #ot-sdk-cookie-policy-v2.ot-sdk-cookie-policy li,\n                    #ot-sdk-cookie-policy-v2.ot-sdk-cookie-policy p,\n                    #ot-sdk-cookie-policy-v2.ot-sdk-cookie-policy a,\n                    #ot-sdk-cookie-policy-v2.ot-sdk-cookie-policy span,\n                    #ot-sdk-cookie-policy-v2.ot-sdk-cookie-policy td,\n                    #ot-sdk-cookie-policy-v2.ot-sdk-cookie-policy #cookie-policy-description {\n                        color: #696969;\n                    }\n                    #ot-sdk-cookie-policy-v2.ot-sdk-cookie-policy th {\n                        color: #696969;\n                    }\n                    #ot-sdk-cookie-policy-v2.ot-sdk-cookie-policy .ot-sdk-cookie-policy-group {\n                        color: #696969;\n                    }\n                    \n                    #ot-sdk-cookie-policy-v2.ot-sdk-cookie-policy #cookie-policy-title {\n                            color: #696969;\n                        }\n                    \n            \n                    #ot-sdk-cookie-policy-v2.ot-sdk-cookie-policy table th {\n                            background-color: #F8F8F8;\n                        }\n                    \n            #onetrust-banner-sdk { font-size:16px !important; }.ot-floating-button__front{background-image:url(&apos;https://cdn.cookielaw.org/logos/static/ot_persistent_cookie.png&apos;)}&quot;,40,3,39,[196],&quot;id=_6si-shortening&quot;,&quot;/* This stylesheet is created by 6sense */\n            .mktoForm .mktoFormRow:has(._6si_sff_filled) {\n                display: none;\n            }\n            .mktoForm .mktoFormRow ._6si_sff_filled {\n                display: none;\n            }\n            .hs-form .hs-form-field:has(._6si_sff_filled) {\n                display: none;\n            }\n            .hs-form .hs-form-field ._6si_sff_filled {\n                display: none;\n            }\n            form.form .form-field:not(.error):has(._6si_sff_filled) {\n                display: none;\n            }\n            form.form .form-field:not(.error) ._6si_sff_filled {\n                display: none;\n            }\n            .elq-form .row:has(._6si_sff_filled) {\n                display: none;\n            }\n            .elq-form .row ._6si_sff_filled {\n                display: none;\n            }\n            .elq-form .field-wrapper:has(._6si_sff_filled) {\n                display: none;\n            }\n            .elq-form .field-wrapper ._6si_sff_filled {\n                display: none;\n            }&quot;,41,5,[19,29],42,5,41,[19],&quot;\n            &quot;,43,5,42,[19],&quot;\n&quot;,44,5,43,&quot;NOSCRIPT&quot;,45,5,44,[19,217],46,5,45,[19,217],47,5,46,[19],&quot;            \n\n&quot;,48,5,47,&quot;DIV&quot;,&quot;id=samlSpinner&quot;,&quot;class=uk-hidden&quot;,49,5,48,[19],&quot;\n\t&quot;,50,5,49,&quot;HEADER&quot;,&quot;id=header&quot;,&quot;class=new-bu-header bu-home&quot;,&quot;style=display: block;&quot;,51,5,50,[19],&quot;\n            \t&quot;,52,5,51,&quot;SECTION&quot;,&quot;id=bu-skeleton&quot;,&quot;class=skeleton bu-skeleton &quot;,&quot;style=display: none;&quot;,53,5,52,[19],&quot;\n\n&quot;,54,5,53,[19],&quot;\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t    \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t    \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t    \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t    \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t    \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t    \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t    \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t    \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t    \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t    \t&quot;,55,5,54,[261],&quot;class=bu-navigation appdelivery&quot;,[252],56,5,55,[19],&quot;\n\t\n\t&quot;,57,5,56,[261],&quot;class=slideshow home-slideshow&quot;,[252],58,5,57,[19,245],59,5,58,[261],&quot;id=homepageCategories&quot;,&quot;class=categories appdelivery&quot;,[252],60,5,59,[19,245],61,5,60,[261],&quot;class=media appdelivery&quot;,[252],62,5,61,[19],&quot;\n\t\n\n    \t&quot;,63,5,62,[261],&quot;class=contribute loaded&quot;,[252],64,5,63,[19],&quot;\n\n\n            &quot;,65,5,64,[238],&quot;id=unsupported-browser&quot;,&quot;class=success-full uk-hidden&quot;,66,5,65,[19],&quot;\n\n        \t&quot;,67,5,66,&quot;FOOTER&quot;,&quot;class=footer bu-home &quot;,&quot;id=footer&quot;,[252],68,5,67,[19],&quot;\n        \n\n                 &quot;,69,5,68,[19],&quot;\n                                    &quot;,70,5,69,[19,63],71,5,70,[19,29],72,5,71,[238],&quot;id=buildId&quot;,[240],73,5,72,[19],&quot;\n    \n    \n\n&quot;,74,5,73,[238],&quot;style=display: none; visibility: hidden;&quot;,75,5,74,[238,380],76,5,75,[19,217],77,5,76,[19,217],78,5,77,[238],&quot;id=onetrust-consent-sdk&quot;,79,15,[19],&quot;Application Delivery Marketplace | OpenText&quot;,80,48,[19],&quot;\n  &quot;,81,48,80,[238],&quot;class=ux-spinner-outer&quot;,82,48,81,[19,217],83,50,[19,245],84,50,83,[238],&quot;class=uk-container uk-container-center uk-visible-large&quot;,85,50,84,[19,245],86,50,85,[238],&quot;class=uk-hidden-large&quot;,87,50,86,[19],&quot;\n\n\t\n\t\t\t\t\t\t&quot;,88,50,87,[238],&quot;id=sign-in-dropdown2&quot;,&quot;data-uk-dropdown={mode:&apos;click&apos;, boundary: &apos;body&apos;}&quot;,89,50,88,[19,245],90,50,89,[19,217],91,52,[19,20],92,52,91,[238],&quot;class=skeleton__navbar&quot;,93,52,92,[19,20],94,52,93,[238],&quot;class=skeleton__header appdelivery&quot;,95,52,94,[19,212],96,52,95,[238],&quot;class=skeleton__info_product&quot;,97,52,96,[19],&quot;\n                &quot;,98,52,97,[238],&quot;class=skeleton__products&quot;,99,52,98,[19,29],100,52,99,[238],&quot;class=skeleton__products second&quot;,101,52,100,[19,20],102,55,[19],&quot;\n\t\t&quot;,103,55,102,[238],&quot;class=d-unified-navigation-menu uk-grid&quot;,104,55,103,[19,245],105,57,[19,503],106,57,105,[238],&quot;class=uk-slidenav-position&quot;,&quot;data-uk-slideshow={autoplay:true}&quot;,107,57,106,[19,245],108,59,[19,503],109,59,108,[238],&quot;class=uk-container uk-container-center&quot;,110,59,109,[19,245],111,61,[19,503],112,61,111,[238,533],113,61,112,[19],&quot;\n        \t\t&quot;,114,61,113,[238],&quot;class=uk-modal join-modal&quot;,&quot;id=modal&quot;,115,61,114,[19,245],116,63,[19,503],117,63,116,[238,533],118,63,117,[19,245],119,65,[19,481],120,65,119,[238],&quot;class=uk-container uk-container-center uk-height-1-1&quot;,121,65,120,[19,212],122,67,[19,20],123,67,122,[238],&quot;class=uk-container uk-container-center uk-clearfix&quot;,124,67,123,[19],&quot;\n\n    &quot;,125,67,124,[238],&quot;id=accessManagerModal&quot;,&quot;class=uk-modal notifications-modal&quot;,126,67,125,[19,20],127,67,126,[238],&quot;id=legacyManagerModal&quot;,[601],128,67,127,[19,269],129,72,[19],&quot; ▪▪▪▪▪▪▪-▪▪▪-▫▫▫▫-▫-▫-▫▫▫▫ | Mon Jun ▫▫ ▫▫:▫▫:▫▫ PDT ▫▫▫▫ &quot;,130,74,[19,217],131,74,130,[19,217],132,74,131,[19],&quot;\n\n\n\n&quot;,133,74,132,[19],&quot;\n\n\n&quot;,134,75,[19,217],135,75,134,[196],&quot;type=text/css&quot;,&quot;#onetrust-pc-sdk #ot-pc-title {\n     font-size: 1em !important;\n     margin-bottom: 10px !important;\n     margin-top: 10px !important;\n   }\n  \n   #onetrust-pc-sdk #ot-category-title {\n     font-size: 1em !important;\n   }\n  \n   #onetrust-pc-sdk .ot-cat-header {\n     float: left !important;\n     font-weight: 600 !important;\n     font-size: .875em !important;  \n   }\n  \n  #onetrust-pc-sdk .ot-accordion-layout .ot-acc-grpdesc {\n     font-size: .812em !important;\n     margin-bottom: 10px !important;\n     margin-top: 15px !important; \n  }\n  \n  #onetrust-pc-sdk .ot-cat-item&gt;button[aria-expanded=true]~.ot-acc-txt, #onetrust-pc-sdk .ot-acc-cntr&gt;button[aria-expanded=true]~.ot-acc-txt, #onetrust-pc-sdk li&gt;button[aria-expanded=true]~.ot-acc-txt {\n      margin-top: 10px !important;\n      width: 100% !important;\n  }&quot;,136,78,[238],&quot;class=onetrust-pc-dark-filter ot-hide ot-fade-in&quot;,137,78,136,[238],&quot;id=onetrust-pc-sdk&quot;,&quot;class=otPcCenter ot-hide ot-fade-in ot-sdk-not-webkit otRelFont&quot;,[10],&quot;aria-label=Preference center&quot;,&quot;role=region&quot;,138,81,[19,245],139,81,138,[238],&quot;class=ux-spinner-container&quot;,140,81,139,[19,405],141,84,[19,503],142,84,141,[238],&quot;class=uk-grid&quot;,143,84,142,[19,245],144,86,[19],&quot;\n\t    &quot;,145,86,144,&quot;NAV&quot;,&quot;id=m-header&quot;,&quot;class=uk-navbar&quot;,146,86,145,[19],&quot;\n\n\t    \t    &quot;,147,86,146,[690],&quot;id=m-search&quot;,[692,264],148,86,147,[19],&quot;\n\n\t    &quot;,149,86,148,[690],&quot;id=m-menu&quot;,&quot;class=uk-navbar appdelivery&quot;,[264],150,86,149,[19,245],151,88,[19],&quot;\n\t\t\t\t\t\t\t&quot;,152,88,151,[238],&quot;id=sign-in-dd2&quot;,&quot;class=uk-dropdown sign-in&quot;,153,88,152,[19,245],154,92,[19,29],155,92,154,[238,533],156,92,155,[19,20],157,94,[19,29],158,94,157,[238],&quot;class=skeleton__header_nav_box appdelivery&quot;,159,94,158,[19,72],160,94,159,[238],&quot;class=skeleton__header_banner_box&quot;,161,94,160,[19,212],162,96,[19,212],163,96,162,[238],&quot;class=skeleton__info_product_inner&quot;,164,96,163,[19,29],165,98,[19,212],166,98,165,[238],&quot;class=skeleton__product&quot;,167,98,166,[19,212],168,98,167,[238,785],169,98,168,[19,212],170,98,169,[238,785],171,98,170,[19,212],172,98,171,[238,785],173,98,172,[19,29],174,100,[19,212],175,100,174,[238,785],176,100,175,[19,212],177,100,176,[238,785],178,100,177,[19,212],179,100,178,[238,785],180,100,179,[19,212],181,100,180,[238,785],182,100,181,[19,29],183,103,[19],&quot;\n\t\t\t&quot;,184,103,183,&quot;UL&quot;,&quot;class=d-navigation-links uk-width-1-1 uk-container uk-container-center&quot;,185,103,184,[19,852],186,103,185,[238],&quot;class=m-navigation&quot;,187,103,186,[19,852],188,103,187,[238],&quot;class=m-wrapper-nav&quot;,189,103,188,[19,503],190,106,[19,852],191,106,190,[856],&quot;class=uk-slideshow appdelivery&quot;,&quot;style=height: 350px;&quot;,192,106,191,[19],&quot;\n            \t\t\t\t&quot;,193,106,192,[856],&quot;class=uk-dotnav uk-dotnav-contrast uk-position-bottom uk-flex-center&quot;,&quot;style=display: flex;&quot;,194,106,193,[19],&quot;\n            \t\t&quot;,195,109,[19,852],196,109,195,[238],&quot;class=tab-wrapper uk-tab-center&quot;,197,109,196,[19],&quot;\n\n\t\t    \t\t\t\t\t\t\t\n\t\t\t&quot;,198,109,197,[856],&quot;id=switcher&quot;,&quot;class=uk-switcher uk-margin&quot;,199,109,198,[19,503],200,112,[19],&quot;\t\n\t\t\t&quot;,201,112,200,&quot;H2&quot;,202,112,201,[19],&quot;\t\t\t&quot;,203,112,202,[238],&quot;class=uk-grid uk-grid-divider uk-grid-large media-collection&quot;,&quot;data-uk-grid-match={target:&apos;.img-blk&apos;}&quot;,204,112,203,[19,503],205,114,[19,852],206,114,205,[238],&quot;class=uk-modal-dialog&quot;,207,114,206,[19,503],208,117,[19,852],209,117,208,[935],210,117,209,[19,852],211,117,210,&quot;H3&quot;,212,117,211,[19,852],213,117,212,[238],&quot;class=icons&quot;,214,117,213,[19],&quot;\n\n\t\t\t\t\t\t\t&quot;,215,117,214,[238],&quot;class=contribute-buttons appdelivery&quot;,216,117,215,[19],&quot;\n\t\t\t\n\t\t&quot;,217,120,[19,72],218,120,217,[238],&quot;class=uk-vertical-align uk-height-1-1&quot;,219,120,218,[19,481],220,123,[19,29],221,123,220,&quot;A&quot;,&quot;href=/marketplace/appdelivery&quot;,222,123,221,[19,29],223,123,222,[238],&quot;class=footer-links appdelivery&quot;,224,123,223,[19,503],225,123,224,[238],&quot;class=footer-copy&quot;,226,123,225,[19,20],227,125,[19,29],228,125,227,[238,958],229,125,228,[19,20],230,127,[19,29],231,127,230,[238,958],232,127,231,[19,20],233,137,[238],&quot;role=alertdialog&quot;,&quot;aria-modal=true&quot;,&quot;aria-describedby=ot-pc-desc&quot;,&quot;style=height: 100%;&quot;,&quot;aria-label=Privacy Preference Center&quot;,234,137,233,&quot;IFRAME&quot;,&quot;class=ot-text-resize&quot;,&quot;sandbox=allow-same-origin&quot;,&quot;style=position: absolute; top: -50000px; width: 100em;&quot;,&quot;aria-hidden=true&quot;,&quot;*O=true&quot;,235,139,[19],&quot;\n  \t\t&quot;,236,139,235,[238],&quot;class=ux-spinner ux-spinner-left&quot;,237,139,236,[19],&quot;\n   \t\t&quot;,238,139,237,[238],&quot;class=ux-spinner ux-spinner-right&quot;,239,139,238,[19,245],240,142,[19,852],241,142,240,[238],&quot;class=uk-width-large-3-10 uk-width-xlarge-4-10&quot;,242,142,241,[19],&quot;\n\n\t\t\t&quot;,243,142,242,[238],&quot;class=uk-width-large-7-10 uk-width-xlarge-6-10 &quot;,244,142,243,[19,503],245,145,[19,852],246,145,245,[238,533],247,145,246,[19,686],248,147,[19],&quot;\n\t        &quot;,249,147,248,[238,533],250,147,249,[19,686],251,149,[19,1142],252,149,251,[238,533],253,149,252,[19,686],254,152,[19],&quot;\n\t                            &quot;,255,152,254,&quot;SPAN&quot;,&quot;class=uk-dropdown-close uk-close&quot;,256,152,255,[19],&quot;\n\t\t\t\t\t\t\t\t&quot;,257,152,256,[238],&quot;class=sign-in-form&quot;,258,152,257,[19,503],259,155,[19,212],260,155,259,[238,678],261,155,260,[19,29],262,158,[19,212],263,158,262,[238],&quot;class=skeleton__headernav-text&quot;,264,158,263,[19,212],265,158,264,[238],&quot;class=skeleton__headernav-text &quot;,266,158,265,[19,212],267,158,266,[238,1212],268,158,267,[19,212],269,158,268,[238],&quot;class=skeleton__headernav-text active&quot;,270,158,269,[19,212],271,158,270,[238,1212],272,158,271,[19,212],273,158,272,[238,1203],274,158,273,[19,29],275,160,[19,481],276,160,275,[238],&quot;class=skeleton__header_welcome_inner welcome&quot;,277,160,276,[19,212],278,163,[19,481],279,163,278,[238],&quot;class=skeleton__product_info&quot;,280,163,279,[19,481],281,163,280,[238,1269],282,163,281,[19,481],283,163,282,[238,1269],284,163,283,[19,481],285,163,284,[238,1269],286,163,285,[19,481],287,163,286,[238,1269],288,163,287,[19,481],289,163,288,[238],&quot;class=skeleton__product_info browse-all&quot;,290,163,289,[19,212],291,184,[19],&quot;\n\t\t\t\t\t&quot;,292,184,291,&quot;LI&quot;,&quot;class=home-mktp&quot;,293,184,292,[19],&quot;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t&quot;,294,184,293,[1322],&quot;class=cyberres  primary-list &quot;,&quot;data-uk-dropdown= {mode:&apos;hover&apos;, remaintime: 500, pos:&apos;bottom-center&apos;} &quot;,295,184,294,[19],&quot;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t&quot;,296,184,295,[1322],&quot;class=itom  primary-list &quot;,&quot;data-uk-dropdown=&quot;,297,184,296,[19,1339],298,184,297,[1322],&quot;class=appdelivery bu-active primary-list &quot;,[1345],299,184,298,[19,1339],300,184,299,[1322],&quot;class=app-modernization  primary-list &quot;,[1345],301,184,300,[19,1339],302,184,301,[1322],&quot;class=opentext  primary-list  uk-hidden &quot;,[1345],303,184,302,[19,1339],304,184,303,[1322],&quot;class=education  primary-list &quot;,[1345],305,184,304,[19,1175],306,186,[19],&quot;\n\t\t\t\t&quot;,307,186,306,[238],&quot;class=sub-navigation appdelivery&quot;,308,186,307,[19,852],309,188,[19,1393],310,188,309,[856],&quot;class=m-navigation-links uk-width-1-1 uk-container uk-container-center&quot;,311,188,310,[19,852],312,191,[19],&quot;\n\t\t\t\t\t\t\t\t\t\t\t\t\t                                                                            \t\t\t\t\t\t&quot;,313,191,312,[1322],&quot;data-slideshow-slide=img&quot;,&quot;aria-hidden=false&quot;,&quot;class=uk-active&quot;,[888],314,191,313,[19],&quot;\n                                                                                \t\t\t\t\t\t&quot;,315,191,314,[1322,1423,1081,888],316,191,315,[19,1431],317,191,316,[1322,1423,1081,888],318,191,317,[19],&quot;\n                                    \t\t\t&quot;,319,193,[19],&quot;\n                    \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t                                                                        \t\t\t\t\t\t\t&quot;,320,193,319,[1322],&quot;data-uk-slideshow-item=0&quot;,[1425],321,193,320,[19],&quot;\n                                                                                                \t\t\t\t\t\t\t&quot;,322,193,321,[1322],&quot;data-uk-slideshow-item=1&quot;,323,193,322,[19,1463],324,193,323,[1322],&quot;data-uk-slideshow-item=2&quot;,325,193,324,[19],&quot;\n                                            \t\t\t\t&quot;,326,196,[19,1393],327,196,326,[856],&quot;class=uk-tab&quot;,&quot;data-uk-switcher={connect:&apos;#switcher&apos;}&quot;,328,196,327,[19,1393],329,196,328,[238],&quot;class=see-all-btn&quot;,330,196,329,[19,852],331,198,[19],&quot;\n\n\t\t\t\t\n\t\t\t\t\t&quot;,332,198,331,[1322],&quot;id=toprated-content&quot;,&quot;class=tab-content&quot;,[1081],333,198,332,[19],&quot;\n                \n                \t\t\t\t\t&quot;,334,198,333,[1322],&quot;id=featured-content&quot;,[1514,1081],335,198,334,[19],&quot;\n                \n\n                \t\t\t\t\t&quot;,336,198,335,[1322],&quot;id=newest-content&quot;,[1514,1081],337,198,336,[19,1520],338,198,337,[1322],&quot;id=popular-content&quot;,[1514,1081],339,198,338,[19],&quot;\n\t\t\t\t\n\t\t\t\t&quot;,340,198,339,[1322],&quot;id=categories-content&quot;,&quot;class=tab-content uk-active&quot;,[1424],341,198,340,[19,852],342,201,[19],&quot;News &amp; more&quot;,343,203,[19],&quot;\n                                                                                                                                                                                                                                                                                                                                                                            \t\t\t\t\t\t&quot;,344,203,343,[238],&quot;class=uk-width-medium-1-3 each-media&quot;,345,203,344,[19,1431],346,203,345,[238,1576],347,203,346,[19,1431],348,203,347,[238,1576],349,203,348,[19,1448],350,206,[19,1393],351,206,350,[1020],&quot;id=become-dev-close&quot;,&quot;class=uk-modal-close uk-close&quot;,&quot;aria-label=Close Modal&quot;,352,206,351,[19,1393],353,206,352,&quot;FORM&quot;,&quot;class=confirmation uk-form&quot;,&quot;id=og-ui-confirm-subscribe&quot;,&quot;accept-charset=UTF-8&quot;,354,206,353,[19,852],355,209,[19],&quot;Want to Contribute to the AppDelivery Marketplace?&quot;,356,211,[19],&quot;Sign up now, or contact us for more information.&quot;,357,213,[19,1393],358,213,357,[238],&quot;class=uk-width-2-3 uk-container-center&quot;,359,213,358,[19,852],360,215,[19],&quot;\n\t\t\t        \t\t\t\t&quot;,361,218,[19],&quot;\n                        &quot;,362,218,361,[238],&quot;class=uk-vertical-align-middle&quot;,363,218,362,[19,72],364,221,[19,212],365,221,364,[238],&quot;class=logo-mktp footer appdelivery&quot;,366,221,365,[19,29],367,223,[19,852],368,223,367,[856],&quot;class=uk-align-medium-left&quot;,369,223,368,[19,1118],370,223,369,[856],&quot;class=uk-align-medium-right&quot;,371,223,370,[19,29],372,225,[19],&quot;Copyright © ▫▫▫▫ Open Text Corporation. All rights reserved.&quot;,373,228,[19,212],374,228,373,[1020],&quot;id=accessManagerClose&quot;,[1605,1606],375,228,374,[19],&quot;\n\n            &quot;,376,228,375,&quot;H4&quot;,377,228,376,[19,212],378,228,377,&quot;P&quot;,379,228,378,[19,212],380,228,379,[238],&quot;class=modal-actions&quot;,381,228,380,[19,29],382,231,[19,212],383,231,382,[1020,1703,1605,1606],384,231,383,[19,212],385,231,384,[935],386,231,385,[19,212],387,231,386,[1614],&quot;action=/login&quot;,&quot;method=post&quot;,&quot;class=uk-form uk-form-stacked&quot;,388,231,387,[19,212],389,231,388,&quot;BR&quot;,390,231,389,[19,212],391,231,390,[1020],&quot;href=https://login.saas.microfocus.com/msg/actions/showForgotMyPassword.action&quot;,392,231,391,[19,212],393,231,392,[1768],394,231,393,[19,212],395,231,394,[1020],&quot;href=https://login.software.microfocus.com/msg/actions/showLogin&quot;,396,231,395,[19,29],397,233,[238],&quot;class=ot-pc-header&quot;,398,233,397,[238],&quot;id=ot-pc-content&quot;,&quot;class=ot-pc-scrollbar&quot;,399,233,398,[261],&quot;id=ot-pc-lst&quot;,&quot;class=ot-hide ot-hosts-ui ot-pc-scrollbar&quot;,400,233,399,[238],&quot;class=ot-pc-footer ot-pc-scrollbar&quot;,401,233,400,[1169],&quot;class=ot-scrn-rdr&quot;,&quot;aria-atomic=true&quot;,&quot;aria-live=polite&quot;,402,241,[19,1393],403,241,402,[238],&quot;class=logo-blk&quot;,&quot;style=&quot;,404,241,403,[19,852],405,243,[19],&quot;\n                \t\t\t\t\t&quot;,406,243,405,[856],&quot;class=primary-links appdelivery&quot;,407,243,406,[19,1552],408,243,407,[856],&quot;class=secondary-links&quot;,409,243,408,[19],&quot;\n\n\t\t\t    &quot;,410,243,409,[690],&quot;id=search&quot;,[692],411,243,410,[19,1118],412,246,[19,1393],413,246,412,[19,1393],414,246,413,[238],&quot;class=navbar-content&quot;,415,246,414,[19,852],416,249,[19],&quot;\n\t            &quot;,417,249,416,[238],&quot;class=search-blk&quot;,418,249,417,[19,1142],419,252,[19,1892],420,252,419,[856],421,252,420,[19,1142],422,257,[19,356],423,257,422,[935],424,257,423,[19],&quot;\n\t\t\t\t\t\t\t\t\t&quot;,425,257,424,[1721],&quot;id=username-label&quot;,426,257,425,[19,1924],427,257,426,[238,1760],&quot;style=margin-bottom: 5px&quot;,428,257,427,[19,1924],429,257,428,[238,1760],&quot;style=margin-bottom: 5px; display: none&quot;,&quot;id=pwdLoginDiv3&quot;,430,257,429,[19,1924],431,257,430,[238],&quot;id=loginerror-mobile&quot;,&quot;class=field-error&quot;,432,257,431,[19,1924],433,257,432,[1768],434,257,433,[19,1924],435,257,434,[238],&quot;class=uk-form-row uk-text-center header-submit-btn&quot;,436,257,435,[19,1924],437,257,436,[238,1975],438,257,437,[19],&quot;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t&quot;,439,257,438,[238],&quot;class=uk-form-row uk-form-stacked uk-text-center&quot;,&quot;id=iamloginDiv&quot;,440,257,439,[19,1924],441,257,440,[238],&quot;id=loading-mobile&quot;,[264],442,257,441,[19],&quot;\n\n                \t\t\t\t&quot;,443,257,442,[1614],&quot;id=smartLoginForm&quot;,&quot;action=/marketplace/smartlogin&quot;,[1759,1760],444,257,443,[19,1393],445,257,444,[238],&quot;class=sign-in-row&quot;,446,257,445,[19,723],447,260,[19,212],448,260,447,[238],&quot;class=skeleton__nav-item uk-width-large-3-10 uk-width-xlarge-4-10&quot;,449,260,448,[19],&quot;\n        \n            &quot;,450,260,449,[238],&quot;class=skeleton__nav-box uk-width-large-7-10 uk-width-xlarge-6-10&quot;,451,260,450,[19,29],452,263,[1020],453,265,[1020],454,267,[1020],455,269,[1020],456,271,[1020],457,273,[1020],458,276,[19,72],459,276,458,&quot;H1&quot;,460,276,459,[19,72],461,276,460,[238],&quot;class=search-blk action-btn&quot;,462,276,461,[19,72],463,276,462,[238],&quot;class=browse-products carousel-nav&quot;,464,276,463,[19,481],465,292,[19],&quot;\n\t\t\t\t\t\t&quot;,466,292,465,[1020],&quot;class=mktp-home&quot;,&quot;href=/marketplace/&quot;,467,292,466,[19,1318],468,294,[19],&quot;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t&quot;,469,294,468,[1020],&quot;class=cyberres dropdown-trigger&quot;,&quot;href=cybersecurity&quot;,470,294,469,[19],&quot;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t&quot;,471,294,470,[238],&quot;class=uk-dropdown cyberres&quot;,472,294,471,[19],&quot;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t&quot;,473,296,[19,2116],474,296,473,[1020],&quot;class=itom dropdown-trigger&quot;,&quot;href=itom&quot;,475,296,474,[19,2137],476,298,[19,2116],477,298,476,[1020],&quot;class=appdelivery dropdown-trigger&quot;,&quot;href=appdelivery&quot;,478,298,477,[19,2137],479,300,[19,2116],480,300,479,[1020],&quot;class=app-modernization dropdown-trigger&quot;,&quot;href=app-modernization&quot;,481,300,480,[19,2137],482,302,[19,2116],483,302,482,[1020],&quot;class=opentext dropdown-trigger&quot;,&quot;href=opentext&quot;,484,302,483,[19,2137],485,304,[19],&quot;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t&quot;,486,304,485,[1020],&quot;class=education&quot;,&quot;href=/marketplace/education/category/all&quot;,487,304,486,[19],&quot;\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t&quot;,488,307,[19,1318],489,307,488,[238],&quot;class=mktp-m-logo-l&quot;,490,307,489,[19,1318],491,307,490,[1169],&quot;class=m-logo-text&quot;,492,307,491,[19,1318],493,307,492,[238],&quot;class=mktp-m-logo-r&quot;,494,307,493,[19,1393],495,310,[19,2102],496,310,495,[1322,1323],497,310,496,[19],&quot;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t&quot;,498,310,497,[1322],&quot;class=cyberres &quot;,499,310,498,[19,2246],500,310,499,[1322],&quot;class=itom &quot;,501,310,500,[19,2246],502,310,501,[1322],&quot;class=appdelivery uk-hidden&quot;,503,310,502,[19,2246],504,310,503,[1322],&quot;class=app-modernization &quot;,505,310,504,[19,2246],506,310,505,[1322],&quot;class=opentext &quot;,507,310,506,[19,2246],508,310,507,[1322],&quot;class=education &quot;,509,310,508,[19],&quot;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t&quot;,510,310,509,[1322],511,310,510,[19],&quot;\n\t\t\t\t\t\t\t\t\t\t\t\t\t&quot;,512,310,511,[1322],513,310,512,[19,2310],514,310,513,[1322],515,310,514,[19,2310],516,310,515,[1322],517,310,516,[19],&quot;\n\t\t\t\t\t\t\t\t\t\t&quot;,518,313,[238],&quot;class=uk-cover-background uk-position-cover&quot;,&quot;style=background-image: url(\&quot;https://d3075pyijv0bbs.cloudfront.net/marketplace_5/banners/131654958fa28c1f7bc5bd3333eda0288f9d238b.jpeg\&quot;);&quot;,519,313,518,[19,723],520,313,519,&quot;IMG&quot;,&quot;src=https://d3075pyijv0bbs.cloudfront.net/marketplace_5/banners/131654958fa28c1f7bc5bd3333eda0288f9d238b.jpeg&quot;,&quot;style=width: 100%; height: auto; opacity: 0;&quot;,521,313,520,[19,723],522,313,521,[238],&quot;class=uk-overlay-panel uk-overlay-background uk-overlay-fade uk-flex uk-flex-middle uk-flex-left&quot;,523,313,522,[19,723],524,313,523,[238],&quot;class=uk-overlay-panel uk-overlay-fade uk-flex uk-flex-middle uk-flex-left&quot;,525,313,524,[19,2102],526,315,[238,2339],&quot;style=background-image: url(\&quot;https://d3075pyijv0bbs.cloudfront.net/marketplace_5/banners/79ce76d0bf20b5ce44efc7af21e236892e84b4f4.jpg\&quot;);&quot;,527,315,526,[19,723],528,315,527,[2348],&quot;src=https://d3075pyijv0bbs.cloudfront.net/marketplace_5/banners/79ce76d0bf20b5ce44efc7af21e236892e84b4f4.jpg&quot;,[2350],529,315,528,[19,723],530,315,529,[238,2359],531,315,530,[19,723],532,315,531,[238,2368],533,315,532,[19,2102],534,317,[238,2339],&quot;style=background-image: url(\&quot;https://d3075pyijv0bbs.cloudfront.net/marketplace_5/banners/1de8e1ff0201dc11f8f7df1aaa22f0231d3b4a9b.jpg\&quot;);&quot;,535,317,534,[19,723],536,317,535,[2348],&quot;src=https://d3075pyijv0bbs.cloudfront.net/marketplace_5/banners/1de8e1ff0201dc11f8f7df1aaa22f0231d3b4a9b.jpg&quot;,[2350],537,317,536,[19,723],538,317,537,[238,2359],539,317,538,[19,723],540,317,539,[238,2368],541,317,540,[19,2102],542,320,[1020],&quot;href=&quot;,&quot;class=bannernav1&quot;,&quot;aria-label=banner1&quot;,543,322,[1020,2444],&quot;class=bannernav2&quot;,&quot;aria-label=banner2&quot;,544,324,[1020,2444],&quot;class=bannernav3&quot;,&quot;aria-label=banner3&quot;,545,327,[19],&quot;\n                     &quot;,546,327,545,[19],&quot;\n                        \n\t\t\t\t\t\t                            \t\t\t\t\t\t\t\t&quot;,547,327,546,[1322],&quot;id=toprated&quot;,&quot;class=homepage-tab&quot;,&quot;aria-expanded=false&quot;,548,327,547,[19],&quot;\n                                                                                                        \t\t\t\t\t\t\t\t&quot;,549,327,548,[1322],&quot;id=featured&quot;,[2471,2472],550,327,549,[19,2477],551,327,550,[1322],&quot;id=newest&quot;,[2471,2472],552,327,551,[19,2477],553,327,552,[1322],&quot;id=popular&quot;,[2471,2472],554,327,553,[19],&quot;\n                                                                            \t\t\t\t\t\t\t&quot;,555,327,554,[1322],&quot;id=categories&quot;,&quot;class=homepage-tab uk-active&quot;,&quot;aria-expanded=true&quot;,556,327,555,[19],&quot;\n                                            \t\t\t\t\t\t\t\t\t&quot;,557,329,[19,1318],558,329,557,[1020],&quot;class=uk-button uk-button-primary&quot;,&quot;href=/marketplace/appdelivery/category/all&quot;,559,329,558,[19,1393],560,332,[19,2102],561,332,560,[19,2102],562,332,561,[238],&quot;class=app-collection&quot;,563,332,562,[19],&quot;\n\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t&quot;,564,334,[19,2102],565,334,564,[19,2102],566,334,565,[238,2545],567,334,566,[19,2550],568,336,[19,2102],569,336,568,[19,2102],570,336,569,[238,2545],571,336,570,[19,2127],572,338,[19,2102],573,338,572,[19,2102],574,338,573,[238,2545],575,338,574,[19,2550],576,340,[19,1318],577,340,576,[19,1318],578,340,577,[238],&quot;class=category-collection&quot;,579,340,578,[19,1393],580,344,[19,723],581,344,580,[238],&quot;class=img-blk&quot;,&quot;style=min-height: 0px;&quot;,582,344,581,[19,723],583,344,582,[977],584,344,583,[19,723],585,344,584,[1721],586,344,585,[19],&quot;\n                            \t\t\t\t\t\t\t\t&quot;,587,344,586,[1020],&quot;href=https://software.microfocus.com/en-us/solutions/app-dev-test-delivery&quot;,&quot;target=_blank&quot;,588,344,587,[19],&quot;\n                            \t\t\t\t\t\t&quot;,589,346,[19,723],590,346,589,[238,2619,2620],591,346,590,[19,723],592,346,591,[977],593,346,592,[19,723],594,346,593,[1721],595,346,594,[19,2641],596,346,595,[1020,2646,2647],597,346,596,[19,2652],598,348,[19,723],599,348,598,[238,2619,2620],600,348,599,[19,723],601,348,600,[977],602,348,601,[19,723],603,348,602,[1721],604,348,603,[19,2641],605,348,604,[1020,2646,2647],606,348,605,[19,2652],607,353,[19,1318],608,353,607,[238],609,353,608,[19,1393],610,358,[19,1318],611,358,610,[238],&quot;class=uk-grid uk-grid-width-large-1-3 uk-grid-width-medium-1-3&quot;,612,358,611,[19,1393],613,362,[19,58],614,362,613,[238],&quot;class=page-title&quot;,615,362,614,[19,58],616,362,615,[1721],617,362,616,[19,1649],618,365,[19],&quot;\n                AppDelivery &quot;,619,365,618,[1169],620,365,619,[19,212],621,368,[19,1175],622,368,621,[1322],623,368,622,[19,1393],624,368,623,[1322],625,368,624,[19,356],626,368,625,[1322],627,368,626,[19,72],628,368,627,[1322],629,368,628,[19],&quot;\n                \t\t\t&quot;,630,370,[19,1393],631,370,630,[1322],632,370,631,[19,1393],633,370,632,[1322],634,370,633,[19,481],635,370,634,[1322],636,370,635,[19,212],637,376,&quot;STRONG&quot;,638,376,637,[19],&quot; You need to migrate your account before you can continue&quot;,639,378,[19],&quot;You are currently using a &quot;,640,378,639,[2843],641,378,640,[19],&quot; type account to access Marketplace. Starting February ▫▫, ▫▫▫▫, Software Passport accounts are no longer supported by Micro Focus. You will need to create a new Access Manager account or migrate your Software Passport account to an Access Manager type account. \n            &quot;,642,378,641,[1768],643,378,642,[19,212],644,378,643,[1768],645,378,644,[19,212],646,378,645,[2843],647,378,646,[19,212],648,378,647,[1768],649,378,648,[19],&quot;\n            Follow the link below to create a new Access Manager account. There will be instructions how to migrate your existing account information to the new Access Manager type account. Once complete, you will be re-directed back to Marketplace where you will be able to login using your new Access Manager account.\n            &quot;,650,380,[19,481],651,380,650,[1020],&quot;id=createAccountButton&quot;,&quot;class=uk-button create uk-button-primary&quot;,&quot;href=https://my.microfocus.com/signup?referrer=marketplace&quot;,652,380,651,[19,481],653,380,652,[1020],&quot;id=loginWithAM&quot;,[2903],654,380,653,[19],&quot;\n                  &quot;,655,380,654,[1020],&quot;id=accessManagerClose2&quot;,&quot;class=uk-vertical-align-middle uk-modal-close&quot;,&quot;onclick={this.handleCloseModal}&quot;,656,380,655,[19,212],657,385,[2843],658,387,[19,481],659,387,658,[238],&quot;classname=uk-form-row&quot;,660,387,659,[19,328],661,387,660,&quot;BUTTON&quot;,&quot;type=submit&quot;,[2528],662,387,661,[19,1709],663,391,[19],&quot;Forgot password?&quot;,664,395,[19],&quot;Sign\n            in with corporate credentials&quot;,665,397,[238],&quot;class=ot-pc-logo&quot;,&quot;role=img&quot;,&quot;aria-label=Company Logo&quot;,666,397,665,[2949],&quot;id=close-pc-btn-handler&quot;,&quot;class=ot-close-icon&quot;,&quot;aria-label=Close&quot;,&quot;style=background-image: url(\&quot;https://cdn.cookielaw.org/logos/static/ot_close.svg\&quot;);&quot;,667,398,[238],&quot;class=ot-optout-signal ot-hide&quot;,668,398,667,[935],&quot;id=ot-pc-title&quot;,669,398,668,[238],&quot;id=ot-pc-desc&quot;,670,398,669,[2949],&quot;id=accept-recommended-btn-handler&quot;,671,398,670,[261],&quot;class=ot-sdk-row ot-cat-grp&quot;,672,399,[238],&quot;id=ot-pc-hdr&quot;,673,399,672,[261],&quot;id=ot-lst-cnt&quot;,&quot;class=ot-host-cnt ot-pc-scrollbar&quot;,674,400,[238],&quot;class=ot-btn-container&quot;,675,400,674,[238],&quot;class=ot-pc-footer-logo&quot;,676,234,&quot;iframe:HTML&quot;,677,403,[19,72],678,403,677,[1020],&quot;class=logo-mf&quot;,&quot;href=https://www.opentext.com/&quot;,&quot;target=&quot;,679,403,678,[19],&quot;\n\t\t\t\t\t\t\t\t\t\t\t&quot;,680,403,679,[1020],&quot;class=mktp-logo&quot;,[1021],681,403,680,[19,1924],682,406,[19,1520],683,406,682,[1322],684,406,683,[19],&quot;\n                \n\t\t\t\t\t&quot;,685,406,684,[1322],686,406,685,[19],&quot;\n                    \t\t\t\t\t\t&quot;,687,406,686,[1322],688,406,687,[19,1924],689,408,[19,2137],690,408,689,[1322],691,408,690,[19,1318],692,408,691,[1322],693,408,692,[19,1393],694,410,[19],&quot;\n\t\t\t        &quot;,695,410,694,[238,1897],696,410,695,[19],&quot;\n\t\t\t    &quot;,697,414,[19,1318],698,414,697,[238],&quot;class=nav-trigger&quot;,699,414,698,[19,1318],700,414,699,[238],&quot;class=search-trigger&quot;,[252],701,414,700,[19,1318],702,414,701,[238,1834],703,414,702,[19,1393],704,417,[19],&quot;\n\t                &quot;,705,417,704,[238,1897],&quot;novalidate=&quot;,&quot;action=/marketplace/appdelivery/search&quot;,&quot;method=GET&quot;,706,417,705,[19,1892],707,420,[19,3143],708,420,707,[1322],709,420,708,[19,1318],710,420,709,[1322],&quot;id=m-dashboard-all&quot;,&quot;class=edu-show&quot;,711,420,710,[19,3143],712,420,711,[1322],713,420,712,[19],&quot;\n\t                \t                &quot;,714,420,713,[1322,3171],715,420,714,[19,1318],716,420,715,[1322],&quot;id=user-mobile-profile&quot;,[3171],717,420,716,[19,1318],718,420,717,[1322],&quot;id=user-mobile-sign-out&quot;,[3171],719,420,718,[19,3143],720,420,719,[1322],&quot;id=guest-mobile-sign-in&quot;,&quot;class=edu-show uk-hidden&quot;,721,420,720,[19,3143],722,420,721,[1322],&quot;id=guest-mobile-sign-up&quot;,[3218],723,420,722,[19,1892],724,423,[19],&quot;Sign in&quot;,725,425,[19],&quot;Username&quot;,726,427,[19,2335],727,427,726,[238],&quot;class=uk-width-1-1&quot;,728,427,727,[19,1924],729,429,[19,2335],730,429,729,[1721],&quot;id=password-label&quot;,731,429,730,[19,3038],732,429,731,[238,3248],733,429,732,[19,1924],734,431,[19,1924],735,435,[19,2335],736,435,735,&quot;INPUT&quot;,&quot;type=hidden&quot;,&quot;name=_csrf_token&quot;,&quot;value=••••&quot;,737,435,736,[19,2335],738,435,737,[2949],&quot;class=uk-button uk-button-primary uk-width-1-1&quot;,&quot;id=loadSamlIframeBtnId3&quot;,739,435,738,[19,1924],740,437,[19,2335],741,437,740,[2949,3294],&quot;id=submitSmartLoginId3&quot;,&quot;style=display: none&quot;,742,437,741,[19,1924],743,439,[19,2335],744,439,743,[1020],&quot;href=/marketplace/ot/login&quot;,745,439,744,[19,2335],746,439,745,[1169],&quot;data-uk-tooltip={pos:&apos;bottom-right&apos;, offset: 5}&quot;,&quot;class=hpp-tooltip&quot;,747,439,746,[19,356],748,441,[19,3038],749,441,748,[238,410],750,441,749,[19,1924],751,443,[19],&quot;\n                                                                                                                                                                                                                                                                    \n                                                                                                                                                                                                                                                                                                            \n                                                                                                    \t\t\t\t\t\t&quot;,752,443,751,[3282],&quot;id=returnUrl3&quot;,[3283],&quot;name=returnUrl&quot;,[3285],753,443,752,[19],&quot;\n                                                                                \t\t\t\t\t&quot;,754,443,753,[238],&quot;class=uk-form-row uk-text-center forgot-password uk-hidden&quot;,755,443,754,[19,1393],756,445,[19],&quot;\n\t\t\t\t\tDon&apos;t have an account? &quot;,757,445,756,[1020],&quot;href=/marketplace/appdelivery/signup&quot;,758,445,757,[19,1393],759,448,[19,481],760,448,759,[238,1834],761,448,760,[19,212],762,450,[19,481],763,450,762,[238],&quot;class=s-primary-links&quot;,764,450,763,[19,481],765,450,764,[238],&quot;class=s-secondary-links&quot;,766,450,765,[19,212],767,452,[19],&quot; &quot;,768,453,[19,3420],769,454,[19,3420],770,455,[19,3420],771,456,[19,3420],772,457,[19,3420],773,459,[19,1649],774,459,773,[1169,240],775,459,774,[19,1649],776,459,775,[1169],777,459,776,[19,1649],778,459,777,[1169],779,459,778,[19,72],780,461,[19,3420],781,463,[19,3420],782,466,[19],&quot;Marketplace Home&quot;,783,469,[19,1924],784,469,783,[238,2212],785,469,784,[19],&quot;Cybersecurity\n\t\t\t\t\t\t\t\t\t&quot;,786,469,785,[238,2230],787,469,786,[19],&quot; \n\t\t\t\t\t\t\t\t&quot;,788,471,[19,2335],789,471,788,[856],&quot;class=mktp-dropdown-menu&quot;,790,471,789,[19,1924],791,474,[19,1924],792,474,791,[238,2212],793,474,792,[19],&quot;ITOM\n\t\t\t\t\t\t\t\t\t&quot;,794,474,793,[238,2230],795,474,794,[19,3493],796,477,[19,1924],797,477,796,[238,2212],798,477,797,[19],&quot;AppDelivery\n\t\t\t\t\t\t\t\t\t&quot;,799,477,798,[238,2230],800,477,799,[19,3493],801,480,[19,1924],802,480,801,[238,2212],803,480,802,[19],&quot;AMC\n\t\t\t\t\t\t\t\t\t&quot;,804,480,803,[238,2230],805,480,804,[19,3493],806,483,[19,1924],807,483,806,[238,2212],808,483,807,[19],&quot;OpenText\n\t\t\t\t\t\t\t\t\t&quot;,809,483,808,[238,2230],810,483,809,[19,3493],811,486,[19,1175],812,486,811,[238,2212],813,486,812,[19],&quot; \n\t\t\t\t\t\t\t\t\tEducation Central\n\t\t\t\t\t\t\t\t&quot;,814,486,813,[238,2230],815,486,814,[19,723],816,491,[19],&quot;\n\t\t\t\t\t\t\tAppDelivery &quot;,817,491,816,&quot;I&quot;,&quot;class=arrow-down&quot;,818,491,817,[19,1318],819,496,[19,723],820,496,819,[1020,2107,2108],821,496,820,[19,2102],822,498,[19,2127],823,498,822,[1020],&quot;class=cyberres&quot;,&quot;href=cyberres&quot;,824,498,823,[19],&quot;\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t&quot;,825,500,[19,2127],826,500,825,[1020],&quot;class=itom&quot;,[2146],827,500,826,[19,3643],828,502,[19,2127],829,502,828,[1020],&quot;class=appdelivery&quot;,[2159],830,502,829,[19,3643],831,504,[19,2127],832,504,831,[1020],&quot;class=app-modernization&quot;,[2172],833,504,832,[19,3643],834,506,[19,2127],835,506,834,[1020],&quot;class=opentext&quot;,[2185],836,506,835,[19,3643],837,508,[19],&quot;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t&quot;,838,508,837,[1020,2198,2199],839,508,838,[19,3643],840,510,[19,1175],841,510,840,[1020],&quot;class=arcsight&quot;,&quot;href=/marketplace/cybersecurity/category/arcsight&quot;,842,510,841,[19,723],843,512,[19,1175],844,512,843,[1020],&quot;class=fortify&quot;,&quot;href=/marketplace/cybersecurity/category/fortify&quot;,845,512,844,[19,723],846,514,[19,1175],847,514,846,[1020],&quot;class=netiq&quot;,&quot;href=/marketplace/cybersecurity/category/netiq&quot;,848,514,847,[19,723],849,516,[19,1175],850,516,849,[1020],&quot;class=sentinel&quot;,&quot;href=/marketplace/cybersecurity/category/sentinel&quot;,851,516,850,[19,723],852,522,[19,723],853,524,[19,1175],854,524,853,[238],&quot;class=uk-container uk-container-center &quot;,855,524,854,[19,991],856,530,[19,723],857,532,[19,1175],858,532,857,[238,3770],859,532,858,[19,991],860,538,[19,723],861,540,[19,1175],862,540,861,[238,3770],863,540,862,[19,991],864,547,[1020,2444],865,549,[1020,2444],866,551,[1020,2444],867,553,[1020,2444],868,555,[1020,2444],869,558,[19],&quot;Browse all&quot;,870,562,[19,991],871,562,870,[238],&quot;id=toprated-apps&quot;,&quot;class=uk-grid uk-grid-match bu-carousel owl-carousel owl-theme owl-loaded owl-drag&quot;,&quot;data-uk-grid-match={target:&apos;.each-app&apos;}&quot;,872,562,871,[19],&quot;\n\n\t\t\t\t\t\t&quot;,873,566,[19,991],874,566,873,[238],&quot;id=featured-apps&quot;,[3830,3831],875,566,874,[19,3836],876,570,[19,991],877,570,876,[238],&quot;id=newest-apps&quot;,[3830,3831],878,570,877,[19,3836],879,574,[19,723],880,574,879,[238],&quot;id=popular-apps&quot;,&quot;class=uk-grid bu-carousel owl-carousel owl-theme owl-loaded uk-grid-match owl-drag&quot;,[3831],881,574,880,[19,3836],882,578,[19,2102],883,578,882,[238],&quot;class=uk-grid uk-grid-width-large-1-5 uk-grid-width-medium-1-4 uk-grid-width-small-1-2&quot;,&quot;data-uk-grid-match={target:&apos;.cat-name&apos;}&quot;,884,578,883,[19,1318],885,581,[19,2116],886,583,[19],&quot;Deliver Across Multiple Devices/OS&quot;,887,585,[19],&quot;Without compromising time to market.&quot;,888,587,[1169],&quot;class=arrow-bg&quot;,889,587,888,[19],&quot;Learn more&quot;,890,590,[19,2116],891,592,[19],&quot;Deliver High Quality User Experiences&quot;,892,594,[19],&quot;That scale, perform &amp; are secure.&quot;,893,596,[1169,3904],894,596,893,[19,3909],895,599,[19,2116],896,601,[19],&quot;Accelerate Application Delivery With Dev Ops&quot;,897,603,[19],&quot;And truly leverage the power of big data.&quot;,898,605,[1169,3904],899,605,898,[19,3909],900,608,[19,2102],901,608,900,[238],&quot;class=modal-header&quot;,902,608,901,[19,2102],903,608,902,[1721],904,608,903,[19,2102],905,608,904,[1768],906,608,905,[19,3836],907,608,906,[238],&quot;id=becomeDevFormContent&quot;,908,608,907,[19,3836],909,608,908,[1768],910,608,909,[19,2102],911,608,910,[2949],&quot;type=button&quot;,&quot;id=becomeDevSubmit&quot;,[2528],912,608,911,[19,2102],913,608,912,[1020],&quot;id=cancel-btn&quot;,&quot;class=uk-float-right modal-secondary&quot;,914,608,913,[19,1318],915,611,[19],&quot;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t&quot;,916,611,915,[238],&quot;class=uk-width-large-1-3&quot;,917,611,916,[19,1339],918,611,917,[238,4020],919,611,918,[19,1339],920,611,919,[238,4020],921,611,920,[19,1988],922,614,[19],&quot;Your browser is not supported!&quot;,923,616,[19],&quot;Please upgrade to one of the following broswers: Internet Explorer ▫▫ (or greater) or the latest version of Chrome or Firefox&quot;,924,619,[19],&quot;Marketplace&quot;,925,622,[1020,2529],926,624,[1020],&quot;href=/marketplace/appdelivery/contact&quot;,927,626,[1020],&quot;href=https://community.microfocus.com/ot-marketplace/&quot;,[2647],928,628,[1020],&quot;href=https://my.microfocus.com&quot;,[2647],929,631,[1020],&quot;href=https://www.opentext.com/about/privacy&quot;,[2647],930,633,[1020],&quot;href=https://www.microfocus.com/about/legal/#marketplace_terms_of_service&quot;,[2647],931,635,[1020],&quot;href=#&quot;,&quot;class=ot-sdk-show-settings&quot;,932,637,[19],&quot;Notice:&quot;,933,640,[19],&quot;Software Passport&quot;,934,646,[19],&quot;How do I migrate to Access Manager?&quot;,935,651,[19],&quot;Create new account&quot;,936,653,[19],&quot;Login with Access Manager&quot;,937,655,[19],&quot;Cancel&quot;,938,657,[19],&quot;MyAccount sign in:&quot;,939,659,[19,72],940,659,939,[238],&quot;classname=uk-grid&quot;,941,659,940,[19,212],942,661,[19,3236],943,665,[2348],&quot;src=https://cdn.cookielaw.org/logos/b22adc29-a371-4aaa-a82b-043f0024fdb4/4a759162-9294-48ee-a8f5-36a1052d2bf7/7d5b66ec-4ffd-45f7-80d2-e68fac9b2e03/opentext-logo-cookie.jpeg&quot;,944,667,[238],&quot;class=ot-optout-icon&quot;,945,667,944,[1169],946,668,[19],&quot;Privacy Preference Center&quot;,947,669,[19],&quot;When you visit any website, it may store or retrieve information on your browser, mostly in the form of cookies. This information might be about you, your preferences or your device and is mostly used to make the site work as you expect it to. The information does not usually directly identify you, but it can give you a more personalized web experience. Because we respect your right to privacy, you can choose not to allow some types of cookies. Click on the different category headings to find out more and change our default settings. However, blocking some types of cookies may impact your experience of the site and the services we are able to offer.\nBy clicking \&quot;Reject All\&quot;, all cookie categories will be disabled, except for the Strictly necessary cookies.\n            &quot;,948,669,947,[1768],949,669,948,[1020],&quot;href=https://www.opentext.com/about/cookie-policy&quot;,&quot;class=privacy-notice-link&quot;,&quot;rel=noopener&quot;,[2647],&quot;aria-label=Read our Cookie Policy, opens in a new tab&quot;,950,670,[19],&quot;Accept All&quot;,951,671,[977],&quot;id=ot-category-title&quot;,952,671,951,[238],&quot;class=ot-accordion-layout ot-cat-item ot-vs-config&quot;,&quot;data-optanongroupid=C0001&quot;,953,671,952,[238,4173],&quot;data-optanongroupid=C0002&quot;,954,671,953,[238,4173],&quot;data-optanongroupid=C0003&quot;,955,671,954,[238,4173],&quot;data-optanongroupid=C0004&quot;,956,671,955,[238,4173],&quot;data-optanongroupid=C0005&quot;,957,672,[238],&quot;id=ot-lst-title&quot;,958,672,957,[238],&quot;class=ot-lst-subhdr&quot;,959,673,[238],&quot;id=ot-sel-blk&quot;,960,673,959,[238],&quot;class=ot-sdk-row&quot;,961,674,[2949],&quot;class=ot-pc-refuse-all-handler&quot;,962,674,961,[19],&quot; &quot;,963,674,962,[2949],&quot;class=save-preference-btn-handler onetrust-close-btn-handler&quot;,964,675,[1020],&quot;href=https://www.onetrust.com/products/cookie-consent/&quot;,[2647],&quot;rel=noopener noreferrer&quot;,&quot;aria-label=Powered by OneTrust Opens in a new Tab&quot;,965,676,[14],&quot;*B=about://blank&quot;,966,676,965,[24],967,678,[19,1649],968,678,967,[2348],&quot;src=https://d3075pyijv0bbs.cloudfront.net/opentext_logo.svg&quot;,&quot;loading=lazy&quot;,969,678,968,[19,72],970,680,[19,723],971,680,970,[2076],&quot;class=logo-mktp appdelivery&quot;,972,680,971,[19,2102],973,683,[19,2102],974,683,973,[238],&quot;data-uk-dropdown={mode:&apos;hover&apos;, remaintime: 200}&quot;,975,683,974,[19,1318],976,685,[19,2102],977,685,976,[238],&quot;id=member-db&quot;,&quot;class=&quot;,978,685,977,[19,2102],979,685,978,[238],&quot;id=guest-db&quot;,[4274,240],980,685,979,[19],&quot;\t\t\t\t\t\t\n\t\t\t\t\t&quot;,981,687,[1020],&quot;href=/marketplace/appdelivery/join&quot;,982,690,[19,2102],983,690,982,[238],984,690,983,[19,1318],985,692,[19,2102],986,692,985,[238],&quot;id=sign-in-dropdown&quot;,&quot;data-uk-dropdown={mode:&apos;click&apos;}&quot;,987,692,986,[19],&quot;\n\n\n\n\n\t\t\t\t\t&quot;,988,695,[19],&quot;\n\t\t\t            &quot;,989,695,988,[238,1897,3148,3149,3150],990,695,989,[19,3100],991,698,[19,2102],992,698,991,[1020],&quot;id=nav-icon&quot;,&quot;class=visible-xs visible-sm pull-right uk-float-right&quot;,&quot;href=javascript:void(0)&quot;,&quot;aria-label=Menu&quot;,993,698,992,[19,1318],994,700,[19,2102],995,700,994,&quot;svg:svg&quot;,&quot;version=1.1&quot;,&quot;id=Layer_1&quot;,&quot;xmlns=http://www.w3.org/2000/svg&quot;,&quot;xmlns:xlink=http://www.w3.org/1999/xlink&quot;,&quot;x=0px&quot;,&quot;y=0px&quot;,&quot;viewBox=0 0 21 21&quot;,&quot;enable-background=new 0 0 21 21&quot;,&quot;xml:space=preserve&quot;,&quot;width=20px&quot;,&quot;height=20px&quot;,996,700,995,[19,1318],997,702,[19,2102],998,702,997,[1020],&quot;href=/appdelivery&quot;,999,702,998,[19,1318],1000,705,[19,2102],1001,705,1000,&quot;LABEL&quot;,&quot;for=q-mobile&quot;,[240],1002,705,1001,[19],&quot;\n\t                    &quot;,1003,705,1002,[3282],&quot;type=text&quot;,&quot;autocomplete=off&quot;,&quot;placeholder=•••••• •••• •• •• ••••••••••&quot;,&quot;value=&quot;,&quot;name=q&quot;,&quot;id=q-mobile&quot;,&quot;ng-model=searchString&quot;,&quot;aria-label=Search Apps or by Product&quot;,1004,705,1003,[19,4406],1005,705,1004,[2949,2950,2444,2528],&quot;aria-label=Search&quot;,1006,705,1005,[19,3143],1007,708,[1020,2529],&quot;target=_self&quot;,1008,710,[19,2102],1009,710,1008,[238],&quot;id=member-mobile-db&quot;,[4287],1010,710,1009,[19],&quot;\n\t\t                &quot;,1011,710,1010,[1020],&quot;id=guest-mobile-db&quot;,&quot;class=dashboard-login uk-hidden&quot;,[4435],1012,710,1011,[19],&quot;\n\t\t            &quot;,1013,712,[1020,4306,4435],1014,714,[1020,4059,4435],1015,716,[1020],&quot;href=/marketplace/appdelivery/dashboard/profile&quot;,[4435],1016,718,[1020],&quot;id=mobile-signout&quot;,[4435],1017,720,[19,2102],1018,720,1017,[1020],&quot;id=guest-welcome2&quot;,1019,720,1018,[19],&quot;\n\n\t                &quot;,1020,722,[1020,3380,4435],1021,727,[19,3038],1022,727,1021,[19,3038],1023,727,1022,[3282,4411],&quot;id=username3&quot;,&quot;name=_username3&quot;,[3248],&quot;placeholder=••••••••&quot;,&quot;autofocus=&quot;,&quot;aria-labelledby=username-label&quot;,1024,727,1023,[19],&quot;\n\n\t\t\t\t\t\t\t\t\t\t\t&quot;,1025,727,1024,[1721,1958],1026,727,1025,[19,2335],1027,730,[19],&quot;Password&quot;,1028,732,[19],&quot;\n\t\t\t\t\t\t\t\t\t\t\t\t&quot;,1029,732,1028,[19,4531],1030,732,1029,[3282],&quot;type=password&quot;,&quot;id=password3&quot;,&quot;name=_password3&quot;,&quot;class=uk-width-1-1 &quot;,&quot;placeholder=Password&quot;,&quot;style=display: block&quot;,&quot;aria-labelledby=password-label&quot;,1031,732,1030,[19,4531],1032,732,1031,[1721,1958],1033,732,1032,[19,3038],1034,738,[19],&quot;Next&quot;,1035,741,[19],&quot;Sign In&quot;,1036,744,[19],&quot;OpenText employee login&quot;,1037,746,[3613],&quot;class=icon-tooltip-info&quot;,1038,749,[19,4531],1039,749,1038,[238,666],1040,749,1039,[19,3038],-1041,754,[19,2102],1042,754,1041,[1020],&quot;id=b-forgot-password&quot;,[1777],-1043,754,1042,[19,1318],1044,757,[19],&quot;Sign up here&quot;,1045,760,[19],&quot;\n                                             &quot;,1046,760,1045,[1020],&quot;class=logo&quot;,[3032,3033],1047,760,1046,[19,1649],1048,760,1047,[1020,3043,2108],1049,760,1048,[19,481],1050,763,[19],&quot;\n                                            &quot;,1051,763,1050,[238],&quot;class=skeleton__nav-text&quot;,1052,763,1051,[19,1649],1053,763,1052,[238,4633],1054,763,1053,[19,1649],1055,763,1054,[238,4633],1056,763,1055,[19,1649],1057,763,1056,[238],&quot;class=skeleton__nav-text search-bar&quot;,1058,763,1057,[19,356],1059,765,[19,4628],1060,765,1059,[238,4633],1061,765,1060,[19,1649],1062,765,1061,[238,4633],1063,765,1062,[19,1649],1064,765,1063,[238,4633],1065,765,1064,[19,356],1066,774,[19],&quot;▫&quot;,1067,776,[19,3420],1068,778,[19,3420],1069,784,[19,1924],1070,789,[19],&quot;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t&quot;,1071,789,1070,[1322],1072,789,1071,[19,4706],1073,789,1072,[1322],1074,789,1073,[19,4706],1075,789,1074,[1322],1076,789,1075,[19,4706],1077,789,1076,[1322],1078,789,1077,[19,2137],1079,792,[19,1924],1080,797,[19,1924],1081,802,[19,1924],1082,807,[19,1924],1083,817,[19,3420],1084,820,[19,3472],1085,823,[19],&quot;\n\t\t\t\t\t\t\t\t\t\tCyberRes\n\t\t\t\t\t\t\t\t\t&quot;,1086,826,[19],&quot;\n\t\t\t\t\t\t\t\t\t\tITOM\n\t\t\t\t\t\t\t\t\t&quot;,1087,829,[19],&quot;\n\t\t\t\t\t\t\t\t\t\tAppDelivery\n\t\t\t\t\t\t\t\t\t&quot;,1088,832,[19],&quot;\n\t\t\t\t\t\t\t\t\t\tapp-modernization\n\t\t\t\t\t\t\t\t\t&quot;,1089,835,[19],&quot;\n\t\t\t\t\t\t\t\t\t\tOpenText\n\t\t\t\t\t\t\t\t\t&quot;,1090,838,[19],&quot;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tEducation Central\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t&quot;,1091,841,[19],&quot;ArcSight&quot;,1092,844,[19],&quot;Fortify&quot;,1093,847,[19],&quot;NetIQ&quot;,1094,850,[19],&quot;Sentinel&quot;,1095,854,[19,1924],1096,854,1095,[1169],&quot;class=welcome-sub-heading&quot;,1097,854,1096,[935],1098,854,1097,[19,1924],1099,854,1098,[1721],&quot;class=uk-width-large-3-4 uk-width-medium-1-1 uk-width-small-1-1&quot;,1100,854,1099,[19,1924],1101,854,1100,[238],&quot;class=link&quot;,1102,854,1101,[19,1175],1103,858,[19,1924],1104,858,1103,[935],1105,858,1104,[19,1924],1106,858,1105,[1721,4817],1107,858,1106,[19,1924],1108,858,1107,[238,4826],1109,858,1108,[19,1175],1110,862,[19,1924],1111,862,1110,[935],1112,862,1111,[19,1924],1113,862,1112,[1721,4817],1114,862,1113,[19,1924],1115,862,1114,[238,4826],1116,862,1115,[19,1175],1117,864,[19],&quot;Top Rated&quot;,1118,865,[19],&quot;Featured&quot;,1119,866,[19],&quot;Newest&quot;,1120,867,[19],&quot;Popular&quot;,1121,868,[19],&quot;Categories&quot;,1122,871,[19],&quot;\n                                                                    \t\t\t\t\t\t\t\t&quot;,1123,871,1122,[19],&quot;                                                                    \t\t\t\t\t\t\t\t\t\t\t\t&quot;,1124,871,1123,[19,4913],1125,871,1124,[19],&quot;                                                                    \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t&quot;,1126,871,1125,[19],&quot;                                                                    \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t&quot;,1127,871,1126,[19],&quot;                                                                    \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t&quot;,1128,871,1127,[19],&quot;                                                                    \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t&quot;,1129,871,1128,[19],&quot;                                                                    \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t&quot;,1130,871,1129,[19],&quot;                                                                    \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t&quot;,1131,871,1130,[19],&quot;                                                                    \t\t\t\t\t\t\t\t\t\t&quot;,1132,871,1131,[19],&quot;                                                                    \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t&quot;,1133,871,1132,[19],&quot;                                                                    \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t&quot;,1134,871,1133,[19],&quot;                                                                    \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t&quot;,1135,871,1134,[19],&quot;                                                                    \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t&quot;,1136,871,1135,[19],&quot;                                                                    \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t&quot;,1137,871,1136,[19],&quot;                                                                    \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t&quot;,1138,871,1137,[19],&quot;                                \t\t\t\t\t\t\t&quot;,1139,871,1138,[238],&quot;class=owl-stage-outer&quot;,1140,871,1139,[238],&quot;class=owl-nav&quot;,1141,871,1140,[238],&quot;class=owl-dots disabled&quot;,1142,874,[19],&quot;\n                                                                    \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t&quot;,1143,874,1142,[19],&quot;                                                                    \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t&quot;,1144,874,1143,[19,4982],1145,874,1144,[19,4982],1146,874,1145,[19],&quot;                                                                    \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t&quot;,1147,874,1146,[19,4957],1148,874,1147,[19],&quot;                                                                    \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t&quot;,1149,874,1148,[19],&quot;                                                                    \t\t\t\t&quot;,1150,874,1149,[19],&quot;                                                                    \t\t\t\t\t\t\t&quot;,1151,874,1150,[19,5038],1152,874,1151,[19,5038],1153,874,1152,[19,5038],1154,874,1153,[19,5038],1155,874,1154,[19,5038],1156,874,1155,[19,5038],1157,874,1156,[19,5038],1158,874,1157,[19,4987],1159,874,1158,[238,4992],1160,874,1159,[238,4997],1161,874,1160,[238,5002],1162,877,[19],&quot;\n\n                                                                    \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t&quot;,1163,877,1162,[19],&quot;                                                                    \t\t\t\t\t\t\t\t&quot;,1164,877,1163,[19,4947],1165,877,1164,[19,5024],1166,877,1165,[19,4972],1167,877,1166,[19],&quot;                                                                    \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t&quot;,1168,877,1167,[19],&quot;                                                                    \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t&quot;,1169,877,1168,[19,4913],1170,877,1169,[19,4913],1171,877,1170,[19,4913],1172,877,1171,[19],&quot;                                \n\t\t\t\t\t\t\t&quot;,1173,877,1172,[238,4992],1174,877,1173,[238,4997],1175,877,1174,[238,5002],1176,880,[19],&quot;\n\t                            \t                                \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t&quot;,1177,880,1176,[19],&quot;\t                            \t                                \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t&quot;,1178,880,1177,[19],&quot;\t                            \t                                \t\t\t\t\t\t\t&quot;,1179,880,1178,[19],&quot;\t                            \t                                \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t&quot;,1180,880,1179,[19],&quot;\t                            \t                                \t\t\t\t\t\t\t\t\t\t\t\t&quot;,1181,880,1180,[19],&quot;\t                            \t                                \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t&quot;,1182,880,1181,[19],&quot;\t                            \t                                \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t&quot;,1183,880,1182,[19],&quot;\t                            \t                                \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t&quot;,1184,880,1183,[19],&quot;\t                            \t                                \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t&quot;,1185,880,1184,[19],&quot;\t                            \t                                \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t&quot;,1186,880,1185,[19],&quot;\t                            \t                                \t\t\t\t&quot;,1187,880,1186,[19],&quot;\t                            \t                                \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t&quot;,1188,880,1187,[19],&quot;\t                            \t                                \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t&quot;,1189,880,1188,[19],&quot;\t                            \t                                \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t&quot;,1190,880,1189,[19],&quot;\t                            \t                                \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t&quot;,1191,880,1190,[19],&quot;\t                            \t                                \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t&quot;,1192,880,1191,[19],&quot;\t                            \t\t\t\t\t\t\t&quot;,1193,880,1192,[238,4992],1194,880,1193,[238,4997],1195,880,1194,[238,5002],1196,883,[19],&quot;\n                                                                                    \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t&quot;,1197,883,1196,[238],1198,883,1197,[19],&quot;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t&quot;,1199,883,1198,[238],1200,883,1199,[19,5256],1201,883,1200,[238],1202,883,1201,[19,5256],1203,883,1202,[238],1204,883,1203,[19,5256],1205,883,1204,[238],1206,883,1205,[19,5256],1207,883,1206,[238],1208,883,1207,[19,5256],1209,883,1208,[238],1210,883,1209,[19,5256],1211,883,1210,[238],1212,883,1211,[19,5256],1213,883,1212,[238],1214,883,1213,[19,5256],1215,883,1214,[238],1216,883,1215,[19],&quot;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t&quot;,1217,888,[3613],&quot;class=icon-arrow&quot;,1218,893,[3613,5333],1219,898,[3613,5333],1220,901,[19],&quot;Become a developer&quot;,1221,903,[19],&quot;List your item on the marketplace with a developer account. It&apos;s free and you can start adding your item right away.&quot;,1222,907,[19,723],1223,907,1222,[4399],1224,907,1223,[19],&quot;  &quot;,1225,907,1224,[4399],1226,907,1225,[19],&quot;   \n\t\t\t\t\t\t\t&quot;,1227,907,1226,[4399],1228,907,1227,[19,723],1229,907,1228,[238],&quot;id=companyInfoGroup&quot;,[240],1230,907,1229,[19,991],1231,907,1230,[238],&quot;class=agree&quot;,1232,907,1231,[19,2102],1233,911,[19],&quot;Give me developer access&quot;,1234,913,[19,4108],1235,916,[19,1924],1236,916,1235,[238],&quot;class=icon uk-container-center&quot;,1237,916,1236,[19,1924],1238,916,1237,[238],&quot;class=icon-desc uk-container-center&quot;,1239,916,1238,[19,1175],1240,918,[19,1924],1241,918,1240,[238,5410],1242,918,1241,[19,1924],1243,918,1242,[238,5419],1244,918,1243,[19,1175],1245,920,[19,1924],1246,920,1245,[238,5410],1247,920,1246,[19,1924],1248,920,1247,[238,5419],1249,920,1248,[19,1175],1250,925,[19,4904],1251,926,[19],&quot;Contact us&quot;,1252,927,[19],&quot;Community&quot;,1253,928,[19],&quot;My OpenText&quot;,1254,929,[19],&quot;Privacy statement&quot;,1255,930,[19],&quot;Terms of use&quot;,1256,931,[19],&quot;Cookies Preferences&quot;,1257,940,[19,1649],1258,940,1257,[238],&quot;classname=uk-width-1-1&quot;,1259,940,1258,[19,212],1260,940,1259,[238,5496],1261,940,1260,[19,212],1262,944,[4365,4368],1263,949,[19],&quot;Read our Cookie Policy&quot;,1264,951,[19],&quot; Manage Consent Preferences&quot;,1265,952,[2949,2472],&quot;ot-accordion=true&quot;,&quot;aria-controls=ot-desc-id-C0001&quot;,&quot;aria-labelledby=ot-header-id-C0001 ot-status-id-C0001&quot;,1266,952,1265,[238],&quot;class=ot-acc-hdr ot-always-active-group&quot;,1267,952,1266,[238],&quot;class=ot-acc-grpcntr ot-acc-txt&quot;,1268,953,[2949,2472,5523],&quot;aria-controls=ot-desc-id-C0002&quot;,&quot;aria-labelledby=ot-header-id-C0002&quot;,1269,953,1268,[238],&quot;class=ot-acc-hdr&quot;,1270,953,1269,[238,5535],1271,954,[2949,2472,5523],&quot;aria-controls=ot-desc-id-C0003&quot;,&quot;aria-labelledby=ot-header-id-C0003&quot;,1272,954,1271,[238,5545],1273,954,1272,[238,5535],1274,955,[2949,2472,5523],&quot;aria-controls=ot-desc-id-C0004&quot;,&quot;aria-labelledby=ot-header-id-C0004&quot;,1275,955,1274,[238,5545],1276,955,1275,[238,5535],1277,956,[2949,2472,5523],&quot;aria-controls=ot-desc-id-C0005&quot;,&quot;aria-labelledby=ot-header-id-C0005&quot;,1278,956,1277,[238,5545],1279,956,1278,[238,5535],1280,957,[2949],&quot;class=ot-link-btn back-btn-handler&quot;,&quot;aria-label=Back&quot;,1281,957,1280,[977],1282,958,[238],&quot;class=ot-search-cntr&quot;,1283,958,1282,[238],&quot;class=ot-fltr-cntr&quot;,1284,958,1283,[238],&quot;id=ot-anchor&quot;,1285,958,1284,[261],&quot;id=ot-fltr-modal&quot;,1286,959,[238],&quot;class=ot-sel-all&quot;,1287,960,[238],&quot;class=ot-sdk-column&quot;,1288,961,[19],&quot;Reject All&quot;,1289,963,[19],&quot;Confirm My Choices&quot;,1290,964,[2348],&quot;src=https://cdn.cookielaw.org/logos/static/powered_by_logo.svg&quot;,1291,971,[19],&quot;AppDelivery &quot;,1292,971,1291,[1169],1293,974,[19,723],1294,974,1293,[238],&quot;class=dropdown-trigger&quot;,1295,974,1294,[19,723],1296,974,1295,[238],&quot;class=uk-dropdown categories-caret uk-visible-large&quot;,1297,974,1296,[19,723],1298,974,1297,[238],&quot;class=uk-dropdown categories  uk-visible-large&quot;,1299,974,1298,[19,2102],1300,977,[19,723],1301,977,1300,[238],&quot;id=admin-db-dd&quot;,[240,4274],1302,977,1301,[19,991],1303,977,1302,[238],&quot;id=developer-db-dd&quot;,[240,4274],1304,977,1303,[19,991],1305,977,1304,[238],&quot;id=approver-db-dd&quot;,[240,4274],1306,977,1305,[19,991],1307,977,1306,[238],&quot;id=user-db-dd&quot;,[4274],1308,977,1307,[19,3836],1309,979,[19,723],1310,979,1309,[238,5652],1311,979,1310,[19,723],1312,979,1311,[238],&quot;class=uk-dropdown dashboard-caret&quot;,1313,979,1312,[19,723],1314,979,1313,[238],&quot;class=uk-dropdown dashboard&quot;,1315,979,1314,[19,2102],1316,981,[19],&quot;For developers&quot;,1317,983,[19,723],1318,983,1317,[1020,4059],1319,983,1318,[19,2102],1320,986,[19,723],1321,986,1320,[1020],&quot;id=member-welcome&quot;,[4287],&quot;style=visibility: visible;&quot;,1322,986,1321,[19,2193],1323,986,1322,[1020],&quot;id=guest-welcome&quot;,&quot;style=visibility:hidden&quot;,[240],1324,986,1323,[19,2193],1325,986,1324,[238],&quot;id=sign-in-dd&quot;,&quot;class=uk-dropdown sign-in member&quot;,1326,986,1325,[19,2102],1327,989,[19],&quot;\n                            \t\t\t\t\t\t\t&quot;,1328,989,1327,[4399],&quot;for=q&quot;,[240],1329,989,1328,[19],&quot;\n\t\t\t                &quot;,1330,989,1329,[3282,4411,4413,4414,4415],&quot;id=q&quot;,[4412,4417,4418],1331,989,1330,[19],&quot;\n\t\t\t\t\t\t\t\t\t\t                &quot;,1332,989,1331,[2949,2950,2444,2528,4427],1333,989,1332,[19,4335],1334,992,[19,723],1335,992,1334,[1169],1336,992,1335,[19,723],1337,992,1336,[1169],1338,992,1337,[19,723],1339,992,1338,[1169],1340,992,1339,[19,723],1341,992,1340,[1169],1342,992,1341,[19,2102],1343,995,[19,2102],1344,995,1343,&quot;svg:g&quot;,1345,995,1344,[19,2102],1346,998,[238,4262],1347,1001,[19],&quot;Search Apps or by Product...&quot;,1348,1005,[19],&quot;\n\t                        &quot;,1349,1005,1348,[4365,4366,4367,4368,4369,4370,4371,4372,4373,4374,4375,4376],1350,1005,1349,[19,4406],1351,1007,[19,4904],1352,1009,[19,723],1353,1009,1352,[1020],&quot;id=admin-mobile-db&quot;,[240],&quot;href=/marketplace/appdelivery/dashboard/all-items&quot;,[4435],1354,1009,1353,[19,723],1355,1009,1354,[1020],&quot;id=developer-mobile-db&quot;,[240],&quot;href=/marketplace/appdelivery/dashboard/items&quot;,[4435],1356,1009,1355,[19,723],1357,1009,1356,[1020],&quot;id=user-mobile-db&quot;,&quot;href=/marketplace/appdelivery/dashboard/free-items&quot;,[4435],1358,1009,1357,[19,2102],1359,1011,[19],&quot;Dashboard&quot;,1360,1013,[19,5750],1361,1014,[19,5468],1362,1015,[19],&quot;Profile&quot;,1363,1016,[19],&quot;Sign out&quot;,1364,1018,[19,3236],1365,1020,[19],&quot;Sign up&quot;,1366,1037,[19],&quot;i&quot;,1367,1039,[19,2310],1368,1039,1367,[238,1091],1369,1039,1368,[19,2310],1370,1039,1369,[238,1101],1371,1039,1370,[19,4531],-1372,1042,[19],&quot;g&quot;,1373,1046,[19],&quot;\n                                                &quot;,1374,1046,1373,[2348,4249,4250],1375,1046,1374,[19,1649],1376,1048,[19,58],1377,1048,1376,[2076,4262],1378,1048,1377,[19,1649],1379,1051,[19,3420],1380,1053,[19,3420],1381,1055,[19,3420],1382,1057,[19,3420],1383,1060,[19,3420],1384,1062,[19,3420],1385,1064,[19,3420],1386,1071,[19,2310],1387,1071,1386,[1020,3715,3716],1388,1071,1387,[19,4531],1389,1073,[19,2310],1390,1073,1389,[1020,3728,3729],1391,1073,1390,[19,4531],1392,1075,[19,2310],1393,1075,1392,[1020,3741,3742],1394,1075,1393,[19,4531],1395,1077,[19,2310],1396,1077,1395,[1020,3754,3755],1397,1077,1396,[19,4531],1398,1096,[19],&quot;Welcome to&quot;,1399,1097,[19],&quot; Application Delivery Marketplace&quot;,1400,1099,[19],&quot;Accelerate the planning, testing, delivery and support of optimized applications.&quot;,1401,1101,[1020,2529,2647],&quot;class=uk-button white-bg&quot;,1402,1104,[19],&quot;Partner Resources&quot;,1403,1106,[19],&quot;Ready to become an Authorized Partner? Visit the OpenText Partner Portal to learn more&quot;,1404,1108,[1020],&quot;href=https://microfocuspartner.force.com/s/&quot;,[2647,6092],1405,1111,[19],&quot;Discover the OpenText Community&quot;,1406,1113,[19],&quot;Have Marketplace questions?  Visit the OpenText Marketplace Community&quot;,1407,1115,[1020],&quot;href=https://community.microfocus.com/t5/Micro-Focus-Marketplace/ct-p/MicroFocus_Marketplace&quot;,[2647,6092],1408,1139,[238],&quot;class=owl-stage&quot;,&quot;style=transform: translate3d(0px, 0px, 0px); transition: all;&quot;,1409,1140,[238],&quot;class=owl-prev disabled&quot;,1410,1140,1409,[238],&quot;class=owl-next&quot;,1411,1159,[238,6122,6123],1412,1160,[238,6127],1413,1160,1412,[238,6132],1414,1173,[238,6122,6123],1415,1174,[238,6127],1416,1174,1415,[238,6132],1417,1193,[238,6122,6123],1418,1194,[238,6127],1419,1194,1418,[238,6132],1420,1197,[19,3038],1421,1197,1420,[238],&quot;class=each-category&quot;,1422,1197,1421,[19,2335],1423,1199,[19,3038],1424,1199,1423,[238,6170],1425,1199,1424,[19,2335],1426,1201,[19,3038],1427,1201,1426,[238,6170],1428,1201,1427,[19,2335],1429,1203,[19,3038],1430,1203,1429,[238,6170],1431,1203,1430,[19,2335],1432,1205,[19,3038],1433,1205,1432,[238,6170],1434,1205,1433,[19,2335],1435,1207,[19,3038],1436,1207,1435,[238,6170],1437,1207,1436,[19,2335],1438,1209,[19,3038],1439,1209,1438,[238,6170],1440,1209,1439,[19,2335],1441,1211,[19,3038],1442,1211,1441,[238,6170],1443,1211,1442,[19,2335],1444,1213,[19,3038],1445,1213,1444,[238,6170],1446,1213,1445,[19,2335],1447,1215,[19,3038],1448,1215,1447,[238,6170],1449,1215,1448,[19,2335],1450,1223,[19],&quot;List your item under:&quot;,1451,1225,[3282],&quot;type=radio&quot;,&quot;id=dev&quot;,&quot;name=type&quot;,&quot;value=dev-signup&quot;,&quot;checked=&quot;,1452,1225,1451,[19],&quot; Your name&quot;,1453,1227,[3282,6281],&quot;id=devCo&quot;,[6283],&quot;value=dev-company-signup&quot;,1454,1227,1453,[19],&quot; Your company&quot;,1455,1229,[19,1175],1456,1229,1455,[1768],1457,1229,1456,[19,1175],1458,1229,1457,[238,2941],1459,1229,1458,[19,1175],1460,1229,1459,[1768],1461,1229,1460,[19,723],1462,1231,[19,1175],1463,1231,1462,[4399],1464,1231,1463,[19,1175],1465,1231,1464,[1721],&quot;id=tcValidation&quot;,[1958],1466,1231,1465,[19,723],1467,1236,[19,2335],1468,1236,1467,[2348],&quot;src=https://s3.amazonaws.com/marketplace2-public/marketplace_5/features/1a983ae9bf512a824fe7c63f71f527872ae3d244.png&quot;,1469,1236,1468,[19,1924],1470,1238,[19],&quot;\n\t\t\t\t\t\t\t\t\t\tAccess to ▫,▫▫▫▪ of customers.\n\t\t\t\t\t\t\t\t\t&quot;,1471,1241,[19,2335],1472,1241,1471,[2348],&quot;src=https://s3.amazonaws.com/marketplace2-public/marketplace_5/features/cb41b7a002fd6ea9c6ac50e6a4727d8f11c3a3fa.png&quot;,1473,1241,1472,[19,1924],1474,1243,[19],&quot;\n\t\t\t\t\t\t\t\t\t\tFree to join and list your items.\n\t\t\t\t\t\t\t\t\t&quot;,1475,1246,[19,2335],1476,1246,1475,[2348],&quot;src=https://s3.amazonaws.com/marketplace2-public/marketplace_5/features/6e002ac222087b4f1fecea7effb2370e03890040.png&quot;,1477,1246,1476,[19,1924],1478,1248,[19],&quot;\n\t\t\t\t\t\t\t\t\t\tWe support free and paid items.\n\t\t\t\t\t\t\t\t\t&quot;,1479,1258,[19,58],1480,1258,1479,[19,212],1481,1258,1480,[1721],&quot;id=email-label&quot;,1482,1258,1481,[19,212],1483,1258,1482,[3282,4411],&quot;id=username&quot;,&quot;name=_username&quot;,[4543],&quot;placeholder=•••••&quot;,[4509],&quot;aria-labelledby=email-label&quot;,&quot;value=••••• •••• •••• •••• ••••&quot;,1484,1258,1483,[19,1709],1485,1258,1484,[1721],&quot;classname=field-error&quot;,1486,1258,1485,[19,212],1487,1260,[19,212],1488,1260,1487,[19,212],1489,1260,1488,[1721,3260],1490,1260,1489,[19,212],1491,1260,1490,[3282,4540],&quot;id=password&quot;,&quot;name=_password&quot;,[4543,4544,4546,3285],1492,1260,1491,[19,1709],1493,1260,1492,[1721,6433],1494,1260,1493,[19,212],1495,1262,&quot;svg:path&quot;,&quot;class=ot-floating-button__svg-fill&quot;,&quot;d=M14.588 0l.445.328c1.807 1.303 3.961 2.533 6.461 3.688 2.015.93 4.576 1.746 7.682 2.446 0 14.178-4.73 24.133-14.19 29.864l-.398.236C4.863 30.87 0 20.837 0 6.462c3.107-.7 5.668-1.516 7.682-2.446 2.709-1.251 5.01-2.59 6.906-4.016zm5.87 13.88a.75.75 0 00-.974.159l-5.475 6.625-3.005-2.997-.077-.067a.75.75 0 00-.983 1.13l4.172 4.16 6.525-7.895.06-.083a.75.75 0 00-.16-.973z&quot;,&quot;fill=#FFF&quot;,&quot;fill-rule=evenodd&quot;,1496,1266,[238],&quot;class=ot-plus-minus&quot;,1497,1266,1496,[1713],&quot;class=ot-cat-header&quot;,&quot;id=ot-header-id-C0001&quot;,1498,1266,1497,[238],&quot;id=ot-status-id-C0001&quot;,&quot;class=ot-always-active&quot;,1499,1267,[1721],&quot;class=ot-acc-grpdesc ot-category-desc&quot;,&quot;id=ot-desc-id-C0001&quot;,1500,1267,1499,[238],&quot;class=ot-hlst-cntr&quot;,1501,1269,[238,6482],1502,1269,1501,[1713,6487],&quot;id=ot-header-id-C0002&quot;,1503,1269,1502,[238],&quot;class=ot-tgl&quot;,1504,1270,[1721,6498],&quot;id=ot-desc-id-C0002&quot;,1505,1270,1504,[238,6504],1506,1272,[238,6482],1507,1272,1506,[1713,6487],&quot;id=ot-header-id-C0003&quot;,1508,1272,1507,[238,6517],1509,1273,[1721,6498],&quot;id=ot-desc-id-C0003&quot;,1510,1273,1509,[238,6504],1511,1275,[238,6482],1512,1275,1511,[1713,6487],&quot;id=ot-header-id-C0004&quot;,1513,1275,1512,[238,6517],1514,1276,[1721,6498],&quot;id=ot-desc-id-C0004&quot;,1515,1276,1514,[238,6504],1516,1278,[238,6482],1517,1278,1516,[1713,6487],&quot;id=ot-header-id-C0005&quot;,1518,1278,1517,[238,6517],1519,1279,[1721,6498],&quot;id=ot-desc-id-C0005&quot;,1520,1279,1519,[238,6504],1521,1280,[4365],&quot;id=ot-back-arw&quot;,[4368,4369,4370,4371],&quot;viewBox=0 0 444.531 444.531&quot;,[4374],1522,1281,[19],&quot;Cookie List&quot;,1523,1282,[1721],&quot;role=status&quot;,[1824],1524,1282,1523,[3282],&quot;id=vendor-search-handler&quot;,[4411],&quot;name=vendor-search-handler&quot;,&quot;placeholder=•••••••&quot;,&quot;aria-label=Cookie list search&quot;,1525,1282,1524,[19,4221],1526,1282,1525,[4365,4368,4369,4370,4371],&quot;viewBox=0 -30 110 110&quot;,[1081],1527,1283,[2949],&quot;id=filter-btn-handler&quot;,&quot;aria-label=Filter&quot;,&quot;aria-haspopup=true&quot;,1528,1285,[238],&quot;id=ot-fltr-cnt&quot;,1529,1286,[238],&quot;class=ot-sel-all-hdr&quot;,1530,1286,1529,[238],&quot;class=ot-sel-all-chkbox&quot;,1531,1287,[856],&quot;id=ot-host-lst&quot;,1532,1292,[19,4052],1533,1294,[19,1175],1534,1294,1533,[1020,2529],1535,1294,1534,[19,723],1536,1296,[19,1175],1537,1296,1536,[238],&quot;class=caret&quot;,1538,1296,1537,[19,723],1539,1298,[19,1175],1540,1298,1539,[238],&quot;class=uk-container&quot;,1541,1298,1540,[19,723],1542,1301,[19,1175],1543,1301,1542,[238,5652],1544,1301,1543,[19,1175],1545,1301,1544,[238,5661],1546,1301,1545,[19,1924],1547,1301,1546,[238],&quot;class=uk-dropdown dashboard-member dashboard-admin uk-visible-large&quot;,1548,1301,1547,[19,723],1549,1303,[19,1175],1550,1303,1549,[238,5652],1551,1303,1550,[19,1175],1552,1303,1551,[238,5661],1553,1303,1552,[19,1175],1554,1303,1553,[238],&quot;class=uk-dropdown dashboard-member dashboard-developer uk-visible-large&quot;,1555,1303,1554,[19,723],1556,1305,[19,1175],1557,1305,1556,[238,5652],1558,1305,1557,[19,1175],1559,1305,1558,[238,5661],1560,1305,1559,[19,1175],1561,1305,1560,[238],&quot;class=uk-dropdown dashboard-member dashboard-approver uk-visible-large&quot;,1562,1305,1561,[19,723],1563,1307,[19,1175],1564,1307,1563,[238,5652],1565,1307,1564,[19,1175],1566,1307,1565,[238,5661],1567,1307,1566,[19,1175],1568,1307,1567,[238],&quot;class=uk-dropdown dashboard-member dashboard-user uk-visible-large&quot;,1569,1307,1568,[19,723],1570,1310,[19,1175],1571,1310,1570,[1020],&quot;class=dashboard-login&quot;,[4435],1572,1310,1571,[19,723],1573,1312,[19,1175],1574,1312,1573,[238,6665],1575,1312,1574,[19,723],1576,1314,[19,1175],1577,1314,1576,[238],&quot;class=item&quot;,1578,1314,1577,[19,723],1579,1318,[19,5468],1580,1321,[19],&quot;Hi &quot;,1581,1321,1580,[1169,6418],1582,1323,[19,3236],1583,1325,[19,1165],1584,1325,1583,[1169,1170],1585,1325,1584,[19,1175],1586,1325,1585,[238],&quot;id=member-welcome-dd&quot;,[4287],1587,1325,1586,[19,1175],1588,1325,1587,[238],&quot;id=iFrameID&quot;,[3308],1589,1325,1588,[19,1175],1590,1325,1589,[238],&quot;id=guest-welcome-dd&quot;,&quot;class=sign-in-form uk-hidden&quot;,1591,1325,1590,[19,723],1592,1328,[19,5883],1593,1332,[19],&quot;\n\t\t\t                    &quot;,1594,1332,1593,[4365,4366,4367,4368,4369,4370,4371,4372,4373,4374,4375,4376],1595,1332,1594,[19,5811],1596,1344,[6474],&quot;fill=#000000&quot;,&quot;d=M19.5,21l-5.6-5.6c-1.5,1.2-3.3,1.9-5.3,1.9C3.9,17.2,0,13.3,0,8.6C0,3.9,3.9,0,8.6,0\n\t\t\t\t\t\tc4.7,0,8.6,3.9,8.6,8.6c0,2-0.7,3.9-1.9,5.3l5.6,5.6L19.5,21z M8.6,2C5,2,2,5,2,8.6c0,3.6,3,6.6,6.6,6.6c3.6,0,6.6-3,6.6-6.6\n\t\t\t\t\t\tC15.2,5,12.2,2,8.6,2z&quot;,1597,1344,1596,[19,2102],1598,1346,[19,5640],1599,1346,1598,[1169],&quot;class=titleSuffix&quot;,1600,1349,[19,1165],1601,1349,1600,[5872],1602,1349,1601,[19,5887],1603,1353,[19,5940],1604,1355,[19,5940],1605,1357,[19,5940],1606,1377,[19],&quot;\n                                                                    AppDelivery\n                                                                                                    &quot;,1607,1377,1606,[1169],&quot;class=suffix&quot;,1608,1377,1607,[19],&quot;\n                                                            &quot;,1609,1387,[19,4784],1610,1390,[19,4788],1611,1393,[19,4792],1612,1396,[19,4796],1613,1401,[19,3909],1614,1404,[19,6096],1615,1407,[19,5472],1616,1408,[238],&quot;class=owl-item&quot;,1617,1408,1616,[238,6975],1618,1408,1617,[238,6975],1619,1408,1618,[238,6975],1620,1408,1619,[238,6975],1621,1408,1620,[238,6975],1622,1408,1621,[238,6975],1623,1408,1622,[238,6975],1624,1408,1623,[238,6975],1625,1408,1624,[238,6975],1626,1408,1625,[238,6975],1627,1408,1626,[238,6975],1628,1408,1627,[238,6975],1629,1408,1628,[238,6975],1630,1408,1629,[238,6975],1631,1408,1630,[238,6975],1632,1409,[19],&quot;prev&quot;,1633,1410,[19],&quot;next&quot;,1634,1411,[238,6975],1635,1411,1634,[238,6975],1636,1411,1635,[238,6975],1637,1411,1636,[238,6975],1638,1411,1637,[238,6975],1639,1411,1638,[238,6975],1640,1411,1639,[238,6975],1641,1411,1640,[238,6975],1642,1411,1641,[238,6975],1643,1411,1642,[238,6975],1644,1411,1643,[238,6975],1645,1411,1644,[238,6975],1646,1411,1645,[238,6975],1647,1411,1646,[238,6975],1648,1411,1647,[238,6975],1649,1411,1648,[238,6975],1650,1412,[19,7039],1651,1413,[19,7043],1652,1414,[238,6975],1653,1414,1652,[238,6975],1654,1414,1653,[238,6975],1655,1414,1654,[238,6975],1656,1414,1655,[238,6975],1657,1414,1656,[238,6975],1658,1414,1657,[238,6975],1659,1414,1658,[238,6975],1660,1414,1659,[238,6975],1661,1414,1660,[238,6975],1662,1415,[19,7039],1663,1416,[19,7043],1664,1417,[238,6975],1665,1417,1664,[238,6975],1666,1417,1665,[238,6975],1667,1417,1666,[238,6975],1668,1417,1667,[238,6975],1669,1417,1668,[238,6975],1670,1417,1669,[238,6975],1671,1417,1670,[238,6975],1672,1417,1671,[238,6975],1673,1417,1672,[238,6975],1674,1417,1673,[238,6975],1675,1417,1674,[238,6975],1676,1417,1675,[238,6975],1677,1417,1676,[238,6975],1678,1417,1677,[238,6975],1679,1417,1678,[238,6975],1680,1418,[19,7039],1681,1419,[19,7043],1682,1421,[19,4531],1683,1421,1682,[1020],&quot;href=/marketplace/appdelivery/category/continuous-testing&quot;,1684,1421,1683,[19,3038],1685,1424,[19,4531],1686,1424,1685,[1020],&quot;href=/marketplace/appdelivery/category/developer-tools&quot;,1687,1424,1686,[19,3038],1688,1427,[19,4531],1689,1427,1688,[1020],&quot;href=/marketplace/appdelivery/category/devops&quot;,1690,1427,1689,[19,3038],1691,1430,[19,4531],1692,1430,1691,[1020],&quot;href=/marketplace/appdelivery/category/digital-ux&quot;,1693,1430,1692,[19,3038],1694,1433,[19,4531],1695,1433,1694,[1020],&quot;href=/marketplace/appdelivery/category/enterprise-agile&quot;,1696,1433,1695,[19,3038],1697,1436,[19,4531],1698,1436,1697,[1020],&quot;href=/marketplace/appdelivery/category/micro-focus-subscription-management-tool&quot;,1699,1436,1698,[19,3038],1700,1439,[19,4531],1701,1439,1700,[1020],&quot;href=/marketplace/appdelivery/category/oes&quot;,1702,1439,1701,[19,3038],1703,1442,[19,4531],1704,1442,1703,[1020],&quot;href=/marketplace/appdelivery/category/filr&quot;,1705,1442,1704,[19,3038],1706,1445,[19,4531],1707,1445,1706,[1020],&quot;href=/marketplace/appdelivery/category/others&quot;,1708,1445,1707,[19,3038],1709,1448,[19,4531],1710,1448,1709,[1020],&quot;href=/marketplace/appdelivery/category/performance-engineering&quot;,1711,1448,1710,[19,3038],1712,1458,[19,1924],1713,1458,1712,[238],&quot;classname=uk-width-1-2&quot;,1714,1458,1713,[19,1175],1715,1463,[3282],&quot;type=checkbox&quot;,&quot;id=editAgree&quot;,&quot;name=agree&quot;,&quot;value=▫&quot;,&quot;class=form-checkbox required&quot;,&quot;required=&quot;,1716,1463,1715,[19],&quot;\n\t\t\t\t\t\t\t\t\tI agree to the Developer&apos;s &quot;,1717,1463,1716,[1020],&quot;href=https://d3075pyijv0bbs.cloudfront.net/Application_Provider_Terms_11-DEC-2020_clean.pdf&quot;,[2647],1718,1465,[19,4221],1719,1481,[19],&quot;Email&quot;,1720,1489,[19,4527],1721,1496,[1169],1722,1496,1721,[1169],1723,1497,[19],&quot;Strictly Necessary Cookies&quot;,1724,1498,[19],&quot;Always Active&quot;,1725,1499,[19],&quot;These cookies are necessary for the website to function and cannot be switched off in our systems. They are usually only set in response to actions made by you which amount to a request for services, such as setting your privacy preferences, logging in or filling in forms. You can set your browser to block or alert you about these cookies, but some parts of the site will not work. These cookies do not store any personally identifiable information.&quot;,1726,1500,[2949],&quot;class=ot-link-btn category-host-list-handler&quot;,&quot;aria-label=Cookie Details button opens Cookie List menu&quot;,&quot;data-parent-id=C0001&quot;,1727,1501,[1169],1728,1501,1727,[1169],1729,1502,[19],&quot;Performance Cookies&quot;,1730,1503,[3282,7362],&quot;name=ot-group-id-C0002&quot;,&quot;id=ot-group-id-C0002&quot;,&quot;role=switch&quot;,&quot;class=category-switch-handler&quot;,[4179,6285,5540],&quot;value=on&quot;,1731,1503,1730,[19,4221],1732,1503,1731,[4399],&quot;class=ot-switch&quot;,&quot;for=ot-group-id-C0002&quot;,1733,1503,1732,[19,4221],1734,1504,[19],&quot;These cookies allow us to count visits and traffic sources so we can measure and improve the performance of our site. They help us to know which pages are the most and least popular and see how visitors move around the site. All information these cookies collect is aggregated and therefore anonymous. If you do not allow these cookies, we will not know when you have visited our site, and will not be able to monitor its performance.&quot;,1735,1505,[2949,7411,7412],&quot;data-parent-id=C0002&quot;,1736,1506,[1169],1737,1506,1736,[1169],1738,1507,[19],&quot;Functional Cookies&quot;,1739,1508,[3282,7362],&quot;name=ot-group-id-C0003&quot;,&quot;id=ot-group-id-C0003&quot;,[7430,7431,4184,6285,5554,7433],1740,1508,1739,[19,4221],1741,1508,1740,[4399,7442],&quot;for=ot-group-id-C0003&quot;,1742,1508,1741,[19,4221],1743,1509,[19],&quot;These cookies enable the website to provide enhanced functionality and personalisation. They may be set by us or by third party providers whose services we have added to our pages. If you do not allow these cookies then some or all of these services may not function properly.&quot;,1744,1510,[2949,7411,7412],&quot;data-parent-id=C0003&quot;,1745,1511,[1169],1746,1511,1745,[1169],1747,1512,[19],&quot;Targeting Cookies&quot;,1748,1513,[3282,7362],&quot;name=ot-group-id-C0004&quot;,&quot;id=ot-group-id-C0004&quot;,[7430,7431,4189,6285,5567,7433],1749,1513,1748,[19,4221],1750,1513,1749,[4399,7442],&quot;for=ot-group-id-C0004&quot;,1751,1513,1750,[19,4221],1752,1514,[19],&quot;These cookies may be set through our site by our advertising partners. They may be used by those companies to build a profile of your interests and show you relevant advertisements on other sites. They do not store directly personal information, but are based on uniquely identifying your browser and internet device. If you do not allow these cookies, you will experience less targeted advertising.&quot;,1753,1515,[2949,7411,7412],&quot;data-parent-id=C0004&quot;,1754,1516,[1169],1755,1516,1754,[1169],1756,1517,[19],&quot;Social Media Cookies&quot;,1757,1518,[3282,7362],&quot;name=ot-group-id-C0005&quot;,&quot;id=ot-group-id-C0005&quot;,[7430,7431,4194,6285,5580,7433],1758,1518,1757,[19,4221],1759,1518,1758,[4399,7442],&quot;for=ot-group-id-C0005&quot;,1760,1518,1759,[19,4221],1761,1519,[19],&quot;These cookies are set by a range of social media services that we have added to the site to enable you to share our content with your friends and networks. They are capable of tracking your browser across other sites and building up a profile of your interests. This may impact the content and messages you see on other websites you visit.    If you do not allow these cookies you may not be able to use or see these sharing tools.&quot;,1762,1520,[2949,7411,7412],&quot;data-parent-id=C0005&quot;,1763,1521,&quot;svg:title&quot;,1764,1521,1763,[5872],1765,1526,[7572],1766,1526,1765,[6474],&quot;fill=#2e3644&quot;,&quot;d=M55.146,51.887L41.588,37.786c3.486-4.144,5.396-9.358,5.396-14.786c0-12.682-10.318-23-23-23s-23,10.318-23,23\n            s10.318,23,23,23c4.761,0,9.298-1.436,13.177-4.162l13.661,14.208c0.571,0.593,1.339,0.92,2.162,0.92\n            c0.779,0,1.518-0.297,2.079-0.837C56.255,54.982,56.293,53.08,55.146,51.887z M23.984,6c9.374,0,17,7.626,17,17s-7.626,17-17,17\n            s-17-7.626-17-17S14.61,6,23.984,6z&quot;,1767,1527,[4365],&quot;role=presentation&quot;,[1081,4368,4369,4370,4371],&quot;viewBox=0 0 402.577 402.577&quot;,[4374],1768,1528,[2949],&quot;id=clear-filters-handler&quot;,1769,1528,1768,[238],&quot;class=ot-fltr-scrlcnt ot-pc-scrollbar&quot;,1770,1529,[1169],&quot;class=ot-consent-hdr&quot;,1771,1529,1770,[19,4221],1772,1529,1771,[1169],&quot;class=ot-li-hdr&quot;,1773,1530,[238],&quot;class=ot-chkbox&quot;,&quot;id=ot-selall-hostcntr&quot;,1774,1530,1773,[238,7618],&quot;id=ot-selall-vencntr&quot;,1775,1530,1774,[238,7618],&quot;id=ot-selall-licntr&quot;,1776,1534,[19,4904],1777,1540,[19,1924],1778,1540,1777,[238],&quot;class=uk-grid uk-grid-width-1-3&quot;,1779,1540,1778,[19,1175],1780,1543,[19,1924],1781,1543,1780,[1020,5908,4435],1782,1543,1781,[19,1175],1783,1545,[19,1924],1784,1545,1783,[238,6665],1785,1545,1784,[19,1175],1786,1547,[19],&quot;\n\n\t\t\t\t\t\t\t\t\t&quot;,1787,1547,1786,[238,6677],1788,1547,1787,[19,1175],1789,1550,[19,1924],1790,1550,1789,[1020,5920,4435],1791,1550,1790,[19,1175],1792,1552,[19,1924],1793,1552,1792,[238,6665],1794,1552,1793,[19,1175],1795,1554,[19,1924],1796,1554,1795,[238,6677],1797,1554,1796,[19,1175],1798,1557,[19,1924],1799,1557,1798,[1020,5908,4435],1800,1557,1799,[19,1175],1801,1559,[19,1924],1802,1559,1801,[238,6665],1803,1559,1802,[19,1175],1804,1561,[19,1924],1805,1561,1804,[238,6677],1806,1561,1805,[19,1175],1807,1564,[19,1924],1808,1564,1807,[1020,5931,4435],1809,1564,1808,[19,1175],1810,1566,[19,1924],1811,1566,1810,[238,6665],1812,1566,1811,[19,1175],1813,1568,[19,1924],1814,1568,1813,[238,6677],1815,1568,1814,[19,1175],1816,1571,[19,5940],1817,1577,[19,1924],1818,1577,1817,[1020],&quot;class=dashboard-login uk-dropdown-close&quot;,1819,1577,1818,[19],&quot; or\n\t\t\t\t\t\t\t\t\t&quot;,1820,1577,1819,[1020,3380,4435],1821,1577,1820,[19,1924],1822,1577,1821,[1721],1823,1577,1822,[19,1175],1824,1581,[19],&quot;Eeshan&quot;,1825,1586,[19,1924],1826,1586,1825,[856],1827,1586,1826,[19,1175],1828,1588,[19,1924],1829,1588,1828,[238],1830,1588,1829,[19,1175],1831,1590,[19,356],1832,1590,1831,[935],1833,1590,1832,[19,1924],1834,1590,1833,[1721],&quot;class=internalusername-lbl&quot;,&quot;style=display:none&quot;,1835,1590,1834,[19,1924],1836,1590,1835,[1721],&quot;id=header-username-lbl&quot;,&quot;class=username-lbl&quot;,1837,1590,1836,[19,1924],1838,1590,1837,[238,1760,1938],1839,1590,1838,[19,1924],1840,1590,1839,[238,1760,1947],&quot;id=pwdLoginDiv&quot;,1841,1590,1840,[19,1924],1842,1590,1841,[238],&quot;id=loginerror&quot;,[1958],1843,1590,1842,[19,1924],1844,1590,1843,[1768],1845,1590,1844,[19,1924],1846,1590,1845,[238,1975],1847,1590,1846,[19,1924],1848,1590,1847,[238,1975],1849,1590,1848,[19,1988],1850,1590,1849,[238,1993,1994],1851,1590,1850,[19,1924],1852,1590,1851,[238],&quot;id=loading&quot;,[264],1853,1590,1852,[19],&quot;\n\n\t\t\t\t\t\t\t\t\t\t                                &quot;,1854,1590,1853,[1614,2014,2015,1759,1760],1855,1590,1854,[19,356],1856,1590,1855,[238,2025],1857,1590,1856,[19,1924],1858,1590,1857,[238],1859,1590,1858,[19],&quot;\n                                    \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t&quot;,1860,1594,[19],&quot;\n\t\t\t                        &quot;,1861,1594,1860,[5872],1862,1594,1861,[19,6891],1863,1599,[19],&quot; Marketplace&quot;,1864,1601,[6474],&quot;fill=#ffffff&quot;,&quot;d=M19.5,21l-5.6-5.6c-1.5,1.2-3.3,1.9-5.3,1.9C3.9,17.2,0,13.3,0,8.6C0,3.9,3.9,0,8.6,0\n\t                                c4.7,0,8.6,3.9,8.6,8.6c0,2-0.7,3.9-1.9,5.3l5.6,5.6L19.5,21z M8.6,2C5,2,2,5,2,8.6c0,3.6,3,6.6,6.6,6.6c3.6,0,6.6-3,6.6-6.6\n\t                                C15.2,5,12.2,2,8.6,2z&quot;,1865,1601,1864,[19,1165],1866,1607,[19,4052],1867,1616,[238],1868,1617,[238],1869,1618,[238],1870,1619,[238],1871,1620,[238],1872,1621,[238],1873,1622,[238],1874,1623,[238],1875,1624,[238],1876,1625,[238],1877,1626,[238],1878,1627,[238],1879,1628,[238],1880,1629,[238],1881,1630,[238],1882,1631,[238],1883,1634,[238],1884,1635,[238],1885,1636,[238],1886,1637,[238],1887,1638,[238],1888,1639,[238],1889,1640,[238],1890,1641,[238],1891,1642,[238],1892,1643,[238],1893,1644,[238],1894,1645,[238],1895,1646,[238],1896,1647,[238],1897,1648,[238],1898,1649,[238],1899,1652,[238],1900,1653,[238],1901,1654,[238],1902,1655,[238],1903,1656,[238],1904,1657,[238],1905,1658,[238],1906,1659,[238],1907,1660,[238],1908,1661,[238],1909,1664,[238],1910,1665,[238],1911,1666,[238],1912,1667,[238],1913,1668,[238],1914,1669,[238],1915,1670,[238],1916,1671,[238],1917,1672,[238],1918,1673,[238],1919,1674,[238],1920,1675,[238],1921,1676,[238],1922,1677,[238],1923,1678,[238],1924,1679,[238],1925,1683,[19,2310],1926,1683,1925,[238],&quot;class=cat-img&quot;,1927,1683,1926,[19,2310],1928,1683,1927,[977],&quot;class=cat-name&quot;,&quot;style=min-height: 52px;&quot;,1929,1683,1928,[19,2310],1930,1683,1929,[238],&quot;class=cat-link&quot;,1931,1683,1930,[19,4531],1932,1686,[19,2310],1933,1686,1932,[238,8171],1934,1686,1933,[19,2310],1935,1686,1934,[977,8180,8181],1936,1686,1935,[19,2310],1937,1686,1936,[238,8190],1938,1686,1937,[19,4531],1939,1689,[19,2310],1940,1689,1939,[238,8171],1941,1689,1940,[19,2310],1942,1689,1941,[977,8180,8181],1943,1689,1942,[19,2310],1944,1689,1943,[238,8190],1945,1689,1944,[19,4531],1946,1692,[19,2310],1947,1692,1946,[238,8171],1948,1692,1947,[19,2310],1949,1692,1948,[977,8180,8181],1950,1692,1949,[19,2310],1951,1692,1950,[238,8190],1952,1692,1951,[19,4531],1953,1695,[19,2310],1954,1695,1953,[238,8171],1955,1695,1954,[19,2310],1956,1695,1955,[977,8180,8181],1957,1695,1956,[19,2310],1958,1695,1957,[238,8190],1959,1695,1958,[19,4531],1960,1698,[19,2310],1961,1698,1960,[238,8171],1962,1698,1961,[19,2310],1963,1698,1962,[977,8180],&quot;style=min-height: 104px;&quot;,1964,1698,1963,[19,2310],1965,1698,1964,[238,8190],1966,1698,1965,[19,4531],1967,1701,[19,2310],1968,1701,1967,[238,8171],1969,1701,1968,[19,2310],1970,1701,1969,[977,8180,8318],1971,1701,1970,[19,2310],1972,1701,1971,[238,8190],1973,1701,1972,[19,4531],1974,1704,[19,2310],1975,1704,1974,[238,8171],1976,1704,1975,[19,2310],1977,1704,1976,[977,8180,8318],1978,1704,1977,[19,2310],1979,1704,1978,[238,8190],1980,1704,1979,[19,4531],1981,1707,[19,2310],1982,1707,1981,[238,8171],1983,1707,1982,[19,2310],1984,1707,1983,[977,8180,8318],1985,1707,1984,[19,2310],1986,1707,1985,[238,8190],1987,1707,1986,[19,4531],1988,1710,[19,2310],1989,1710,1988,[238,8171],1990,1710,1989,[19,2310],1991,1710,1990,[977,8180,8318],1992,1710,1991,[19,2310],1993,1710,1992,[238,8190],1994,1710,1993,[19,4531],1995,1713,[19,2335],1996,1713,1995,[238,3248],1997,1713,1996,[19,2335],1998,1713,1997,[1768],1999,1713,1998,[19,2335],2000,1713,1999,[238,3248],2001,1713,2000,[19,1924],2002,1717,[19],&quot;Terms and Conditions&quot;,2003,1726,[19],&quot;Cookies Details‎&quot;,2004,1732,[1169],&quot;class=ot-switch-nob&quot;,&quot;aria-label=Performance Cookies&quot;,2005,1732,2004,[19,4221],2006,1732,2005,[1169],&quot;class=ot-label-txt&quot;,2007,1735,[19,8473],2008,1741,[1169,8477],&quot;aria-label=Functional Cookies&quot;,2009,1741,2008,[19,4221],2010,1741,2009,[1169,8487],2011,1744,[19,8473],2012,1750,[1169,8477],&quot;aria-label=Targeting Cookies&quot;,2013,1750,2012,[19,4221],2014,1750,2013,[1169,8487],2015,1753,[19,8473],2016,1759,[1169,8477],&quot;aria-label=Social Media Cookies&quot;,2017,1759,2016,[19,4221],2018,1759,2017,[1169,8487],2019,1762,[19,8473],2020,1763,[19],&quot;Back Button&quot;,2021,1764,[6474],&quot;fill=#656565&quot;,&quot;d=M213.13,222.409L351.88,83.653c7.05-7.043,10.567-15.657,10.567-25.841c0-10.183-3.518-18.793-10.567-25.835\n                    l-21.409-21.416C323.432,3.521,314.817,0,304.637,0s-18.791,3.521-25.841,10.561L92.649,196.425\n                    c-7.044,7.043-10.566,15.656-10.566,25.841s3.521,18.791,10.566,25.837l186.146,185.864c7.05,7.043,15.66,10.564,25.841,10.564\n                    s18.795-3.521,25.834-10.564l21.409-21.412c7.05-7.039,10.567-15.604,10.567-25.697c0-10.085-3.518-18.746-10.567-25.978\n                    L213.13,222.409z&quot;,2022,1765,[19],&quot;Search Icon&quot;,2023,1767,[7572],2024,1767,2023,[5872],2025,1768,[19],&quot;Clear&quot;,2026,1769,[238],&quot;class=ot-fltr-opts&quot;,2027,1769,2026,[238],&quot;class=ot-fltr-btns&quot;,2028,1770,[19],&quot;Consent&quot;,2029,1772,[19],&quot;Leg.Interest&quot;,2030,1773,[3282],&quot;id=select-all-hosts-groups-handler&quot;,[7362,7433],2031,1773,2030,[19,4221],2032,1773,2031,[4399],&quot;for=select-all-hosts-groups-handler&quot;,2033,1773,2032,[19,4221],2034,1773,2033,[1169],&quot;class=ot-label-status&quot;,2035,1774,[3282],&quot;id=select-all-vendor-groups-handler&quot;,[7362,7433],2036,1774,2035,[19,4221],2037,1774,2036,[4399],&quot;for=select-all-vendor-groups-handler&quot;,2038,1774,2037,[19,4221],2039,1774,2038,[1169,8599],2040,1775,[3282],&quot;id=select-all-vendor-leg-handler&quot;,[7362,7433],2041,1775,2040,[19,4221],2042,1775,2041,[4399],&quot;for=select-all-vendor-leg-handler&quot;,2043,1775,2042,[19,4221],2044,1775,2043,[1169,8599],2045,1778,[19],&quot;\n\n\t\t\t\t\t\t\t\t\t\t&quot;,2046,1778,2045,[238],2047,1778,2046,[19],&quot;\n\n                                        \t\t\t\t\t\t\t\t\t\t\t&quot;,2048,1778,2047,[238],2049,1778,2048,[19],&quot;\n                                        \t\t\t\t\t\t\t\t\t\t\t&quot;,2050,1778,2049,[238],2051,1778,2050,[19,8665],2052,1778,2051,[238],2053,1778,2052,[19,8665],2054,1778,2053,[238],2055,1778,2054,[19,8665],2056,1778,2055,[238],2057,1778,2056,[19,8665],2058,1778,2057,[238],2059,1778,2058,[19,8665],2060,1778,2059,[238],2061,1778,2060,[19,8665],2062,1778,2061,[238],2063,1778,2062,[19,8665],2064,1778,2063,[238],2065,1778,2064,[19,8665],2066,1778,2065,[238],2067,1778,2066,[19],&quot;\n                                        \t\t\t\t\t\t\t\t\t&quot;,2068,1781,[19,5940],2069,1787,[19,2335],2070,1787,2069,[238],&quot;class=uk-grid uk-grid-width-1-6&quot;,2071,1787,2070,[19,1924],2072,1790,[19,5940],2073,1796,[19,2335],2074,1796,2073,[238,7640],2075,1796,2074,[19,1924],2076,1799,[19,5940],2077,1805,[19,2335],2078,1805,2077,[238],&quot;class=uk-grid uk-grid-width-1-4&quot;,2079,1805,2078,[19,1924],2080,1808,[19,5940],2081,1814,[19,2335],2082,1814,2081,[238],&quot;class=uk-grid uk-grid-width-1-2&quot;,2083,1814,2082,[19,1924],2084,1818,[19,3236],2085,1820,[19],&quot; Sign up&quot;,2086,1822,[19],&quot;Check here to see and manage items, upgrades, and purchases.&quot;,2087,1826,[19,2335],2088,1826,2087,[1322,6825],2089,1826,2088,[19,2335],2090,1826,2089,[1322,6825],2091,1826,2090,[19,2335],2092,1826,2091,[1768],2093,1826,2092,[19,5256],2094,1826,2093,[1322],&quot;class=item signout&quot;,2095,1826,2094,[19],&quot;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t&quot;,2096,1829,[19,2335],2097,1829,2096,[2949,3995],&quot;data-dismiss=modal&quot;,&quot;id=close&quot;,2098,1829,2097,[19,1924],2099,1832,[19,3236],2100,1834,[19],&quot;OpenText employee short login only&quot;,2101,1836,[19],&quot;Username or Email&quot;,2102,1838,[19,2335],2103,1838,2102,[238,3248],2104,1838,2103,[19,1924],2105,1840,[19,2335],2106,1840,2105,[1721],&quot;id=pwdLoginDivLabel&quot;,2107,1840,2106,[19,3038],2108,1840,2107,[238,3248],2109,1840,2108,[19,1924],2110,1842,[19,1924],2111,1846,[19,2335],2112,1846,2111,[2949,3294],&quot;id=loadSamlIframeBtnId&quot;,2113,1846,2112,[19,1924],2114,1848,[19,2335],2115,1848,2114,[2949,3294],&quot;id=submitSmartLoginId&quot;,[3308],2116,1848,2115,[19,1924],2117,1850,[19,2335],2118,1850,2117,[1020,3320],2119,1850,2118,[19,2335],2120,1850,2119,[1169,3329,3330],2121,1850,2120,[19,356],2122,1852,[19,3038],2123,1852,2122,[238,410],2124,1852,2123,[19,1924],2125,1854,[19],&quot;\n\t\t\t\t\t\t\t\t\t\t\t\t                                    &quot;,2126,1854,2125,[3282],&quot;id=returnUrl&quot;,[3283,3356,3285],2127,1854,2126,[19],&quot;\n\t\t\t\t\t\t\t\t\t\t\t                                    &quot;,2128,1854,2127,[238,3367],2129,1854,2128,[19],&quot;\n\t                                &quot;,2130,1856,[19],&quot;\n\t\t\t\t\t\t\t\t\t\tDon&apos;t have an account? &quot;,2131,1856,2130,[1020,3380],2132,1856,2131,[19,356],2133,1858,[19,2335],2134,1858,2133,[1077],&quot;id=sso_frame&quot;,&quot;src=https://www.microfocus.com/marketplace/signin/sso&quot;,&quot;frameborder=0&quot;,&quot;height=0&quot;,&quot;width=0&quot;,[1082],2135,1858,2134,[19,2335],2136,1858,2135,[1077],&quot;src=https://login.microfocus.com/nidp/app&quot;,[9004,9005,9006,1082],2137,1858,2136,[19,1924],2138,1861,[6474,7981],&quot;d=M19.5,21l-5.6-5.6c-1.5,1.2-3.3,1.9-5.3,1.9C3.9,17.2,0,13.3,0,8.6C0,3.9,3.9,0,8.6,0\n\t\t\t                            c4.7,0,8.6,3.9,8.6,8.6c0,2-0.7,3.9-1.9,5.3l5.6,5.6L19.5,21z M8.6,2C5,2,2,5,2,8.6c0,3.6,3,6.6,6.6,6.6c3.6,0,6.6-3,6.6-6.6\n\t\t\t                            C15.2,5,12.2,2,8.6,2z&quot;,2139,1861,2138,[19,7965],2140,1867,[19,245],2141,1867,2140,[1020],&quot;href=/marketplace/appdelivery/content/testset-runner&quot;,&quot;class=each-app uk-animation-fade&quot;,2142,1867,2141,[19,217],2143,1868,[19,245],2144,1868,2143,[1020],&quot;href=/marketplace/appdelivery/content/eclipse-ide-integration-for-valueedge&quot;,[9038],2145,1868,2144,[19,217],2146,1869,[19,245],2147,1869,2146,[1020],&quot;href=/marketplace/appdelivery/content/jetbrains-intellij-idea-plugin-for-valueedge&quot;,[9038],2148,1869,2147,[19,217],2149,1870,[19,245],2150,1870,2149,[1020],&quot;href=/marketplace/appdelivery/content/loadrunner-developer&quot;,[9038],2151,1870,2150,[19,217],2152,1871,[19,245],2153,1871,2152,[1020],&quot;href=/marketplace/appdelivery/content/sap-solution-manager-connector-for-micro-focus-connect&quot;,[9038],2154,1871,2153,[19,217],2155,1872,[19,245],2156,1872,2155,[1020],&quot;href=/marketplace/appdelivery/content/micro-focus-connect-core&quot;,[9038],2157,1872,2156,[19,217],2158,1873,[19,245],2159,1873,2158,[1020],&quot;href=/marketplace/appdelivery/content/micro-focus-connect-connectors&quot;,[9038],2160,1873,2159,[19,217],2161,1874,[19,245],2162,1874,2161,[1020],&quot;href=/marketplace/appdelivery/content/coap-protocol&quot;,[9038],2163,1874,2162,[19,217],2164,1875,[19,245],2165,1875,2164,[1020],&quot;href=/marketplace/appdelivery/content/alm-test-management-for-jira&quot;,[9038],2166,1875,2165,[19,217],2167,1876,[19,245],2168,1876,2167,[1020],&quot;href=/marketplace/appdelivery/content/alm-quality-of-things-qot&quot;,[9038],2169,1876,2168,[19,217],2170,1877,[19,245],2171,1877,2170,[1020],&quot;href=/marketplace/appdelivery/content/sprinter&quot;,[9038],2172,1877,2171,[19,217],2173,1878,[19,245],2174,1878,2173,[1020],&quot;href=/marketplace/appdelivery/content/advantage-online-shopping-aos-demo-application&quot;,[9038],2175,1878,2174,[19,217],2176,1879,[19,245],2177,1879,2176,[1020],&quot;href=/marketplace/appdelivery/content/virtual-user-generator-vugen&quot;,[9038],2178,1879,2177,[19,217],2179,1880,[19,245],2180,1880,2179,[1020],&quot;href=/marketplace/appdelivery/content/uft-mobile-ios-content&quot;,[9038],2181,1880,2180,[19,217],2182,1881,[19,245],2183,1881,2182,[1020],&quot;href=/marketplace/appdelivery/content/alm-client-msi-generator-add&quot;,[9038],2184,1881,2183,[19,217],2185,1882,[19,245],2186,1882,2185,[1020],&quot;href=/marketplace/appdelivery/content/uft-extensibility-accelerator&quot;,[9038],2187,1882,2186,[19,217],2188,1883,[19,245],2189,1883,2188,[1020,9206,9038],2190,1883,2189,[19,217],2191,1884,[19,245],2192,1884,2191,[1020],&quot;href=/marketplace/appdelivery/content/uft-one-ms-hyper-v-image&quot;,[9038],2193,1884,2192,[19,217],2194,1885,[19,245],2195,1885,2194,[1020,9232,9038],2196,1885,2195,[19,217],2197,1886,[19,245],2198,1886,2197,[1020],&quot;href=/marketplace/appdelivery/content/uft-add-in-for-alm&quot;,[9038],2199,1886,2198,[19,217],2200,1887,[19,245],2201,1887,2200,[1020],&quot;href=/marketplace/appdelivery/content/uft-testing-extensibility-sdk&quot;,[9038],2202,1887,2201,[19,217],2203,1888,[19,245],2204,1888,2203,[1020,9167,9038],2205,1888,2204,[19,217],2206,1889,[19,245],2207,1889,2206,[1020],&quot;href=/marketplace/appdelivery/content/accurev-plug-in-for-eclipse&quot;,[9038],2208,1889,2207,[19,217],2209,1890,[19,245],2210,1890,2209,[1020],&quot;href=/marketplace/appdelivery/content/alm-octane-docker-container&quot;,[9038],2211,1890,2210,[19,217],2212,1891,[19,245],2213,1891,2212,[1020],&quot;href=/marketplace/appdelivery/content/deployment-automation-jenkins-plugin&quot;,[9038],2214,1891,2213,[19,217],2215,1892,[19,245],2216,1892,2215,[1020],&quot;href=/marketplace/appdelivery/content/deployment-automation-fortify-sca-plugin&quot;,[9038],2217,1892,2216,[19,217],2218,1893,[19,245],2219,1893,2218,[1020],&quot;href=/marketplace/appdelivery/content/deployment-automation-docker-compose-plugin&quot;,[9038],2220,1893,2219,[19,217],2221,1894,[19,245],2222,1894,2221,[1020],&quot;href=/marketplace/appdelivery/content/deployment-automation-elastic-beanstalk-plugin&quot;,[9038],2223,1894,2222,[19,217],2224,1895,[19,245],2225,1895,2224,[1020],&quot;href=/marketplace/appdelivery/content/release-control-jenkins-pipeline-plugin&quot;,[9038],2226,1895,2225,[19,217],2227,1896,[19,245],2228,1896,2227,[1020],&quot;href=/marketplace/appdelivery/content/deployment-automation-maven-build-plugin&quot;,[9038],2229,1896,2228,[19,217],2230,1897,[19,245],2231,1897,2230,[1020],&quot;href=/marketplace/appdelivery/content/uft-safari-extension&quot;,[9038],2232,1897,2231,[19,217],2233,1898,[19,245],2234,1898,2233,[1020],&quot;href=/marketplace/appdelivery/content/uft1400-testing-extensibility-sdk&quot;,[9038],2235,1898,2234,[19,217],2236,1899,[19,245],2237,1899,2236,[1020,9141,9038],2238,1899,2237,[19,217],2239,1900,[19,245],2240,1900,2239,[1020,9037,9038],2241,1900,2240,[19,217],2242,1901,[19,245],2243,1901,2242,[1020],&quot;href=/marketplace/appdelivery/content/nfarm-client-for-windows&quot;,[9038],2244,1901,2243,[19,217],2245,1902,[19,245],2246,1902,2245,[1020],&quot;href=/marketplace/appdelivery/content/iprint-client-for-mac&quot;,[9038],2247,1902,2246,[19,217],2248,1903,[19,245],2249,1903,2248,[1020,9206,9038],2250,1903,2249,[19,217],2251,1904,[19,245],2252,1904,2251,[1020],&quot;href=/marketplace/appdelivery/content/alm-integration-plug-ppm&quot;,[9038],2253,1904,2252,[19,217],2254,1905,[19,245],2255,1905,2254,[1020],&quot;href=/marketplace/appdelivery/content/iprint-client-for-windows&quot;,[9038],2256,1905,2255,[19,217],2257,1906,[19,245],2258,1906,2257,[1020,9050,9038],2259,1906,2258,[19,217],2260,1907,[19,245],2261,1907,2260,[1020,9063,9038],2262,1907,2261,[19,217],2263,1908,[19,245],2264,1908,2263,[1020],&quot;href=/marketplace/appdelivery/content/visual-studio-code-plugin-for-valueedge&quot;,[9038],2265,1908,2264,[19,217],2266,1909,[19,245],2267,1909,2266,[1020],&quot;href=/marketplace/appdelivery/content/alm-client-launcher&quot;,[9038],2268,1909,2267,[19,217],2269,1910,[19,245],2270,1910,2269,[1020],&quot;href=/marketplace/appdelivery/content/microsoft-excel-add&quot;,[9038],2271,1910,2270,[19,217],2272,1911,[19,245],2273,1911,2272,[1020],&quot;href=/marketplace/appdelivery/content/web-tours-sample-application&quot;,[9038],2274,1911,2273,[19,217],2275,1912,[19,245],2276,1912,2275,[1020,9193,9038],2277,1912,2276,[19,217],2278,1913,[19,245],2279,1913,2278,[1020],&quot;href=/marketplace/appdelivery/content/uft-one-ai-feature-model-v2&quot;,[9038],2280,1913,2279,[19,217],2281,1914,[19,245],2282,1914,2281,[1020],&quot;href=/marketplace/appdelivery/content/client-for-open-enterprise-server&quot;,[9038],2283,1914,2282,[19,217],2284,1915,[19,245],2285,1915,2284,[1020,9076,9038],2286,1915,2285,[19,217],2287,1916,[19,245],2288,1916,2287,[1020],&quot;href=/marketplace/appdelivery/content/alm-client-cleanup-add-in&quot;,[9038],2289,1916,2288,[19,217],2290,1917,[19,245],2291,1917,2290,[1020,9115,9038],2292,1917,2291,[19,217],2293,1918,[19,245],2294,1918,2293,[1020],&quot;href=/marketplace/appdelivery/content/business-views-microsoft-excel-add&quot;,[9038],2295,1918,2294,[19,217],2296,1919,[19,245],2297,1919,2296,[1020],&quot;href=/marketplace/appdelivery/content/loadrunner-detect&quot;,[9038],2298,1919,2297,[19,217],2299,1920,[19,245],2300,1920,2299,[1020,9519,9038],2301,1920,2300,[19,217],2302,1921,[19,245],2303,1921,2302,[1020,9219,9038],2304,1921,2303,[19,217],2305,1922,[19,245],2306,1922,2305,[1020],&quot;href=/marketplace/appdelivery/content/alm-explorer-add&quot;,[9038],2307,1922,2306,[19,217],2308,1923,[19,245],2309,1923,2308,[1020,9102,9038],2310,1923,2309,[19,217],2311,1924,[19,245],2312,1924,2311,[1020],&quot;href=/marketplace/appdelivery/content/shift-alm-octane-and-valueedge-migration-tool&quot;,[9038],2313,1924,2312,[19,217],2314,1926,[19,2193],2315,1926,2314,[2348],&quot;src=https://s3.amazonaws.com/marketplace2-public/marketplace_5/categories/9f9d60a1ad067df9ee0e7ca29edd8f3d422c2769.svg&quot;,&quot;data-src=https://s3.amazonaws.com/marketplace2-public/marketplace_5/categories/9f9d60a1ad067df9ee0e7ca29edd8f3d422c2769.svg&quot;,[4287,4250],2316,1926,2315,[19,2310],2317,1928,[19],&quot;Continuous Testing\n\t\t\t\t\t\t\t\t\t\t\t\t\t&quot;,2318,1930,[19,2193],2319,1930,2318,[1169,3904],2320,1930,2319,[19],&quot;View ▫▫\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\titems\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t&quot;,2321,1933,[19,2193],2322,1933,2321,[2348],&quot;src=https://s3.amazonaws.com/marketplace2-public/marketplace_5/categories/a9f6b19c67866ca3b4d7b8bc86eb4d06de66e2ff.svg&quot;,&quot;data-src=https://s3.amazonaws.com/marketplace2-public/marketplace_5/categories/a9f6b19c67866ca3b4d7b8bc86eb4d06de66e2ff.svg&quot;,[4287,4250],2323,1933,2322,[19,2310],2324,1935,[19],&quot;Developer Tools\n\t\t\t\t\t\t\t\t\t\t\t\t\t&quot;,2325,1937,[19,2193],2326,1937,2325,[1169,3904],2327,1937,2326,[19,9785],2328,1940,[19,2193],2329,1940,2328,[2348],&quot;src=https://s3.amazonaws.com/marketplace2-public/marketplace_5/categories/223096095a717b4a826e94cef3a9c58b5110b30c.svg&quot;,&quot;data-src=https://s3.amazonaws.com/marketplace2-public/marketplace_5/categories/223096095a717b4a826e94cef3a9c58b5110b30c.svg&quot;,[4287,4250],2330,1940,2329,[19,2310],2331,1942,[19],&quot;DevOps\n\t\t\t\t\t\t\t\t\t\t\t\t\t&quot;,2332,1944,[19,2193],2333,1944,2332,[1169,3904],2334,1944,2333,[19],&quot;View ▫▫▫\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\titems\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t&quot;,2335,1947,[19,2193],2336,1947,2335,[2348],&quot;src=https://s3.amazonaws.com/marketplace2-public/marketplace_5/categories/4d0ef50a59882d289ad8d13c5a6293155db555dd.svg&quot;,&quot;data-src=https://s3.amazonaws.com/marketplace2-public/marketplace_5/categories/4d0ef50a59882d289ad8d13c5a6293155db555dd.svg&quot;,[4287,4250],2337,1947,2336,[19,2310],2338,1949,[19],&quot;Digital UX\n\t\t\t\t\t\t\t\t\t\t\t\t\t&quot;,2339,1951,[19,2193],2340,1951,2339,[1169,3904],2341,1951,2340,[19,9785],2342,1954,[19,2193],2343,1954,2342,[2348],&quot;src=https://s3.amazonaws.com/marketplace2-public/marketplace_5/categories/80517adbc2f17920f6e923f2e99968ac7cdb4d93.svg&quot;,&quot;data-src=https://s3.amazonaws.com/marketplace2-public/marketplace_5/categories/80517adbc2f17920f6e923f2e99968ac7cdb4d93.svg&quot;,[4287,4250],2344,1954,2343,[19,2310],2345,1956,[19],&quot;Enterprise Agile\n\t\t\t\t\t\t\t\t\t\t\t\t\t&quot;,2346,1958,[19,2193],2347,1958,2346,[1169,3904],2348,1958,2347,[19,9785],2349,1961,[19,2193],2350,1961,2349,[2348],&quot;src=/marketplace/marketplace/images/lazyloader.gif&quot;,&quot;data-src=https://s3.amazonaws.com/marketplace2-public/marketplace_5/categories/86f0e9fd9deb721a3a2fdb2183875d64e0b0e018.svg&quot;,&quot;class=lazy&quot;,[4250],2351,1961,2350,[19,2310],2352,1963,[19],&quot;Micro Focus Subscription Management Tool\n\t\t\t\t\t\t\t\t\t\t\t\t\t&quot;,2353,1965,[19,2193],2354,1965,2353,[1169,3904],2355,1965,2354,[19],&quot;View ▫\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\titem\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t&quot;,2356,1968,[19,2193],2357,1968,2356,[2348,9910],&quot;data-src=https://s3.amazonaws.com/marketplace2-public/marketplace_5/categories/7ffa504ad718cc636b5cde6743550ef2ffe833cc.svg&quot;,[9912,4250],2358,1968,2357,[19,2310],2359,1970,[19],&quot;Open Enterprise Server\n\t\t\t\t\t\t\t\t\t\t\t\t\t&quot;,2360,1972,[19,2193],2361,1972,2360,[1169,3904],2362,1972,2361,[19,9785],2363,1975,[19,2193],2364,1975,2363,[2348,9910],&quot;data-src=https://s3.amazonaws.com/marketplace2-public/marketplace_5/categories/80652c5f782e8f38f7567d98f99e55f5254961ae.svg&quot;,[9912,4250],2365,1975,2364,[19,2310],2366,1977,[19],&quot;OpenText Filr\n\t\t\t\t\t\t\t\t\t\t\t\t\t&quot;,2367,1979,[19,2193],2368,1979,2367,[1169,3904],2369,1979,2368,[19],&quot;View ▫\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\titems\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t&quot;,2370,1982,[19,2193],2371,1982,2370,[2348,9910],&quot;data-src=https://s3.amazonaws.com/marketplace2-public/marketplace_5/categories/b419c052a179fab446c51aada2a70e821ace807f.svg&quot;,[9912,4250],2372,1982,2371,[19,2310],2373,1984,[19],&quot;Others\n\t\t\t\t\t\t\t\t\t\t\t\t\t&quot;,2374,1986,[19,2193],2375,1986,2374,[1169,3904],2376,1986,2375,[19,9990],2377,1989,[19,2193],2378,1989,2377,[2348,9910],&quot;data-src=https://s3.amazonaws.com/marketplace2-public/marketplace_5/categories/202b657f36fdff8b27b50e361917abf3a3b22b2b.svg&quot;,[9912,4250],2379,1989,2378,[19,2310],2380,1991,[19],&quot;Performance Engineering\n\t\t\t\t\t\t\t\t\t\t\t\t\t&quot;,2381,1993,[19,2193],2382,1993,2381,[1169,3904],2383,1993,2382,[19,9785],2384,1996,[19,3038],2385,1996,2384,[4399],&quot;id=company-name&quot;,&quot;class=uk-form-label&quot;,&quot;for=companyName&quot;,2386,1996,2385,[1768],2387,1996,2386,[19,3038],2388,1996,2387,[3282,4411],&quot;id=companyName&quot;,&quot;class=uk-width-2-3&quot;,&quot;name=companyName&quot;,&quot;aria-labelledby=company-name&quot;,2389,1996,2388,[19,3038],2390,1996,2389,[1721],&quot;id=companyValidation&quot;,[1958],2391,1996,2390,[19,2335],2392,2000,[19,3038],2393,2000,2392,[4399],&quot;id=company-url&quot;,[10055],&quot;for=companyUrl&quot;,2394,2000,2393,[1768],2395,2000,2394,[19,3038],2396,2000,2395,[3282,4411],&quot;id=companyUrl&quot;,[10070],&quot;name=companyUrl&quot;,&quot;aria-labelledby=company-url&quot;,2397,2000,2396,[19,3038],2398,2000,2397,[1721],&quot;id=companyUrlValidation&quot;,[1958],2399,2000,2398,[19,2335],2400,2006,[19,7424],2401,2010,[19,7466],2402,2014,[19,7504],2403,2018,[19,7542],2404,2023,[19],&quot;Filter Icon&quot;,2405,2024,[6474],&quot;fill=#fff&quot;,&quot;d=M400.858,11.427c-3.241-7.421-8.85-11.132-16.854-11.136H18.564c-7.993,0-13.61,3.715-16.846,11.136\n      c-3.234,7.801-1.903,14.467,3.999,19.985l140.757,140.753v138.755c0,4.955,1.809,9.232,5.424,12.854l73.085,73.083\n      c3.429,3.614,7.71,5.428,12.851,5.428c2.282,0,4.66-0.479,7.135-1.43c7.426-3.238,11.14-8.851,11.14-16.845V172.166L396.861,31.413\n      C402.765,25.895,404.093,19.231,400.858,11.427z&quot;,2406,2026,[238],&quot;class=ot-fltr-opt&quot;,2407,2027,[2949],&quot;id=filter-apply-handler&quot;,2408,2027,2407,[19,4221],2409,2027,2408,[2949],&quot;id=filter-cancel-handler&quot;,2410,2032,[1169,8487],2411,2034,[19],&quot;label&quot;,2412,2037,[1169,8487],2413,2039,[19,10171],2414,2042,[1169,8487],2415,2044,[19,10171],2416,2046,[19,3038],2417,2046,2416,[238],&quot;class=uk-grid grid-element&quot;,2418,2046,2417,[19,2335],2419,2048,[19,4531],2420,2048,2419,[238,10191],2421,2048,2420,[19,3038],2422,2050,[19,4531],2423,2050,2422,[238,10191],2424,2050,2423,[19,3038],2425,2052,[19,4531],2426,2052,2425,[238,10191],2427,2052,2426,[19,3038],2428,2054,[19,4531],2429,2054,2428,[238,10191],2430,2054,2429,[19,3038],2431,2056,[19,4531],2432,2056,2431,[238,10191],2433,2056,2432,[19,3038],2434,2058,[19,4531],2435,2058,2434,[238,10191],2436,2058,2435,[19,3038],2437,2060,[19,4531],2438,2060,2437,[238,10191],2439,2060,2438,[19,3038],2440,2062,[19,4531],2441,2062,2440,[238,10191],2442,2062,2441,[19,3038],2443,2064,[19,4531],2444,2064,2443,[238,10191],2445,2064,2444,[19,3038],2446,2066,[19,4531],2447,2066,2446,[238,10191],2448,2066,2447,[19,3038],2449,2070,[19,3038],2450,2070,2449,[238],&quot;class=grid-element&quot;,2451,2070,2450,[19,3038],2452,2070,2451,[238,10313],2453,2070,2452,[19,3038],2454,2070,2453,[238,10313],2455,2070,2454,[19,3038],2456,2070,2455,[238,10313],2457,2070,2456,[19,3038],2458,2070,2457,[238,10313],2459,2070,2458,[19,3038],2460,2070,2459,[238,10313],2461,2070,2460,[19,2335],2462,2074,[19,3038],2463,2074,2462,[238,10313],2464,2074,2463,[19,3038],2465,2074,2464,[238,10313],2466,2074,2465,[19,3038],2467,2074,2466,[238,10313],2468,2074,2467,[19,2335],2469,2078,[19,3038],2470,2078,2469,[238,10313],2471,2078,2470,[19,3038],2472,2078,2471,[238,10313],2473,2078,2472,[19,3038],2474,2078,2473,[238,10313],2475,2078,2474,[19,3038],2476,2078,2475,[238,10313],2477,2078,2476,[19,2335],2478,2082,[19,3038],2479,2082,2478,[238,10313],2480,2082,2479,[19,3038],2481,2082,2480,[238,10313],2482,2082,2481,[19,2335],2483,2088,[19,3038],2484,2088,2483,[1020],&quot;id=admin-all-items&quot;,[240,5908,4435],2485,2088,2484,[19,3038],2486,2088,2485,[1020],&quot;id=dev-items&quot;,[240,5920,4435],2487,2088,2486,[19,3038],2488,2088,2487,[1020],&quot;id=user-free-items&quot;,[5931,4435],2489,2088,2488,[19,4706],2490,2088,2489,[1721],2491,2088,2490,[19,2137],2492,2090,[19,3038],2493,2090,2492,[1020,4471,4435],2494,2090,2493,[19,2335],2495,2094,[19,2310],2496,2094,2495,[1020],&quot;id=header-signout&quot;,[4435],2497,2094,2496,[19,4531],2498,2097,[19],&quot;Close&quot;,2499,2103,[19,3038],2500,2103,2499,[19,3038],2501,2103,2500,[3282,4411],&quot;id=username2&quot;,&quot;name=_username2&quot;,[3248],&quot;placeholder=•••••••• •• •••••&quot;,&quot;aria-labelledby=header-username-lbl&quot;,[4509,6424],2502,2103,2501,[19,4515],2503,2103,2502,[1721,1958],2504,2103,2503,[19,2335],2505,2106,[19,4527],2506,2108,[19,4531],2507,2108,2506,[19,4531],2508,2108,2507,[3282,4540],&quot;id=password2&quot;,&quot;name=_password2&quot;,[4543,4544,4545],&quot;aria-labelledby=pwdLoginDivLabel&quot;,[3285],2509,2108,2508,[19,4531],2510,2108,2509,[1721,1958],2511,2108,2510,[19,3038],2512,2112,[19,4562],2513,2115,[19,4566],2514,2118,[19,4570],2515,2120,[3613,4574],2516,2123,[19,4531],2517,2123,2516,[238,666],2518,2123,2517,[19,3038],-2519,2128,[19,3038],2520,2128,2519,[1020],&quot;id=a-forgot-password&quot;,[1777],-2521,2128,2520,[19],&quot;\n\t                                    &quot;,2522,2131,[19,4602],2523,2134,[19,4221],2524,2141,[19,503],2525,2141,2524,[238],&quot;class=app-price&quot;,2526,2141,2525,[19,29],2527,2141,2526,[238],&quot;class=app-details&quot;,2528,2141,2527,[19,503],2529,2141,2528,[238],&quot;class=app-logo&quot;,2530,2141,2529,[19,245],2531,2144,[19,503],2532,2144,2531,[238,10618],2533,2144,2532,[19,29],2534,2144,2533,[238,10627],2535,2144,2534,[19,503],2536,2144,2535,[238,10636],2537,2144,2536,[19,245],2538,2147,[19,503],2539,2147,2538,[238,10618],2540,2147,2539,[19,29],2541,2147,2540,[238,10627],2542,2147,2541,[19,503],2543,2147,2542,[238,10636],2544,2147,2543,[19,245],2545,2150,[19,503],2546,2150,2545,[238,10618],2547,2150,2546,[19,29],2548,2150,2547,[238,10627],2549,2150,2548,[19,503],2550,2150,2549,[238,10636],2551,2150,2550,[19,245],2552,2153,[19,503],2553,2153,2552,[238,10618],2554,2153,2553,[19,29],2555,2153,2554,[238,10627],2556,2153,2555,[19,503],2557,2153,2556,[238,10636],2558,2153,2557,[19,245],2559,2156,[19,503],2560,2156,2559,[238,10618],2561,2156,2560,[19,29],2562,2156,2561,[238,10627],2563,2156,2562,[19,503],2564,2156,2563,[238,10636],2565,2156,2564,[19,245],2566,2159,[19,503],2567,2159,2566,[238,10618],2568,2159,2567,[19,29],2569,2159,2568,[238,10627],2570,2159,2569,[19,503],2571,2159,2570,[238,10636],2572,2159,2571,[19,245],2573,2162,[19,503],2574,2162,2573,[238,10618],2575,2162,2574,[19,29],2576,2162,2575,[238,10627],2577,2162,2576,[19,503],2578,2162,2577,[238,10636],2579,2162,2578,[19,245],2580,2165,[19,503],2581,2165,2580,[238,10618],2582,2165,2581,[19,29],2583,2165,2582,[238,10627],2584,2165,2583,[19,503],2585,2165,2584,[238,10636],2586,2165,2585,[19,245],2587,2168,[19,503],2588,2168,2587,[238,10618],2589,2168,2588,[19,29],2590,2168,2589,[238,10627],2591,2168,2590,[19,503],2592,2168,2591,[238,10636],2593,2168,2592,[19,245],2594,2171,[19,503],2595,2171,2594,[238,10618],2596,2171,2595,[19,29],2597,2171,2596,[238,10627],2598,2171,2597,[19,503],2599,2171,2598,[238,10636],2600,2171,2599,[19,245],2601,2174,[19,503],2602,2174,2601,[238,10618],2603,2174,2602,[19,29],2604,2174,2603,[238,10627],2605,2174,2604,[19,503],2606,2174,2605,[238,10636],2607,2174,2606,[19,245],2608,2177,[19,503],2609,2177,2608,[238,10618],2610,2177,2609,[19,29],2611,2177,2610,[238,10627],2612,2177,2611,[19,503],2613,2177,2612,[238,10636],2614,2177,2613,[19,245],2615,2180,[19,503],2616,2180,2615,[238,10618],2617,2180,2616,[19,29],2618,2180,2617,[238,10627],2619,2180,2618,[19,503],2620,2180,2619,[238,10636],2621,2180,2620,[19,245],2622,2183,[19,503],2623,2183,2622,[238,10618],2624,2183,2623,[19,29],2625,2183,2624,[238,10627],2626,2183,2625,[19,503],2627,2183,2626,[238,10636],2628,2183,2627,[19,245],2629,2186,[19,503],2630,2186,2629,[238,10618],2631,2186,2630,[19,29],2632,2186,2631,[238,10627],2633,2186,2632,[19,503],2634,2186,2633,[238,10636],2635,2186,2634,[19,245],2636,2189,[19,503],2637,2189,2636,[238,10618],2638,2189,2637,[19,29],2639,2189,2638,[238,10627],2640,2189,2639,[19,503],2641,2189,2640,[238,10636],2642,2189,2641,[19,245],2643,2192,[19,503],2644,2192,2643,[238,10618],2645,2192,2644,[19,29],2646,2192,2645,[238,10627],2647,2192,2646,[19,503],2648,2192,2647,[238,10636],2649,2192,2648,[19,245],2650,2195,[19,503],2651,2195,2650,[238,10618],2652,2195,2651,[19,29],2653,2195,2652,[238,10627],2654,2195,2653,[19,503],2655,2195,2654,[238,10636],2656,2195,2655,[19,245],2657,2198,[19,503],2658,2198,2657,[238,10618],2659,2198,2658,[19,29],2660,2198,2659,[238,10627],2661,2198,2660,[19,503],2662,2198,2661,[238,10636],2663,2198,2662,[19,245],2664,2201,[19,503],2665,2201,2664,[238,10618],2666,2201,2665,[19,29],2667,2201,2666,[238,10627],2668,2201,2667,[19,503],2669,2201,2668,[238,10636],2670,2201,2669,[19,245],2671,2204,[19,503],2672,2204,2671,[238,10618],2673,2204,2672,[19,29],2674,2204,2673,[238,10627],2675,2204,2674,[19,503],2676,2204,2675,[238,10636],2677,2204,2676,[19,245],2678,2207,[19,503],2679,2207,2678,[238,10618],2680,2207,2679,[19,29],2681,2207,2680,[238,10627],2682,2207,2681,[19,503],2683,2207,2682,[238,10636],2684,2207,2683,[19,245],2685,2210,[19,503],2686,2210,2685,[238,10618],2687,2210,2686,[19,29],2688,2210,2687,[238,10627],2689,2210,2688,[19,503],2690,2210,2689,[238,10636],2691,2210,2690,[19,245],2692,2213,[19,503],2693,2213,2692,[238,10618],2694,2213,2693,[19,29],2695,2213,2694,[238,10627],2696,2213,2695,[19,503],2697,2213,2696,[238,10636],2698,2213,2697,[19,245],2699,2216,[19,503],2700,2216,2699,[238,10618],2701,2216,2700,[19,29],2702,2216,2701,[238,10627],2703,2216,2702,[19,503],2704,2216,2703,[238,10636],2705,2216,2704,[19,245],2706,2219,[19,503],2707,2219,2706,[238,10618],2708,2219,2707,[19,29],2709,2219,2708,[238,10627],2710,2219,2709,[19,503],2711,2219,2710,[238,10636],2712,2219,2711,[19,245],2713,2222,[19,503],2714,2222,2713,[238,10618],2715,2222,2714,[19,29],2716,2222,2715,[238,10627],2717,2222,2716,[19,503],2718,2222,2717,[238,10636],2719,2222,2718,[19,245],2720,2225,[19,503],2721,2225,2720,[238,10618],2722,2225,2721,[19,29],2723,2225,2722,[238,10627],2724,2225,2723,[19,503],2725,2225,2724,[238,10636],2726,2225,2725,[19,245],2727,2228,[19,503],2728,2228,2727,[238,10618],2729,2228,2728,[19,29],2730,2228,2729,[238,10627],2731,2228,2730,[19,503],2732,2228,2731,[238,10636],2733,2228,2732,[19,245],2734,2231,[19,503],2735,2231,2734,[238,10618],2736,2231,2735,[19,29],2737,2231,2736,[238,10627],2738,2231,2737,[19,503],2739,2231,2738,[238,10636],2740,2231,2739,[19,245],2741,2234,[19,503],2742,2234,2741,[238,10618],2743,2234,2742,[19,29],2744,2234,2743,[238,10627],2745,2234,2744,[19,503],2746,2234,2745,[238,10636],2747,2234,2746,[19,245],2748,2237,[19,503],2749,2237,2748,[238,10618],2750,2237,2749,[19,29],2751,2237,2750,[238,10627],2752,2237,2751,[19,503],2753,2237,2752,[238,10636],2754,2237,2753,[19,245],2755,2240,[19,503],2756,2240,2755,[238,10618],2757,2240,2756,[19,29],2758,2240,2757,[238,10627],2759,2240,2758,[19,503],2760,2240,2759,[238,10636],2761,2240,2760,[19,245],2762,2243,[19,503],2763,2243,2762,[238,10618],2764,2243,2763,[19,29],2765,2243,2764,[238,10627],2766,2243,2765,[19,503],2767,2243,2766,[238,10636],2768,2243,2767,[19,245],2769,2246,[19,503],2770,2246,2769,[238,10618],2771,2246,2770,[19,29],2772,2246,2771,[238,10627],2773,2246,2772,[19,503],2774,2246,2773,[238,10636],2775,2246,2774,[19,245],2776,2249,[19,503],2777,2249,2776,[238,10618],2778,2249,2777,[19,29],2779,2249,2778,[238,10627],2780,2249,2779,[19,503],2781,2249,2780,[238,10636],2782,2249,2781,[19,245],2783,2252,[19,503],2784,2252,2783,[238,10618],2785,2252,2784,[19,29],2786,2252,2785,[238,10627],2787,2252,2786,[19,503],2788,2252,2787,[238,10636],2789,2252,2788,[19,245],2790,2255,[19,503],2791,2255,2790,[238,10618],2792,2255,2791,[19,29],2793,2255,2792,[238,10627],2794,2255,2793,[19,503],2795,2255,2794,[238,10636],2796,2255,2795,[19,245],2797,2258,[19,503],2798,2258,2797,[238,10618],2799,2258,2798,[19,29],2800,2258,2799,[238,10627],2801,2258,2800,[19,503],2802,2258,2801,[238,10636],2803,2258,2802,[19,245],2804,2261,[19,503],2805,2261,2804,[238,10618],2806,2261,2805,[19,29],2807,2261,2806,[238,10627],2808,2261,2807,[19,503],2809,2261,2808,[238,10636],2810,2261,2809,[19,245],2811,2264,[19,503],2812,2264,2811,[238,10618],2813,2264,2812,[19,29],2814,2264,2813,[238,10627],2815,2264,2814,[19,503],2816,2264,2815,[238,10636],2817,2264,2816,[19,245],2818,2267,[19,503],2819,2267,2818,[238,10618],2820,2267,2819,[19,29],2821,2267,2820,[238,10627],2822,2267,2821,[19,503],2823,2267,2822,[238,10636],2824,2267,2823,[19,245],2825,2270,[19,503],2826,2270,2825,[238,10618],2827,2270,2826,[19,29],2828,2270,2827,[238,10627],2829,2270,2828,[19,503],2830,2270,2829,[238,10636],2831,2270,2830,[19,245],2832,2273,[19,503],2833,2273,2832,[238,10618],2834,2273,2833,[19,29],2835,2273,2834,[238,10627],2836,2273,2835,[19,503],2837,2273,2836,[238,10636],2838,2273,2837,[19,245],2839,2276,[19,503],2840,2276,2839,[238,10618],2841,2276,2840,[19,29],2842,2276,2841,[238,10627],2843,2276,2842,[19,503],2844,2276,2843,[238,10636],2845,2276,2844,[19,245],2846,2279,[19,503],2847,2279,2846,[238,10618],2848,2279,2847,[19,29],2849,2279,2848,[238,10627],2850,2279,2849,[19,503],2851,2279,2850,[238,10636],2852,2279,2851,[19,245],2853,2282,[19,503],2854,2282,2853,[238,10618],2855,2282,2854,[19,29],2856,2282,2855,[238,10627],2857,2282,2856,[19,503],2858,2282,2857,[238,10636],2859,2282,2858,[19,245],2860,2285,[19,503],2861,2285,2860,[238,10618],2862,2285,2861,[19,29],2863,2285,2862,[238,10627],2864,2285,2863,[19,503],2865,2285,2864,[238,10636],2866,2285,2865,[19,245],2867,2288,[19,503],2868,2288,2867,[238,10618],2869,2288,2868,[19,29],2870,2288,2869,[238,10627],2871,2288,2870,[19,503],2872,2288,2871,[238,10636],2873,2288,2872,[19,245],2874,2291,[19,503],2875,2291,2874,[238,10618],2876,2291,2875,[19,29],2877,2291,2876,[238,10627],2878,2291,2877,[19,503],2879,2291,2878,[238,10636],2880,2291,2879,[19,245],2881,2294,[19,503],2882,2294,2881,[238,10618],2883,2294,2882,[19,29],2884,2294,2883,[238,10627],2885,2294,2884,[19,503],2886,2294,2885,[238,10636],2887,2294,2886,[19,245],2888,2297,[19,503],2889,2297,2888,[238,10618],2890,2297,2889,[19,29],2891,2297,2890,[238,10627],2892,2297,2891,[19,503],2893,2297,2892,[238,10636],2894,2297,2893,[19,245],2895,2300,[19,503],2896,2300,2895,[238,10618],2897,2300,2896,[19,29],2898,2300,2897,[238,10627],2899,2300,2898,[19,503],2900,2300,2899,[238,10636],2901,2300,2900,[19,245],2902,2303,[19,503],2903,2303,2902,[238,10618],2904,2303,2903,[19,29],2905,2303,2904,[238,10627],2906,2303,2905,[19,503],2907,2303,2906,[238,10636],2908,2303,2907,[19,245],2909,2306,[19,503],2910,2306,2909,[238,10618],2911,2306,2910,[19,29],2912,2306,2911,[238,10627],2913,2306,2912,[19,503],2914,2306,2913,[238,10636],2915,2306,2914,[19,245],2916,2309,[19,503],2917,2309,2916,[238,10618],2918,2309,2917,[19,29],2919,2309,2918,[238,10627],2920,2309,2919,[19,503],2921,2309,2920,[238,10636],2922,2309,2921,[19,245],2923,2312,[19,503],2924,2312,2923,[238,10618],2925,2312,2924,[19,29],2926,2312,2925,[238,10627],2927,2312,2926,[19,503],2928,2312,2927,[238,10636],2929,2312,2928,[19,245],2930,2319,[3613,5333],2931,2326,[3613,5333],2932,2333,[3613,5333],2933,2340,[3613,5333],2934,2347,[3613,5333],2935,2354,[3613,5333],2936,2361,[3613,5333],2937,2368,[3613,5333],2938,2375,[3613,5333],2939,2382,[3613,5333],2940,2385,[19],&quot;Company name&quot;,2941,2390,[19,4221],2942,2393,[19],&quot;Company website&quot;,2943,2398,[19,4221],2944,2406,[238,7618],2945,2407,[19],&quot;Apply&quot;,2946,2409,[19,4108],2947,2410,[19],&quot;checkbox label&quot;,2948,2412,[19,12237],2949,2414,[19,12237],2950,2417,[19,4531],2951,2417,2950,[238],&quot;class=uk-width-1-4 left&quot;,2952,2417,2951,[19,4531],2953,2417,2952,[238],&quot;class=uk-width-3-4 right&quot;,2954,2417,2953,[19,3038],2955,2420,[19,2310],2956,2420,2955,[238,12251],2957,2420,2956,[19,2310],2958,2420,2957,[238,12260],2959,2420,2958,[19,4531],2960,2423,[19,2310],2961,2423,2960,[238,12251],2962,2423,2961,[19,2310],2963,2423,2962,[238,12260],2964,2423,2963,[19,4531],2965,2426,[19,2310],2966,2426,2965,[238,12251],2967,2426,2966,[19,2310],2968,2426,2967,[238,12260],2969,2426,2968,[19,4531],2970,2429,[19,2310],2971,2429,2970,[238,12251],2972,2429,2971,[19,2310],2973,2429,2972,[238,12260],2974,2429,2973,[19,4531],2975,2432,[19,2310],2976,2432,2975,[238,12251],2977,2432,2976,[19,2310],2978,2432,2977,[238,12260],2979,2432,2978,[19,4531],2980,2435,[19,2310],2981,2435,2980,[238,12251],2982,2435,2981,[19,2310],2983,2435,2982,[238,12260],2984,2435,2983,[19,4531],2985,2438,[19,2310],2986,2438,2985,[238,12251],2987,2438,2986,[19,2310],2988,2438,2987,[238,12260],2989,2438,2988,[19,4531],2990,2441,[19,2310],2991,2441,2990,[238,12251],2992,2441,2991,[19,2310],2993,2441,2992,[238,12260],2994,2441,2993,[19,4531],2995,2444,[19,2310],2996,2444,2995,[238,12251],2997,2444,2996,[19,2310],2998,2444,2997,[238,12260],2999,2444,2998,[19,4531],3000,2447,[19,2310],3001,2447,3000,[238,12251],3002,2447,3001,[19,2310],3003,2447,3002,[238,12260],3004,2447,3003,[19,4531],3005,2450,[19,4531],3006,2450,3005,[238],3007,2450,3006,[19,4531],3008,2450,3007,[238],&quot;class=link-header&quot;,3009,2450,3008,[19],&quot;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t&quot;,3010,2450,3009,[1020,5908],3011,2450,3010,[19,4531],3012,2450,3011,[238],&quot;class=sub-tabs&quot;,3013,2450,3012,[19,4531],3014,2450,3013,[1020],&quot;href=/marketplace/appdelivery/dashboard/all-items?tab=published&quot;,3015,2450,3014,[19,4531],3016,2450,3015,[1020],&quot;href=/marketplace/appdelivery/dashboard/all-items?tab=draft&quot;,3017,2450,3016,[19,4531],3018,2450,3017,[1020],&quot;href=/marketplace/appdelivery/dashboard/all-items?tab=unpub&quot;,3019,2450,3018,[19,4531],3020,2450,3019,[1020],&quot;href=/marketplace/appdelivery/dashboard/all-items?tab=flagged&quot;,3021,2450,3020,[19,4531],3022,2450,3021,[1020],&quot;href=/marketplace/appdelivery/dashboard/manage-roles&quot;,3023,2450,3022,[19,4531],3024,2450,3023,[1020,4287],&quot;href=/marketplace/appdelivery/dashboard/entitlement-lookup&quot;,3025,2450,3024,[19,3038],3026,2452,[19,4531],3027,2452,3026,[238],3028,2452,3027,[19,4531],3029,2452,3028,[238,12470],3030,2452,3029,[19,4531],3031,2452,3030,[1020],&quot;href=/marketplace/appdelivery/dashboard/developers&quot;,3032,2452,3031,[19,4531],3033,2452,3032,[1020,4287],&quot;href=/marketplace/appdelivery/dashboard/downloads&quot;,3034,2452,3033,[19,4531],3035,2452,3034,[1020],&quot;href=/marketplace/appdelivery/dashboard/metrics&quot;,3036,2452,3035,[19,4531],3037,2452,3036,[1020],&quot;id=total-metrics-link&quot;,&quot;href=/marketplace/appdelivery/dashboard/total-metrics&quot;,[264],3038,2452,3037,[19,3038],3039,2454,[19,4531],3040,2454,3039,[238],3041,2454,3040,[19,4531],3042,2454,3041,[238,12470],3043,2454,3042,[19,4531],3044,2454,3043,[1020],&quot;href=/marketplace/appdelivery/dashboard/marketplace&quot;,3045,2454,3044,[19,4531],3046,2454,3045,[1020],&quot;href=/marketplace/appdelivery/dashboard/categories&quot;,3047,2454,3046,[19,4531],3048,2454,3047,[1020],&quot;href=/marketplace/appdelivery/dashboard/homepage&quot;,3049,2454,3048,[19,4531],3050,2454,3049,[1020,4287],&quot;href=/marketplace/appdelivery/dashboard/partner-pages&quot;,3051,2454,3050,[19,4531],3052,2454,3051,[1020],&quot;href=/marketplace/appdelivery/dashboard/developer-program-page&quot;,3053,2454,3052,[19,4531],3054,2454,3053,[1020],&quot;href=/marketplace/appdelivery/dashboard/companies&quot;,3055,2454,3054,[19,4531],3056,2454,3055,[1020],&quot;href=/marketplace/appdelivery/dashboard/products&quot;,3057,2454,3056,[19,3038],3058,2456,[19,4531],3059,2456,3058,[238],3060,2456,3059,[19,4531],3061,2456,3060,[238,12470],3062,2456,3061,[19,4531],3063,2456,3062,[1020,5920],3064,2456,3063,[19,4531],3065,2456,3064,[1020],&quot;href=/marketplace/appdelivery/dashboard/views-downloads&quot;,3066,2456,3065,[19,12475],3067,2456,3066,[1020],&quot;href=/marketplace/appdelivery/dashboard/all-companyapps&quot;,3068,2456,3067,[19],&quot;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t&quot;,3069,2458,[19],&quot;\n\n                                                \t\t\t\t\t\t\t\t\t\t\t\t\t&quot;,3070,2458,3069,[238],3071,2458,3070,[19,2310],3072,2458,3071,[238,12470],3073,2458,3072,[19],&quot;\n                                                \t\t\t\t\t\t\t\t\t\t\t\t&quot;,3074,2458,3073,[1020,5931],3075,2458,3074,[19,4706],3076,2460,[19,4531],3077,2460,3076,[238],3078,2460,3077,[19,4531],3079,2460,3078,[238,12470],3080,2460,3079,[19,4531],3081,2460,3080,[1020,4471],3082,2460,3081,[19,2310],3083,2460,3082,[1020],&quot;href=/marketplace/appdelivery/dashboard/notifications&quot;,3084,2460,3083,[19,3038],3085,2463,[19,4531],3086,2463,3085,[238],3087,2463,3086,[19,4531],3088,2463,3087,[238,12470],3089,2463,3088,[19,4531],3090,2463,3089,[1020,5920],3091,2463,3090,[19,4531],3092,2463,3091,[1020,12717],3093,2463,3092,[19],&quot;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t&quot;,3094,2463,3093,[1020,12726],3095,2463,3094,[19,2246],3096,2465,[19,4531],3097,2465,3096,[238],3098,2465,3097,[19,4531],3099,2465,3098,[238,12470],3100,2465,3099,[19,4531],3101,2465,3100,[1020,5931],3102,2465,3101,[19,4706],3103,2467,[19,4531],3104,2467,3103,[238],3105,2467,3104,[19,4531],3106,2467,3105,[238,12470],3107,2467,3106,[19,4531],3108,2467,3107,[1020,4471],3109,2467,3108,[19,4531],3110,2467,3109,[1020,12792],3111,2467,3110,[19,3038],3112,2470,[19,4531],3113,2470,3112,[238],3114,2470,3113,[19,4531],3115,2470,3114,[238,12470],3116,2470,3115,[19,4531],3117,2470,3116,[1020,5908],3118,2470,3117,[19,4531],3119,2470,3118,[238,12488],3120,2470,3119,[19,4531],3121,2470,3120,[1020,12497],3122,2470,3121,[19,4531],3123,2470,3122,[1020,12506],3124,2470,3123,[19,4531],3125,2470,3124,[1020,12515],3126,2470,3125,[19,4531],3127,2470,3126,[1020,12524],3128,2470,3127,[19,12475],3129,2470,3128,[1020,4287,12542],3130,2470,3129,[19,3038],3131,2472,[19,4531],3132,2472,3131,[238],3133,2472,3132,[19,4531],3134,2472,3133,[238,12470],3135,2472,3134,[19,4531],3136,2472,3135,[1020,5920],3137,2472,3136,[19,4531],3138,2472,3137,[1020,12717],3139,2472,3138,[19,12832],3140,2472,3139,[1020,12726],3141,2472,3140,[19,2246],3142,2474,[19,4531],3143,2474,3142,[238],3144,2474,3143,[19,4531],3145,2474,3144,[238,12470],3146,2474,3145,[19,4531],3147,2474,3146,[1020,5931],3148,2474,3147,[19,4706],3149,2476,[19,4531],3150,2476,3149,[238],3151,2476,3150,[19,4531],3152,2476,3151,[238,12470],3153,2476,3152,[19,4531],3154,2476,3153,[1020,4471],3155,2476,3154,[19,4531],3156,2476,3155,[1020,12792],3157,2476,3156,[19,3038],3158,2479,[19,4531],3159,2479,3158,[238],3160,2479,3159,[19,4531],3161,2479,3160,[238,12470],3162,2479,3161,[19,4531],3163,2479,3162,[1020,5931],3164,2479,3163,[19,4706],3165,2481,[19,4531],3166,2481,3165,[238],3167,2481,3166,[19,4531],3168,2481,3167,[238,12470],3169,2481,3168,[19,4531],3170,2481,3169,[1020,4471],3171,2481,3170,[19,12832],3172,2481,3171,[1020,12792],3173,2481,3172,[19,4706],3174,2484,[19,5940],3175,2486,[19,5940],3176,2488,[19,5940],3177,2490,[19],&quot;See and manage items, upgrades, and purchases.&quot;,3178,2493,[19],&quot;My profile&quot;,3179,2496,[19,5954],3180,2515,[19,5965],3181,2517,[19,2310],3182,2517,3181,[238,1091],3183,2517,3182,[19,2310],3184,2517,3183,[238,1101],3185,2517,3184,[19,4531],-3186,2520,[19,5988],3187,2134,[3023],3188,2136,[3023],3189,2525,[19],&quot;\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tFREE\n\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t                \n\t\t\t\t\t\t&quot;,3190,2527,[19],&quot;\n\t\t\t\t            &quot;,3191,2527,3190,[238],&quot;class=new-app&quot;,3192,2527,3191,[19],&quot;\n\t\t\t\t    \t\t            &quot;,3193,2527,3192,[238],&quot;class=app-category community&quot;,3194,2527,3193,[19],&quot;\n\t        \t        \t\t\t\t&quot;,3195,2527,3194,[935],3196,2527,3195,[19],&quot;\t\n\t\t\t\t\t\t&quot;,3197,2527,3196,[1721],3198,2527,3197,[1721],3199,2527,3198,[238],&quot;class=app-description&quot;,3200,2527,3199,[19,212],3201,2527,3200,[238],&quot;class=app-stats-spacer&quot;,3202,2527,3201,[19,212],3203,2527,3202,[238],&quot;class=app-stats&quot;,3204,2527,3203,[19,13203],3205,2527,3204,[2348],&quot;src=/marketplace/marketplace/images/badge_new_corner.png&quot;,[13208,4250],3206,2527,3205,[19],&quot;\n\t\t\t\n\n\t\t&quot;,3207,2529,[19],&quot;\n\t\t \t\t\t\t\t\t\t\t\t\t&quot;,3208,2529,3207,[2348,9910],&quot;data-src=https://s3.amazonaws.com/marketplace2-public/marketplace_5/f8486cca52889cfee8c91f560dcf94844c9f4fd2/logos/46a1a7c78ee81cd8be9f20fb27c567a3eea1fb60_300x300.png&quot;,[9912,4250],3209,2529,3208,[19],&quot;                    \n\t\t\t\t \n\t\t\t\t\t\t\t\t\t&quot;,3210,2532,[19,2102],3211,2534,[19,13203],3212,2534,3211,[238,13208],3213,2534,3212,[19,13213],3214,2534,3213,[238],&quot;class=app-category mf&quot;,3215,2534,3214,[19],&quot;\n\t\t\t\t        \t\t\t\t&quot;,3216,2534,3215,[935],3217,2534,3216,[19,13232],3218,2534,3217,[1721],3219,2534,3218,[1721],3220,2534,3219,[238,13245],3221,2534,3220,[19,212],3222,2534,3221,[238,13254],3223,2534,3222,[19,212],3224,2534,3223,[238,13263],3225,2534,3224,[19,13203],3226,2534,3225,[2348,13272,13208,4250],3227,2534,3226,[19,13278],3228,2536,[19,13282],3229,2536,3228,[2348,9910],&quot;data-src=https://d3075pyijv0bbs.cloudfront.net/opentext_logo.svg&quot;,[9912,4250],3230,2536,3229,[19],&quot;\n\t\t\t\t \n\t\t\t\t\t\t\t\t\t&quot;,3231,2539,[19,2102],3232,2541,[19,13203],3233,2541,3232,[238,13208],3234,2541,3233,[19,13213],3235,2541,3234,[238,13312],3236,2541,3235,[19,13317],3237,2541,3236,[935],3238,2541,3237,[19,13232],3239,2541,3238,[1721],3240,2541,3239,[1721],3241,2541,3240,[238,13245],3242,2541,3241,[19,212],3243,2541,3242,[238,13254],3244,2541,3243,[19,212],3245,2541,3244,[238,13263],3246,2541,3245,[19,13203],3247,2541,3246,[2348,13272,13208,4250],3248,2541,3247,[19,13278],3249,2543,[19,13282],3250,2543,3249,[2348,9910,13373,9912,4250],3251,2543,3250,[19,13379],3252,2546,[19,13199],3253,2548,[19,723],3254,2548,3253,[238],&quot;class=uk-hidden new-app&quot;,3255,2548,3254,[19,13213],3256,2548,3255,[238,13312],3257,2548,3256,[19,13317],3258,2548,3257,[935],3259,2548,3258,[19,13232],3260,2548,3259,[1721],3261,2548,3260,[1721],3262,2548,3261,[238,13245],3263,2548,3262,[19,212],3264,2548,3263,[238,13254],3265,2548,3264,[19,212],3266,2548,3265,[238,13263],3267,2548,3266,[19,13278],3268,2550,[19,13282],3269,2550,3268,[2348,9910],&quot;data-src=https://d3075pyijv0bbs.cloudfront.net/marketplace_5/d5b6b8fb587795fdc0ac288be040bd37df65b618/logos/975ca4a09ab3a66de783967b6039fdba3e87c52f.png&quot;,[9912,4250],3270,2550,3269,[19,13379],3271,2553,[19,13199],3272,2555,[19,723],3273,2555,3272,[238,13471],3274,2555,3273,[19,13213],3275,2555,3274,[238,13312],3276,2555,3275,[19,13317],3277,2555,3276,[935],3278,2555,3277,[19,13232],3279,2555,3278,[1721],3280,2555,3279,[1721],3281,2555,3280,[238,13245],3282,2555,3281,[19,212],3283,2555,3282,[238,13254],3284,2555,3283,[19,212],3285,2555,3284,[238,13263],3286,2555,3285,[19,13278],3287,2557,[19,13282],3288,2557,3287,[2348,9910,13373,9912,4250],3289,2557,3288,[19,13379],3290,2560,[19,13199],3291,2562,[19,723],3292,2562,3291,[238,13471],3293,2562,3292,[19,13213],3294,2562,3293,[238,13312],3295,2562,3294,[19,13317],3296,2562,3295,[935],3297,2562,3296,[19,13232],3298,2562,3297,[1721],3299,2562,3298,[1721],3300,2562,3299,[238,13245],3301,2562,3300,[19,212],3302,2562,3301,[238,13254],3303,2562,3302,[19,212],3304,2562,3303,[238,13263],3305,2562,3304,[19,13278],3306,2564,[19,13282],3307,2564,3306,[2348,9910,13373,9912,4250],3308,2564,3307,[19,13379],3309,2567,[19,2102],3310,2569,[19,723],3311,2569,3310,[238,13471],3312,2569,3311,[19,13213],3313,2569,3312,[238,13312],3314,2569,3313,[19,13317],3315,2569,3314,[935],3316,2569,3315,[19,13232],3317,2569,3316,[1721],3318,2569,3317,[1721],3319,2569,3318,[238,13245],3320,2569,3319,[19,212],3321,2569,3320,[238,13254],3322,2569,3321,[19,212],3323,2569,3322,[238,13263],3324,2569,3323,[19,13278],3325,2571,[19,13282],3326,2571,3325,[2348,9910,13373,9912,4250],3327,2571,3326,[19,13379],3328,2574,[19,13199],3329,2576,[19,723],3330,2576,3329,[238,13471],3331,2576,3330,[19,13213],3332,2576,3331,[238,13312],3333,2576,3332,[19,13317],3334,2576,3333,[935],3335,2576,3334,[19,13232],3336,2576,3335,[1721],3337,2576,3336,[1721],3338,2576,3337,[238,13245],3339,2576,3338,[19,212],3340,2576,3339,[238,13254],3341,2576,3340,[19,212],3342,2576,3341,[238,13263],3343,2576,3342,[19,13278],3344,2578,[19,13282],3345,2578,3344,[2348,9910],&quot;data-src=https://d3075pyijv0bbs.cloudfront.net/marketplace_5/69c6984e3b507b50c8247663d77a2b0fbbe3c2d7/logos/8691ad1965bace90a140db5143387abc11887d10.png&quot;,[9912,4250],3346,2578,3345,[19,13379],3347,2581,[19,13199],3348,2583,[19,13203],3349,2583,3348,[238,13208],3350,2583,3349,[19,13213],3351,2583,3350,[238,13312],3352,2583,3351,[19,13317],3353,2583,3352,[935],3354,2583,3353,[19,13232],3355,2583,3354,[1721],3356,2583,3355,[1721],3357,2583,3356,[238,13245],3358,2583,3357,[19,212],3359,2583,3358,[238,13254],3360,2583,3359,[19,212],3361,2583,3360,[238,13263],3362,2583,3361,[19,13203],3363,2583,3362,[2348,13272,13208,4250],3364,2583,3363,[19,13278],3365,2585,[19,13282],3366,2585,3365,[2348,9910,13373,9912,4250],3367,2585,3366,[19,13379],3368,2588,[19,13199],3369,2590,[19,723],3370,2590,3369,[238,13471],3371,2590,3370,[19,13213],3372,2590,3371,[238,13312],3373,2590,3372,[19,13317],3374,2590,3373,[935],3375,2590,3374,[19,13232],3376,2590,3375,[1721],3377,2590,3376,[1721],3378,2590,3377,[238,13245],3379,2590,3378,[19,212],3380,2590,3379,[238,13254],3381,2590,3380,[19,212],3382,2590,3381,[238,13263],3383,2590,3382,[19,13278],3384,2592,[19,13282],3385,2592,3384,[2348,9910,13373,9912,4250],3386,2592,3385,[19,13379],3387,2595,[19,13199],3388,2597,[19,723],3389,2597,3388,[238,13471],3390,2597,3389,[19,13213],3391,2597,3390,[238,13312],3392,2597,3391,[19,13317],3393,2597,3392,[935],3394,2597,3393,[19,13232],3395,2597,3394,[1721],3396,2597,3395,[1721],3397,2597,3396,[238,13245],3398,2597,3397,[19,212],3399,2597,3398,[238,13254],3400,2597,3399,[19,212],3401,2597,3400,[238,13263],3402,2597,3401,[19,13278],3403,2599,[19,13282],3404,2599,3403,[2348,9910,13373,9912,4250],3405,2599,3404,[19,13379],3406,2602,[19,13199],3407,2604,[19,723],3408,2604,3407,[238,13471],3409,2604,3408,[19,13213],3410,2604,3409,[238,13312],3411,2604,3410,[19,13317],3412,2604,3411,[935],3413,2604,3412,[19,13232],3414,2604,3413,[1721],3415,2604,3414,[1721],3416,2604,3415,[238,13245],3417,2604,3416,[19,212],3418,2604,3417,[238,13254],3419,2604,3418,[19,212],3420,2604,3419,[238,13263],3421,2604,3420,[19,13278],3422,2606,[19,13282],3423,2606,3422,[2348,9910],&quot;data-src=https://d3075pyijv0bbs.cloudfront.net/marketplace_5/8eafb841f69dd146b428211c29354e5f2ace47e1/logos/4c1366415a765008f0d943f1fae542a861e547e0.jpg&quot;,[9912,4250],3424,2606,3423,[19,13379],3425,2609,[19,2102],3426,2611,[19,723],3427,2611,3426,[238,13471],3428,2611,3427,[19,13213],3429,2611,3428,[238,13312],3430,2611,3429,[19,13317],3431,2611,3430,[935],3432,2611,3431,[19,13232],3433,2611,3432,[1721],3434,2611,3433,[1721],3435,2611,3434,[238,13245],3436,2611,3435,[19,212],3437,2611,3436,[238,13254],3438,2611,3437,[19,212],3439,2611,3438,[238,13263],3440,2611,3439,[19,13278],3441,2613,[19,13282],3442,2613,3441,[2348,9910],&quot;data-src=https://d3075pyijv0bbs.cloudfront.net/marketplace_5/c9ce475fbb8242cacc7a1340d1bbf63d596434de/logos/2a16facacf2128ad55fc5840ca63af221c2a25ae.png&quot;,[9912,4250],3443,2613,3442,[19,13379],3444,2616,[19,2102],3445,2618,[19,13203],3446,2618,3445,[238,13208],3447,2618,3446,[19,13213],3448,2618,3447,[238,13312],3449,2618,3448,[19,13317],3450,2618,3449,[935],3451,2618,3450,[19,13232],3452,2618,3451,[1721],3453,2618,3452,[1721],3454,2618,3453,[238,13245],3455,2618,3454,[19,212],3456,2618,3455,[238,13254],3457,2618,3456,[19,212],3458,2618,3457,[238,13263],3459,2618,3458,[19,13203],3460,2618,3459,[2348,13272,13208,4250],3461,2618,3460,[19,13278],3462,2620,[19,13282],3463,2620,3462,[2348,9910],&quot;data-src=https://d3075pyijv0bbs.cloudfront.net/marketplace_5/81d62e66ddc2d5c57229b207db9223934a61cdfc/logos/097a64be5eb40b97f41241302f614bdb00f95209.png&quot;,[9912,4250],3464,2620,3463,[19,13379],3465,2623,[19,2102],3466,2625,[19,13203],3467,2625,3466,[238,13208],3468,2625,3467,[19,13213],3469,2625,3468,[238,13312],3470,2625,3469,[19,13317],3471,2625,3470,[935],3472,2625,3471,[19,13232],3473,2625,3472,[1721],3474,2625,3473,[1721],3475,2625,3474,[238,13245],3476,2625,3475,[19,212],3477,2625,3476,[238,13254],3478,2625,3477,[19,212],3479,2625,3478,[238,13263],3480,2625,3479,[19,13203],3481,2625,3480,[2348,13272,13208,4250],3482,2625,3481,[19,13278],3483,2627,[19,13282],3484,2627,3483,[2348,9910,13373,9912,4250],3485,2627,3484,[19,13379],3486,2630,[19,13199],3487,2632,[19,723],3488,2632,3487,[238,13471],3489,2632,3488,[19,13213],3490,2632,3489,[238,13312],3491,2632,3490,[19,13317],3492,2632,3491,[935],3493,2632,3492,[19,13232],3494,2632,3493,[1721],3495,2632,3494,[1721],3496,2632,3495,[238,13245],3497,2632,3496,[19,212],3498,2632,3497,[238,13254],3499,2632,3498,[19,212],3500,2632,3499,[238,13263],3501,2632,3500,[19,13278],3502,2634,[19,13282],3503,2634,3502,[2348,9910,13373,9912,4250],3504,2634,3503,[19,13379],3505,2637,[19,2102],3506,2639,[19,13203],3507,2639,3506,[238,13208],3508,2639,3507,[19,13213],3509,2639,3508,[238,13312],3510,2639,3509,[19,13317],3511,2639,3510,[935],3512,2639,3511,[19,13232],3513,2639,3512,[1721],3514,2639,3513,[1721],3515,2639,3514,[238,13245],3516,2639,3515,[19,212],3517,2639,3516,[238,13254],3518,2639,3517,[19,212],3519,2639,3518,[238,13263],3520,2639,3519,[19,13203],3521,2639,3520,[2348,13272,13208,4250],3522,2639,3521,[19,13278],3523,2641,[19,13282],3524,2641,3523,[2348,9910,14285,9912,4250],3525,2641,3524,[19,13379],3526,2644,[19,2102],3527,2646,[19,723],3528,2646,3527,[238,13471],3529,2646,3528,[19,13213],3530,2646,3529,[238,13312],3531,2646,3530,[19,13317],3532,2646,3531,[935],3533,2646,3532,[19,13232],3534,2646,3533,[1721],3535,2646,3534,[1721],3536,2646,3535,[238,13245],3537,2646,3536,[19,212],3538,2646,3537,[238,13254],3539,2646,3538,[19,212],3540,2646,3539,[238,13263],3541,2646,3540,[19,13278],3542,2648,[19,13282],3543,2648,3542,[2348,9910,13373,9912,4250],3544,2648,3543,[19,13379],3545,2651,[19,13199],3546,2653,[19,723],3547,2653,3546,[238,13471],3548,2653,3547,[19,13213],3549,2653,3548,[238,13312],3550,2653,3549,[19,13317],3551,2653,3550,[935],3552,2653,3551,[19,13232],3553,2653,3552,[1721],3554,2653,3553,[1721],3555,2653,3554,[238,13245],3556,2653,3555,[19,212],3557,2653,3556,[238,13254],3558,2653,3557,[19,212],3559,2653,3558,[238,13263],3560,2653,3559,[19,13278],3561,2655,[19,13282],3562,2655,3561,[2348,9910,13373,9912,4250],3563,2655,3562,[19,13379],3564,2658,[19,13199],3565,2660,[19,723],3566,2660,3565,[238,13471],3567,2660,3566,[19,13213],3568,2660,3567,[238,13312],3569,2660,3568,[19,13317],3570,2660,3569,[935],3571,2660,3570,[19,13232],3572,2660,3571,[1721],3573,2660,3572,[1721],3574,2660,3573,[238,13245],3575,2660,3574,[19,212],3576,2660,3575,[238,13254],3577,2660,3576,[19,212],3578,2660,3577,[238,13263],3579,2660,3578,[19,13278],3580,2662,[19,13282],3581,2662,3580,[2348,9910,13373,9912,4250],3582,2662,3581,[19,13379],3583,2665,[19,13199],3584,2667,[19,723],3585,2667,3584,[238,13471],3586,2667,3585,[19,13213],3587,2667,3586,[238,13312],3588,2667,3587,[19,13317],3589,2667,3588,[935],3590,2667,3589,[19,13232],3591,2667,3590,[1721],3592,2667,3591,[1721],3593,2667,3592,[238,13245],3594,2667,3593,[19,212],3595,2667,3594,[238,13254],3596,2667,3595,[19,212],3597,2667,3596,[238,13263],3598,2667,3597,[19,13278],3599,2669,[19,13282],3600,2669,3599,[2348,9910,13373,9912,4250],3601,2669,3600,[19,13379],3602,2672,[19,13199],3603,2674,[19,723],3604,2674,3603,[238,13471],3605,2674,3604,[19,13213],3606,2674,3605,[238,13312],3607,2674,3606,[19,13317],3608,2674,3607,[935],3609,2674,3608,[19,13232],3610,2674,3609,[1721],3611,2674,3610,[1721],3612,2674,3611,[238,13245],3613,2674,3612,[19,212],3614,2674,3613,[238,13254],3615,2674,3614,[19,212],3616,2674,3615,[238,13263],3617,2674,3616,[19,13278],3618,2676,[19,13282],3619,2676,3618,[2348,9910,13373,9912,4250],3620,2676,3619,[19,13379],3621,2679,[19,13199],3622,2681,[19,723],3623,2681,3622,[238,13471],3624,2681,3623,[19,13213],3625,2681,3624,[238,13312],3626,2681,3625,[19,13317],3627,2681,3626,[935],3628,2681,3627,[19,13232],3629,2681,3628,[1721],3630,2681,3629,[1721],3631,2681,3630,[238,13245],3632,2681,3631,[19,212],3633,2681,3632,[238,13254],3634,2681,3633,[19,212],3635,2681,3634,[238,13263],3636,2681,3635,[19,13278],3637,2683,[19,13282],3638,2683,3637,[2348,9910,13373,9912,4250],3639,2683,3638,[19,13379],3640,2686,[19,13199],3641,2688,[19,723],3642,2688,3641,[238,13471],3643,2688,3642,[19,13213],3644,2688,3643,[238,13312],3645,2688,3644,[19,13317],3646,2688,3645,[935],3647,2688,3646,[19,13232],3648,2688,3647,[1721],3649,2688,3648,[1721],3650,2688,3649,[238,13245],3651,2688,3650,[19,212],3652,2688,3651,[238,13254],3653,2688,3652,[19,212],3654,2688,3653,[238,13263],3655,2688,3654,[19,13278],3656,2690,[19,13282],3657,2690,3656,[2348,9910,13373,9912,4250],3658,2690,3657,[19,13379],3659,2693,[19,13199],3660,2695,[19,723],3661,2695,3660,[238,13471],3662,2695,3661,[19,13213],3663,2695,3662,[238,13312],3664,2695,3663,[19,13317],3665,2695,3664,[935],3666,2695,3665,[19,13232],3667,2695,3666,[1721],3668,2695,3667,[1721],3669,2695,3668,[238,13245],3670,2695,3669,[19,212],3671,2695,3670,[238,13254],3672,2695,3671,[19,212],3673,2695,3672,[238,13263],3674,2695,3673,[19,13278],3675,2697,[19,13282],3676,2697,3675,[2348,9910,13373,9912,4250],3677,2697,3676,[19,13379],3678,2700,[19,13199],3679,2702,[19,723],3680,2702,3679,[238,13471],3681,2702,3680,[19,13213],3682,2702,3681,[238,13312],3683,2702,3682,[19,13317],3684,2702,3683,[935],3685,2702,3684,[19,13232],3686,2702,3685,[1721],3687,2702,3686,[1721],3688,2702,3687,[238,13245],3689,2702,3688,[19,212],3690,2702,3689,[238,13254],3691,2702,3690,[19,212],3692,2702,3691,[238,13263],3693,2702,3692,[19,13278],3694,2704,[19,13282],3695,2704,3694,[2348,9910],&quot;data-src=https://d3075pyijv0bbs.cloudfront.net/marketplace_5/5651ad144172a75b7c56255c6b0a9f0fcd798557/logos/bf8a68d61dda8d2063997bd715f553e1eb6ae22c_300x300.png&quot;,[9912,4250],3696,2704,3695,[19,13293],3697,2707,[19,13199],3698,2709,[19,723],3699,2709,3698,[238,13471],3700,2709,3699,[19,13213],3701,2709,3700,[238,13312],3702,2709,3701,[19,13317],3703,2709,3702,[935],3704,2709,3703,[19,13232],3705,2709,3704,[1721],3706,2709,3705,[1721],3707,2709,3706,[238,13245],3708,2709,3707,[19,212],3709,2709,3708,[238,13254],3710,2709,3709,[19,212],3711,2709,3710,[238,13263],3712,2709,3711,[19,13278],3713,2711,[19,13282],3714,2711,3713,[2348,9910,13373,9912,4250],3715,2711,3714,[19,13379],3716,2714,[19,13199],3717,2716,[19,723],3718,2716,3717,[238,13471],3719,2716,3718,[19,13213],3720,2716,3719,[238,13312],3721,2716,3720,[19,13317],3722,2716,3721,[935],3723,2716,3722,[19,13232],3724,2716,3723,[1721],3725,2716,3724,[1721],3726,2716,3725,[238,13245],3727,2716,3726,[19,212],3728,2716,3727,[238,13254],3729,2716,3728,[19,212],3730,2716,3729,[238,13263],3731,2716,3730,[19,13278],3732,2718,[19,13282],3733,2718,3732,[2348,9910],&quot;data-src=https://d3075pyijv0bbs.cloudfront.net/marketplace_5/c64b6363568ff6edffcf7466eab8d59e0e50c6d7/logos/9141251bc965b883859f891e86c1de3f6484485e_300x300.png&quot;,[9912,4250],3734,2718,3733,[19,13293],3735,2721,[19,13199],3736,2723,[19,723],3737,2723,3736,[238,13471],3738,2723,3737,[19,13213],3739,2723,3738,[238,13312],3740,2723,3739,[19,13317],3741,2723,3740,[935],3742,2723,3741,[19,13232],3743,2723,3742,[1721],3744,2723,3743,[1721],3745,2723,3744,[238,13245],3746,2723,3745,[19,212],3747,2723,3746,[238,13254],3748,2723,3747,[19,212],3749,2723,3748,[238,13263],3750,2723,3749,[19,13278],3751,2725,[19,13282],3752,2725,3751,[2348,9910,13373,9912,4250],3753,2725,3752,[19,13379],3754,2728,[19,13199],3755,2730,[19,723],3756,2730,3755,[238,13471],3757,2730,3756,[19,13213],3758,2730,3757,[238,13312],3759,2730,3758,[19,13317],3760,2730,3759,[935],3761,2730,3760,[19,13232],3762,2730,3761,[1721],3763,2730,3762,[1721],3764,2730,3763,[238,13245],3765,2730,3764,[19,212],3766,2730,3765,[238,13254],3767,2730,3766,[19,212],3768,2730,3767,[238,13263],3769,2730,3768,[19,13278],3770,2732,[19,13282],3771,2732,3770,[2348,9910],&quot;data-src=https://d3075pyijv0bbs.cloudfront.net/marketplace_5/d8877048e405c73d1821efc5cc64aa8bd5bb8d78/logos/047e2c361d15d2576056929bdbf38bbdac7a2260_300x300.png&quot;,[9912,4250],3772,2732,3771,[19,13293],3773,2735,[19,13199],3774,2737,[19,723],3775,2737,3774,[238,13471],3776,2737,3775,[19,13213],3777,2737,3776,[238,13218],3778,2737,3777,[19,13223],3779,2737,3778,[935],3780,2737,3779,[19,13232],3781,2737,3780,[1721],3782,2737,3781,[1721],3783,2737,3782,[238,13245],3784,2737,3783,[19,212],3785,2737,3784,[238,13254],3786,2737,3785,[19,212],3787,2737,3786,[238,13263],3788,2737,3787,[19,13278],3789,2739,[19,13282],3790,2739,3789,[2348,9910,13373,9912,4250],3791,2739,3790,[19,13379],3792,2742,[19,13199],3793,2744,[19,723],3794,2744,3793,[238,13471],3795,2744,3794,[19,13213],3796,2744,3795,[238,13218],3797,2744,3796,[19,13223],3798,2744,3797,[935],3799,2744,3798,[19,13232],3800,2744,3799,[1721],3801,2744,3800,[1721],3802,2744,3801,[238,13245],3803,2744,3802,[19,212],3804,2744,3803,[238,13254],3805,2744,3804,[19,212],3806,2744,3805,[238,13263],3807,2744,3806,[19,13278],3808,2746,[19,13282],3809,2746,3808,[2348,9910,13373,9912,4250],3810,2746,3809,[19,13379],3811,2749,[19,13199],3812,2751,[19,13203],3813,2751,3812,[238,13208],3814,2751,3813,[19,13213],3815,2751,3814,[238,13312],3816,2751,3815,[19,13317],3817,2751,3816,[935],3818,2751,3817,[19,13232],3819,2751,3818,[1721],3820,2751,3819,[1721],3821,2751,3820,[238,13245],3822,2751,3821,[19,212],3823,2751,3822,[238,13254],3824,2751,3823,[19,212],3825,2751,3824,[238,13263],3826,2751,3825,[19,13203],3827,2751,3826,[2348,13272,13208,4250],3828,2751,3827,[19,13278],3829,2753,[19,13282],3830,2753,3829,[2348,9910,13373,9912,4250],3831,2753,3830,[19,13379],3832,2756,[19,13199],3833,2758,[19,13203],3834,2758,3833,[238,13208],3835,2758,3834,[19,13213],3836,2758,3835,[238,13218],3837,2758,3836,[19,13223],3838,2758,3837,[935],3839,2758,3838,[19,13232],3840,2758,3839,[1721],3841,2758,3840,[1721],3842,2758,3841,[238,13245],3843,2758,3842,[19,212],3844,2758,3843,[238,13254],3845,2758,3844,[19,212],3846,2758,3845,[238,13263],3847,2758,3846,[19,13203],3848,2758,3847,[2348,13272,13208,4250],3849,2758,3848,[19,13278],3850,2760,[19,13282],3851,2760,3850,[2348,9910,13287,9912,4250],3852,2760,3851,[19,13293],3853,2763,[19,13199],3854,2765,[19,13203],3855,2765,3854,[238,13208],3856,2765,3855,[19,13213],3857,2765,3856,[238,13312],3858,2765,3857,[19,13317],3859,2765,3858,[935],3860,2765,3859,[19,13232],3861,2765,3860,[1721],3862,2765,3861,[1721],3863,2765,3862,[238,13245],3864,2765,3863,[19,212],3865,2765,3864,[238,13254],3866,2765,3865,[19,212],3867,2765,3866,[238,13263],3868,2765,3867,[19,13203],3869,2765,3868,[2348,13272,13208,4250],3870,2765,3869,[19,13278],3871,2767,[19,13282],3872,2767,3871,[2348,9910],&quot;data-src=https://s3.amazonaws.com/marketplace2-public/marketplace_5/7aad95390223198cf7adcf7d29271c66aef1a112/logos/424d1ca0efffe37221fe34211e65f28b14e370d1_300x300.png&quot;,[9912,4250],3873,2767,3872,[19,13293],3874,2770,[19,13199],3875,2772,[19,13203],3876,2772,3875,[238,13208],3877,2772,3876,[19,13213],3878,2772,3877,[238,13312],3879,2772,3878,[19,13317],3880,2772,3879,[935],3881,2772,3880,[19,13232],3882,2772,3881,[1721],3883,2772,3882,[1721],3884,2772,3883,[238,13245],3885,2772,3884,[19,212],3886,2772,3885,[238,13254],3887,2772,3886,[19,212],3888,2772,3887,[238,13263],3889,2772,3888,[19,13203],3890,2772,3889,[2348,13272,13208,4250],3891,2772,3890,[19,13278],3892,2774,[19,13282],3893,2774,3892,[2348,9910],&quot;data-src=https://d3075pyijv0bbs.cloudfront.net/marketplace_5/586cb24cd9e8f580e948bed8e2dcab8dfe499794/logos/d2a99c4d2dbd33b492eb75d160cacdc4c24762bf.png&quot;,[9912,4250],3894,2774,3893,[19,13379],3895,2777,[19,2102],3896,2779,[19,13203],3897,2779,3896,[238,13208],3898,2779,3897,[19,13213],3899,2779,3898,[238,13312],3900,2779,3899,[19,13317],3901,2779,3900,[935],3902,2779,3901,[19,13232],3903,2779,3902,[1721],3904,2779,3903,[1721],3905,2779,3904,[238,13245],3906,2779,3905,[19,212],3907,2779,3906,[238,13254],3908,2779,3907,[19,212],3909,2779,3908,[238,13263],3910,2779,3909,[19,13203],3911,2779,3910,[2348,13272,13208,4250],3912,2779,3911,[19,13278],3913,2781,[19,13282],3914,2781,3913,[2348,9910,14285,9912,4250],3915,2781,3914,[19,13379],3916,2784,[19,13199],3917,2786,[19,13203],3918,2786,3917,[238,13208],3919,2786,3918,[19,13213],3920,2786,3919,[238,13312],3921,2786,3920,[19,13317],3922,2786,3921,[935],3923,2786,3922,[19,13232],3924,2786,3923,[1721],3925,2786,3924,[1721],3926,2786,3925,[238,13245],3927,2786,3926,[19,212],3928,2786,3927,[238,13254],3929,2786,3928,[19,212],3930,2786,3929,[238,13263],3931,2786,3930,[19,13203],3932,2786,3931,[2348,13272,13208,4250],3933,2786,3932,[19,13278],3934,2788,[19,13282],3935,2788,3934,[2348,9910,13373,9912,4250],3936,2788,3935,[19,13379],3937,2791,[19,13199],3938,2793,[19,13203],3939,2793,3938,[238,13208],3940,2793,3939,[19,13213],3941,2793,3940,[238,13312],3942,2793,3941,[19,13317],3943,2793,3942,[935],3944,2793,3943,[19,13232],3945,2793,3944,[1721],3946,2793,3945,[1721],3947,2793,3946,[238,13245],3948,2793,3947,[19,212],3949,2793,3948,[238,13254],3950,2793,3949,[19,212],3951,2793,3950,[238,13263],3952,2793,3951,[19,13203],3953,2793,3952,[2348,13272,13208,4250],3954,2793,3953,[19,13278],3955,2795,[19,13282],3956,2795,3955,[2348,9910],&quot;data-src=https://d3075pyijv0bbs.cloudfront.net/marketplace_5/5b5902bd58e665a4cdc822e8aa7f9454368c3cf1/logos/4286b7467b04df8aca08c2ffcee2bad98bf4faa2.png&quot;,[9912,4250],3957,2795,3956,[19,13379],3958,2798,[19,2102],3959,2800,[19,13203],3960,2800,3959,[238,13208],3961,2800,3960,[19,13213],3962,2800,3961,[238,13312],3963,2800,3962,[19,13317],3964,2800,3963,[935],3965,2800,3964,[19,13232],3966,2800,3965,[1721],3967,2800,3966,[1721],3968,2800,3967,[238,13245],3969,2800,3968,[19,212],3970,2800,3969,[238,13254],3971,2800,3970,[19,212],3972,2800,3971,[238,13263],3973,2800,3972,[19,13203],3974,2800,3973,[2348,13272,13208,4250],3975,2800,3974,[19,13278],3976,2802,[19,13282],3977,2802,3976,[2348,9910,13373,9912,4250],3978,2802,3977,[19,13379],3979,2805,[19,2102],3980,2807,[19,13203],3981,2807,3980,[238,13208],3982,2807,3981,[19,13213],3983,2807,3982,[238,13312],3984,2807,3983,[19,13317],3985,2807,3984,[935],3986,2807,3985,[19,13232],3987,2807,3986,[1721],3988,2807,3987,[1721],3989,2807,3988,[238,13245],3990,2807,3989,[19,212],3991,2807,3990,[238,13254],3992,2807,3991,[19,212],3993,2807,3992,[238,13263],3994,2807,3993,[19,13203],3995,2807,3994,[2348,13272,13208,4250],3996,2807,3995,[19,13278],3997,2809,[19,13282],3998,2809,3997,[2348,9910,13373,9912,4250],3999,2809,3998,[19,13379],4000,2812,[19,2102],4001,2814,[19,13203],4002,2814,4001,[238,13208],4003,2814,4002,[19,13213],4004,2814,4003,[238,13312],4005,2814,4004,[19,13317],4006,2814,4005,[935],4007,2814,4006,[19,13232],4008,2814,4007,[1721],4009,2814,4008,[1721],4010,2814,4009,[238,13245],4011,2814,4010,[19,212],4012,2814,4011,[238,13254],4013,2814,4012,[19,212],4014,2814,4013,[238,13263],4015,2814,4014,[19,13203],4016,2814,4015,[2348,13272,13208,4250],4017,2814,4016,[19,13278],4018,2816,[19,13282],4019,2816,4018,[2348,9910,13373,9912,4250],4020,2816,4019,[19,13379],4021,2819,[19,13199],4022,2821,[19,723],4023,2821,4022,[238,13471],4024,2821,4023,[19,13213],4025,2821,4024,[238,13312],4026,2821,4025,[19,13317],4027,2821,4026,[935],4028,2821,4027,[19,13232],4029,2821,4028,[1721],4030,2821,4029,[1721],4031,2821,4030,[238,13245],4032,2821,4031,[19,212],4033,2821,4032,[238,13254],4034,2821,4033,[19,212],4035,2821,4034,[238,13263],4036,2821,4035,[19,13278],4037,2823,[19,13282],4038,2823,4037,[2348,9910,13373,9912,4250],4039,2823,4038,[19,13379],4040,2826,[19,2102],4041,2828,[19,723],4042,2828,4041,[238,13471],4043,2828,4042,[19,13213],4044,2828,4043,[238,13312],4045,2828,4044,[19,13317],4046,2828,4045,[935],4047,2828,4046,[19,13232],4048,2828,4047,[1721],4049,2828,4048,[1721],4050,2828,4049,[238,13245],4051,2828,4050,[19,212],4052,2828,4051,[238,13254],4053,2828,4052,[19,212],4054,2828,4053,[238,13263],4055,2828,4054,[19,13278],4056,2830,[19,13282],4057,2830,4056,[2348,9910,13373,9912,4250],4058,2830,4057,[19,13379],4059,2833,[19,13199],4060,2835,[19,723],4061,2835,4060,[238,13471],4062,2835,4061,[19,13213],4063,2835,4062,[238,13312],4064,2835,4063,[19,13317],4065,2835,4064,[935],4066,2835,4065,[19,13232],4067,2835,4066,[1721],4068,2835,4067,[1721],4069,2835,4068,[238,13245],4070,2835,4069,[19,212],4071,2835,4070,[238,13254],4072,2835,4071,[19,212],4073,2835,4072,[238,13263],4074,2835,4073,[19,13278],4075,2837,[19,13282],4076,2837,4075,[2348,9910],&quot;data-src=https://d3075pyijv0bbs.cloudfront.net/marketplace_5/9e026c454850cf61b38958f7a099a14b4d0fc1b2/logos/c70ea2d1a108c87bf4d0a9a037576d41eb9a4580.png&quot;,[9912,4250],4077,2837,4076,[19,13379],4078,2840,[19,2102],4079,2842,[19,723],4080,2842,4079,[238,13471],4081,2842,4080,[19,13213],4082,2842,4081,[238,13312],4083,2842,4082,[19,13317],4084,2842,4083,[935],4085,2842,4084,[19,13232],4086,2842,4085,[1721],4087,2842,4086,[1721],4088,2842,4087,[238,13245],4089,2842,4088,[19,212],4090,2842,4089,[238,13254],4091,2842,4090,[19,212],4092,2842,4091,[238,13263],4093,2842,4092,[19,13278],4094,2844,[19,13282],4095,2844,4094,[2348,9910,14202,9912,4250],4096,2844,4095,[19,13379],4097,2847,[19,13199],4098,2849,[19,723],4099,2849,4098,[238,13471],4100,2849,4099,[19,13213],4101,2849,4100,[238,13312],4102,2849,4101,[19,13317],4103,2849,4102,[935],4104,2849,4103,[19,13232],4105,2849,4104,[1721],4106,2849,4105,[1721],4107,2849,4106,[238,13245],4108,2849,4107,[19,212],4109,2849,4108,[238,13254],4110,2849,4109,[19,212],4111,2849,4110,[238,13263],4112,2849,4111,[19,13278],4113,2851,[19,13282],4114,2851,4113,[2348,9910,13373,9912,4250],4115,2851,4114,[19,13379],4116,2854,[19,13199],4117,2856,[19,723],4118,2856,4117,[238,13471],4119,2856,4118,[19,13213],4120,2856,4119,[238,13312],4121,2856,4120,[19,13317],4122,2856,4121,[935],4123,2856,4122,[19,13232],4124,2856,4123,[1721],4125,2856,4124,[1721],4126,2856,4125,[238,13245],4127,2856,4126,[19,212],4128,2856,4127,[238,13254],4129,2856,4128,[19,212],4130,2856,4129,[238,13263],4131,2856,4130,[19,13278],4132,2858,[19,13282],4133,2858,4132,[2348,9910],&quot;data-src=https://d3075pyijv0bbs.cloudfront.net/marketplace_5/476eaddb6caa9a45d8afc79fee8c94a84871a480/logos/bf2b729ea5ef63a1187a4dd0308537b9dfe8603f.png&quot;,[9912,4250],4134,2858,4133,[19,13379],4135,2861,[19,13199],4136,2863,[19,723],4137,2863,4136,[238,13471],4138,2863,4137,[19,13213],4139,2863,4138,[238,13312],4140,2863,4139,[19,13317],4141,2863,4140,[935],4142,2863,4141,[19,13232],4143,2863,4142,[1721],4144,2863,4143,[1721],4145,2863,4144,[238,13245],4146,2863,4145,[19,212],4147,2863,4146,[238,13254],4148,2863,4147,[19,212],4149,2863,4148,[238,13263],4150,2863,4149,[19,13278],4151,2865,[19,13282],4152,2865,4151,[2348,9910,13531,9912,4250],4153,2865,4152,[19,13379],4154,2868,[19,13199],4155,2870,[19,723],4156,2870,4155,[238,13471],4157,2870,4156,[19,13213],4158,2870,4157,[238,13312],4159,2870,4158,[19,13317],4160,2870,4159,[935],4161,2870,4160,[19,13232],4162,2870,4161,[1721],4163,2870,4162,[1721],4164,2870,4163,[238,13245],4165,2870,4164,[19,212],4166,2870,4165,[238,13254],4167,2870,4166,[19,212],4168,2870,4167,[238,13263],4169,2870,4168,[19,13278],4170,2872,[19,13282],4171,2872,4170,[2348,9910,13373,9912,4250],4172,2872,4171,[19,13379],4173,2875,[19,2102],4174,2877,[19,723],4175,2877,4174,[238,13471],4176,2877,4175,[19,13213],4177,2877,4176,[238,13312],4178,2877,4177,[19,13317],4179,2877,4178,[935],4180,2877,4179,[19,13232],4181,2877,4180,[1721],4182,2877,4181,[1721],4183,2877,4182,[238,13245],4184,2877,4183,[19,212],4185,2877,4184,[238,13254],4186,2877,4185,[19,212],4187,2877,4186,[238,13263],4188,2877,4187,[19,13278],4189,2879,[19,13282],4190,2879,4189,[2348,9910,13373,9912,4250],4191,2879,4190,[19,13379],4192,2882,[19,13199],4193,2884,[19,723],4194,2884,4193,[238,13471],4195,2884,4194,[19,13213],4196,2884,4195,[238,13312],4197,2884,4196,[19,13317],4198,2884,4197,[935],4199,2884,4198,[19,13232],4200,2884,4199,[1721],4201,2884,4200,[1721],4202,2884,4201,[238,13245],4203,2884,4202,[19,212],4204,2884,4203,[238,13254],4205,2884,4204,[19,212],4206,2884,4205,[238,13263],4207,2884,4206,[19,13278],4208,2886,[19,13282],4209,2886,4208,[2348,9910,13373,9912,4250],4210,2886,4209,[19,13379],4211,2889,[19,13199],4212,2891,[19,723],4213,2891,4212,[238,13471],4214,2891,4213,[19,13213],4215,2891,4214,[238,13312],4216,2891,4215,[19,13317],4217,2891,4216,[935],4218,2891,4217,[19,13232],4219,2891,4218,[1721],4220,2891,4219,[1721],4221,2891,4220,[238,13245],4222,2891,4221,[19,212],4223,2891,4222,[238,13254],4224,2891,4223,[19,212],4225,2891,4224,[238,13263],4226,2891,4225,[19,13278],4227,2893,[19,13282],4228,2893,4227,[2348,9910],&quot;data-src=https://d3075pyijv0bbs.cloudfront.net/marketplace_5/8d648fbd16f9c010b2f75bbf7d45fb8b8142be74/logos/d03b943c821810026734786ecae416a5953ce4ac_300x300.png&quot;,[9912,4250],4229,2893,4228,[19,13293],4230,2896,[19,13199],4231,2898,[19,13203],4232,2898,4231,[238,13208],4233,2898,4232,[19,13213],4234,2898,4233,[238,13312],4235,2898,4234,[19,13317],4236,2898,4235,[935],4237,2898,4236,[19,13232],4238,2898,4237,[1721],4239,2898,4238,[1721],4240,2898,4239,[238,13245],4241,2898,4240,[19,212],4242,2898,4241,[238,13254],4243,2898,4242,[19,212],4244,2898,4243,[238,13263],4245,2898,4244,[19,13203],4246,2898,4245,[2348,13272,13208,4250],4247,2898,4246,[19,13278],4248,2900,[19,13282],4249,2900,4248,[2348,9910,16194,9912,4250],4250,2900,4249,[19,13379],4251,2903,[19,2102],4252,2905,[19,13203],4253,2905,4252,[238,13208],4254,2905,4253,[19,13213],4255,2905,4254,[238,13312],4256,2905,4255,[19,13317],4257,2905,4256,[935],4258,2905,4257,[19,13232],4259,2905,4258,[1721],4260,2905,4259,[1721],4261,2905,4260,[238,13245],4262,2905,4261,[19,212],4263,2905,4262,[238,13254],4264,2905,4263,[19,212],4265,2905,4264,[238,13263],4266,2905,4265,[19,13203],4267,2905,4266,[2348,13272,13208,4250],4268,2905,4267,[19,13278],4269,2907,[19,13282],4270,2907,4269,[2348,9910,13373,9912,4250],4271,2907,4270,[19,13379],4272,2910,[19,13199],4273,2912,[19,723],4274,2912,4273,[238,13471],4275,2912,4274,[19,13213],4276,2912,4275,[238,13312],4277,2912,4276,[19,13317],4278,2912,4277,[935],4279,2912,4278,[19,13232],4280,2912,4279,[1721],4281,2912,4280,[1721],4282,2912,4281,[238,13245],4283,2912,4282,[19,212],4284,2912,4283,[238,13254],4285,2912,4284,[19,212],4286,2912,4285,[238,13263],4287,2912,4286,[19,13278],4288,2914,[19,13282],4289,2914,4288,[2348,9910,13373,9912,4250],4290,2914,4289,[19,13379],4291,2917,[19,13199],4292,2919,[19,723],4293,2919,4292,[238,13471],4294,2919,4293,[19,13213],4295,2919,4294,[238,13312],4296,2919,4295,[19,13317],4297,2919,4296,[935],4298,2919,4297,[19,13232],4299,2919,4298,[1721],4300,2919,4299,[1721],4301,2919,4300,[238,13245],4302,2919,4301,[19,212],4303,2919,4302,[238,13254],4304,2919,4303,[19,212],4305,2919,4304,[238,13263],4306,2919,4305,[19,13278],4307,2921,[19,13282],4308,2921,4307,[2348,9910,13373,9912,4250],4309,2921,4308,[19,13379],4310,2924,[19,13199],4311,2926,[19,13203],4312,2926,4311,[238,13208],4313,2926,4312,[19,13213],4314,2926,4313,[238,13312],4315,2926,4314,[19,13317],4316,2926,4315,[935],4317,2926,4316,[19,13232],4318,2926,4317,[1721],4319,2926,4318,[1721],4320,2926,4319,[238,13245],4321,2926,4320,[19,212],4322,2926,4321,[238,13254],4323,2926,4322,[19,212],4324,2926,4323,[238,13263],4325,2926,4324,[19,13203],4326,2926,4325,[2348,13272,13208,4250],4327,2926,4326,[19,13278],4328,2928,[19,13282],4329,2928,4328,[2348,9910],&quot;data-src=https://d3075pyijv0bbs.cloudfront.net/marketplace_5/4d7f0b39568987be92619686b7e583884d1afa34/logos/52421d231c76fa95baa7828464fe48108362983e.svg&quot;,[9912,4250],4330,2928,4329,[19,13379],4331,2944,[3282],&quot;id=chkbox-id&quot;,[7362],&quot;class=category-filter-handler&quot;,[7433],4332,2944,4331,[19,4221],4333,2944,4332,[4399],&quot;for=chkbox-id&quot;,4334,2944,4333,[19,4221],4335,2944,4334,[1169,8599],4336,2951,[19,2310],4337,2951,4336,[2348],&quot;class=category-icon&quot;,&quot;src=https://d3075pyijv0bbs.cloudfront.net/marketplace_4/categories/all-items.png&quot;,4338,2951,4337,[19,4531],4339,2953,[19,2310],4340,2953,4339,[238],&quot;class=name&quot;,4341,2953,4340,[19,2193],4342,2953,4341,[238],&quot;class=count&quot;,4343,2953,4342,[19,4531],4344,2956,[19,2193],4345,2956,4344,[2348,17674],&quot;src=https://s3.amazonaws.com/marketplace2-public/marketplace_5/categories/7ffa504ad718cc636b5cde6743550ef2ffe833cc.svg&quot;,4346,2956,4345,[19,2310],4347,2958,[19,2193],4348,2958,4347,[238,17687],4349,2958,4348,[19,2193],4350,2958,4349,[238,17696],4351,2958,4350,[19,2310],4352,2961,[19,2193],4353,2961,4352,[2348,17674],&quot;src=https://s3.amazonaws.com/marketplace2-public/marketplace_5/categories/80652c5f782e8f38f7567d98f99e55f5254961ae.svg&quot;,4354,2961,4353,[19,2310],4355,2963,[19,2193],4356,2963,4355,[238,17687],4357,2963,4356,[19,2193],4358,2963,4357,[238,17696],4359,2963,4358,[19,2310],4360,2966,[19,2193],4361,2966,4360,[2348,17674],&quot;src=https://s3.amazonaws.com/marketplace2-public/marketplace_5/categories/202b657f36fdff8b27b50e361917abf3a3b22b2b.svg&quot;,4362,2966,4361,[19,2310],4363,2968,[19,2193],4364,2968,4363,[238,17687],4365,2968,4364,[19,2193],4366,2968,4365,[238,17696],4367,2968,4366,[19,2310],4368,2971,[19,2193],4369,2971,4368,[2348,17674,9822],4370,2971,4369,[19,2310],4371,2973,[19,2193],4372,2973,4371,[238,17687],4373,2973,4372,[19,2193],4374,2973,4373,[238,17696],4375,2973,4374,[19,2310],4376,2976,[19,2193],4377,2976,4376,[2348,17674,9793],4378,2976,4377,[19,2310],4379,2978,[19,2193],4380,2978,4379,[238,17687],4381,2978,4380,[19,2193],4382,2978,4381,[238,17696],4383,2978,4382,[19,2310],4384,2981,[19,2193],4385,2981,4384,[2348,17674,9881],4386,2981,4385,[19,2310],4387,2983,[19,2193],4388,2983,4387,[238,17687],4389,2983,4388,[19,2193],4390,2983,4389,[238,17696],4391,2983,4390,[19,2310],4392,2986,[19,2193],4393,2986,4392,[2348,17674,9763],4394,2986,4393,[19,2310],4395,2988,[19,2193],4396,2988,4395,[238,17687],4397,2988,4396,[19,2193],4398,2988,4397,[238,17696],4399,2988,4398,[19,2310],4400,2991,[19,2193],4401,2991,4400,[2348,17674],&quot;src=https://s3.amazonaws.com/marketplace2-public/marketplace_5/categories/86f0e9fd9deb721a3a2fdb2183875d64e0b0e018.svg&quot;,4402,2991,4401,[19,2310],4403,2993,[19,2193],4404,2993,4403,[238,17687],4405,2993,4404,[19,2193],4406,2993,4405,[238,17696],4407,2993,4406,[19,2310],4408,2996,[19,2193],4409,2996,4408,[2348,17674,9852],4410,2996,4409,[19,2310],4411,2998,[19,2193],4412,2998,4411,[238,17687],4413,2998,4412,[19,2193],4414,2998,4413,[238,17696],4415,2998,4414,[19,2310],4416,3001,[19,2193],4417,3001,4416,[2348,17674],&quot;src=https://s3.amazonaws.com/marketplace2-public/marketplace_5/categories/b419c052a179fab446c51aada2a70e821ace807f.svg&quot;,4418,3001,4417,[19,2310],4419,3003,[19,2193],4420,3003,4419,[238,17687],4421,3003,4420,[19,2193],4422,3003,4421,[238,17696],4423,3003,4422,[19,2310],4424,3006,[3613],&quot;class=admin-icon&quot;,4425,3008,[19],&quot;Admin&quot;,4426,3010,[19],&quot;All pending&quot;,4427,3012,[19,2310],4428,3012,4427,[1020],&quot;href=/marketplace/appdelivery/dashboard/all-items?tab=qa&quot;,4429,3012,4428,[19,2310],4430,3012,4429,[1020],&quot;href=/marketplace/appdelivery/dashboard/all-items?tab=review&quot;,4431,3012,4430,[19,4531],4432,3014,[19],&quot;Published&quot;,4433,3016,[19],&quot;Draft&quot;,4434,3018,[19],&quot;Unpublished&quot;,4435,3020,[19],&quot;Flagged reviews&quot;,4436,3022,[19],&quot;Manage roles&quot;,4437,3024,[19],&quot;Entitlement lookup&quot;,4438,3027,[3613],&quot;class=reports-icon&quot;,4439,3029,[19],&quot;Reports&quot;,4440,3031,[19],&quot;Developers&quot;,4441,3033,[19],&quot;Downloads&quot;,4442,3035,[19],&quot;Metrics&quot;,4443,3037,[19],&quot;Total Metrics&quot;,4444,3040,[3613],&quot;class=settings-icon&quot;,4445,3042,[19],&quot;Settings&quot;,4446,3044,[19,4052],4447,3046,[19,4904],4448,3048,[19],&quot;Homepage&quot;,4449,3050,[19],&quot;Partners&quot;,4450,3052,[19],&quot;Developer program&quot;,4451,3054,[19],&quot;Company&quot;,4452,3056,[19],&quot;Products&quot;,4453,3059,[3613],&quot;class=my-uploads-icon&quot;,4454,3061,[19],&quot;My Uploads&quot;,4455,3063,[1169],&quot;class=uk-text-capitalize&quot;,4456,3065,[19],&quot;My views &amp; downloads&quot;,4457,3067,[19],&quot;All company apps&quot;,4458,3070,[3613],&quot;class=my-downloads-icon&quot;,4459,3072,[19],&quot;My downloads&quot;,4460,3074,[19],&quot;Free items&quot;,4461,3077,[3613],&quot;class=my-account-icon&quot;,4462,3079,[19],&quot;My Account&quot;,4463,3081,[19,13161],4464,3083,[19],&quot;Manage notifications&quot;,4465,3086,[3613,18124],4466,3088,[19,18128],4467,3090,[1169,18132],4468,3092,[19,18136],4469,3094,[19,18140],4470,3097,[3613,18144],4471,3099,[19],&quot;My Downloads&quot;,4472,3101,[19,18152],4473,3104,[3613,18156],4474,3106,[19,18160],4475,3108,[19,13161],4476,3110,[19,18167],4477,3113,[3613,18009],4478,3115,[19],&quot;Approver&quot;,4479,3117,[19,18017],4480,3119,[19,2310],4481,3119,4480,[1020,18025],4482,3119,4481,[19,2310],4483,3119,4482,[1020,18034],4484,3119,4483,[19,4531],4485,3121,[19,18042],4486,3123,[19,18046],4487,3125,[19,18050],4488,3127,[19,18054],4489,3129,[19,18062],4490,3132,[3613,18124],4491,3134,[19,18128],4492,3136,[1169,18132],4493,3138,[19,18136],4494,3140,[19,18140],4495,3143,[3613,18144],4496,3145,[19,18189],4497,3147,[19,18152],4498,3150,[3613,18156],4499,3152,[19,18160],4500,3154,[19,13161],4501,3156,[19,18167],4502,3159,[3613,18144],4503,3161,[19,18189],4504,3163,[19,18152],4505,3166,[3613,18156],4506,3168,[19,18160],4507,3170,[19,13161],4508,3172,[19,18167],4509,3187,[14],&quot;*B=https://www.microfocus.com/marketplace/signin/sso&quot;,4510,3187,4509,[24],4511,3188,[14,4237],4512,3188,4511,[24],4513,3191,[19],&quot;New&quot;,4514,3193,[19],&quot;\n\t                Community\n\t            &quot;,4515,3195,[19],&quot;TestSet Runner&quot;,4516,3197,[19],&quot;Machine Data Systems&quot;,4517,3198,[19,852],4518,3199,[19],&quot;\n\t\t\t\tTestSet Runner allows you to run ALM test sets from a command line. See full description for use cases.\n\t\t\t&quot;,4519,3203,[19,257],4520,3203,4519,[238],4521,3203,4520,[19,212],4522,3212,[19,18324],4523,3214,[19],&quot;\n\t                OpenText  COMMUNITY \t            &quot;,4524,3216,[19],&quot;Eclipse IDE Integration for ValueEdge&quot;,4525,3218,[19],&quot;OpenText&quot;,4526,3219,[19,852],4527,3220,[19],&quot;\n\t\t\t\tWith the ValueEdge Eclipse IDE plugin, you can do your ValueEdge work (on stories, defects, tasks, and so on) directly within the Eclipse IDE development framework.\n\t\t\t&quot;,4528,3224,[19,257],4529,3224,4528,[238],4530,3224,4529,[19,212],4531,3233,[19,18324],4532,3235,[19,18361],4533,3237,[19],&quot;JetBrains IntelliJ IDEA Plugin for ValueEdge&quot;,4534,3239,[19,18369],4535,3240,[19,852],4536,3241,[19],&quot;\n\t\t\t\tWith the ValueEdge IntelliJ IDEA plugin, you can do your ValueEdge work (on stories, defects, tasks, and so on) directly within the IntelliJ IDEA development framework.\n\t\t\t&quot;,4537,3245,[19,257],4538,3245,4537,[238],4539,3245,4538,[19,212],4540,3254,[19,18324],4541,3256,[19,18361],4542,3258,[19],&quot;LoadRunner Developer&quot;,4543,3260,[19,18369],4544,3261,[19,852],4545,3262,[19],&quot;\n\t\t\t\tLoadRunner Developer is the latest cutting-edge tool from Micro Focus for web protocol performance and load testing.\nLoadRunner Developer leverages DevWeb as its engine. It is lightweight, scalable, and cross-platform.\n\t\t\t&quot;,4546,3266,[19,257],4547,3266,4546,[238],4548,3266,4547,[19,212],4549,3273,[19,18324],4550,3275,[19,18361],4551,3277,[19],&quot;SAP Solution Manager Connector for Micro Focus Connect&quot;,4552,3279,[19,18369],4553,3280,[19,852],4554,3281,[19],&quot;\n\t\t\t\tWhen used with Micro Focus Connect Core, connectors provide synchronization of assets like Stories, Requirements and Defects across Micro Focus products (ex. ALM / QC and ALM Octane) and third party products like SAP Solution Manager.\n\t\t\t&quot;,4555,3285,[19,257],4556,3285,4555,[238],4557,3285,4556,[19,212],4558,3292,[19,18324],4559,3294,[19],&quot;\n\t                OpenText \t            &quot;,4560,3296,[19],&quot;Micro Focus Connect Core&quot;,4561,3298,[19,18369],4562,3299,[19,852],4563,3300,[19],&quot;\n\t\t\t\tAchieve transparency across a multitude of systems.\nOpenText MF Connect synchronizes assets like stories and defects across OpenText products (ex. ALM/QC, ValueEdge and Octane) and ▫▪▪ parties like Atlassian Jira, Microsoft Azure DevOps and ServiceNow.\n\t\t\t&quot;,4564,3304,[19,257],4565,3304,4564,[238],4566,3304,4565,[19,212],4567,3311,[19,18324],4568,3313,[19,18487],4569,3315,[19],&quot;Micro Focus Connect Connectors&quot;,4570,3317,[19,18369],4571,3318,[19,852],4572,3319,[19],&quot;\n\t\t\t\tUsed with OpenText MF Connect Core, connectors provide synchronization of assets like stories and defects across OpenText products (ex. ALM/QC, ValueEdge and Octane) and third-party products like Atlassian Jira, Microsoft Azure DevOps and ServiceNow.\n\t\t\t&quot;,4573,3323,[19,257],4574,3323,4573,[238],4575,3323,4574,[19,212],4576,3330,[19,18324],4577,3332,[19,18361],4578,3334,[19],&quot;CoAP Protocol&quot;,4579,3336,[19,18369],4580,3337,[19,852],4581,3338,[19],&quot;\n\t\t\t\tThe CoAP protocol for LoadRunner allows performance testing against front-end CoAP proxies with the supported methods/verbs to determine scalability and reliability under heavy use.\n\t\t\t&quot;,4582,3342,[19,257],4583,3342,4582,[238],4584,3342,4583,[19,212],4585,3349,[19,18324],4586,3351,[19,18361],4587,3353,[19],&quot;ALM - Test Management for Jira&quot;,4588,3355,[19,18369],4589,3356,[19,852],4590,3357,[19],&quot;\n\t\t\t\tThe ALM - Test Management for Jira Server plugin helps Jira users establish visibility into the Quality process being managed in ALM / Quality Center.\n\t\t\t&quot;,4591,3361,[19,257],4592,3361,4591,[238],4593,3361,4592,[19,212],4594,3370,[19,18324],4595,3372,[19,18361],4596,3374,[19],&quot;ALM Quality of Things (QoT)&quot;,4597,3376,[19,18369],4598,3377,[19,852],4599,3378,[19],&quot;\n\t\t\t\tThe Quality of Things (QoT) application enables you to run tests both online and offline.\n\t\t\t&quot;,4600,3382,[19,257],4601,3382,4600,[238],4602,3382,4601,[19,212],4603,3389,[19,18324],4604,3391,[19,18487],4605,3393,[19],&quot;Sprinter&quot;,4606,3395,[19,18369],4607,3396,[19,852],4608,3397,[19],&quot;\n\t\t\t\tSprinter provides a suite of advanced features and tools that make manual testing more efficient and effective.\n\t\t\t&quot;,4609,3401,[19,257],4610,3401,4609,[238],4611,3401,4610,[19,212],4612,3408,[19,18324],4613,3410,[19,18361],4614,3412,[19],&quot;Advantage Online Shopping (AOS) - Demo application&quot;,4615,3414,[19,18369],4616,3415,[19,852],4617,3416,[19],&quot;\n\t\t\t\tAdvantage Online Shopping (AOS) is a fictional company used by Micro Focus as the “application under test” (AUT) during customer-facing product demonstrations.\n\t\t\t&quot;,4618,3420,[19,257],4619,3420,4618,[238],4620,3420,4619,[19,212],4621,3427,[19,18324],4622,3429,[19,18361],4623,3431,[19],&quot;Virtual User Generator (VuGen)&quot;,4624,3433,[19,18369],4625,3434,[19,852],4626,3435,[19],&quot;\n\t\t\t\tVirtual User Generator (VuGen), is a primary tool for creating testing scripts that emulate behavior of real users on your system.\n\t\t\t&quot;,4627,3439,[19,257],4628,3439,4627,[238],4629,3439,4628,[19,212],4630,3446,[19,18324],4631,3448,[19,18487],4632,3450,[19],&quot;UFT Mobile iOS content&quot;,4633,3452,[19,18369],4634,3453,[19,852],4635,3454,[19],&quot;\n\t\t\t\tThe UFTMobile Enabler utility is provided to simplify and support the re-signing and repackaging of apps.\n\t\t\t&quot;,4636,3458,[19,257],4637,3458,4636,[238],4638,3458,4637,[19,212],4639,3467,[19,18324],4640,3469,[19,18361],4641,3471,[19],&quot;ALM Client MSI Generator Add-In&quot;,4642,3473,[19,18369],4643,3474,[19,852],4644,3475,[19],&quot;\n\t\t\t\tALM Client MSI Generator Add-In\n\t\t\t&quot;,4645,3479,[19,257],4646,3479,4645,[238],4647,3479,4646,[19,212],4648,3488,[19,18324],4649,3490,[19,18361],4650,3492,[19],&quot;UFT Extensibility Accelerator&quot;,4651,3494,[19,18369],4652,3495,[19,852],4653,3496,[19],&quot;\n\t\t\t\tUFT Web Add-in Extensibility enables you to extend the Web Add-in to customize how UFT recognizes and interacts with different types of controls.\n\t\t\t&quot;,4654,3500,[19,257],4655,3500,4654,[238],4656,3500,4655,[19,212],4657,3507,[19,18324],4658,3509,[19,18487],4659,3511,[19,18739],4660,3513,[19,18369],4661,3514,[19,852],4662,3515,[19,18749],4663,3519,[19,257],4664,3519,4663,[238],4665,3519,4664,[19,212],4666,3528,[19,18324],4667,3530,[19,18361],4668,3532,[19],&quot;UFT One MS Hyper-V Image&quot;,4669,3534,[19,18369],4670,3535,[19,852],4671,3536,[19],&quot;\n\t\t\t\tMicrosoft Hyper-V image pre-installed with UFT One\n\t\t\t&quot;,4672,3540,[19,257],4673,3540,4672,[238],4674,3540,4673,[19,212],4675,3547,[19,18324],4676,3549,[19,18361],4677,3551,[19,18801],4678,3553,[19,18369],4679,3554,[19,852],4680,3555,[19,18811],4681,3559,[19,257],4682,3559,4681,[238],4683,3559,4682,[19,212],4684,3566,[19,18324],4685,3568,[19,18361],4686,3570,[19],&quot;UFT Add-in For ALM&quot;,4687,3572,[19,18369],4688,3573,[19,852],4689,3574,[19],&quot;\n\t\t\t\tOpenText UFT One Plugin for ALM\n\t\t\t&quot;,4690,3578,[19,257],4691,3578,4690,[238],4692,3578,4691,[19,212],4693,3585,[19,18324],4694,3587,[19,18361],4695,3589,[19],&quot;UFT Testing Extensibility SDK&quot;,4696,3591,[19,18369],4697,3592,[19,852],4698,3593,[19],&quot;\n\t\t\t\tUFT Testing Extensibility enables you to extend Unified Functional Testing (UFT) support for technologies and applications that are not supported out-of-the-box by UFT.\nUse the UFT Testing Extensibility SDK, also known as Testing Extensibility Add-in (TEA)\n\t\t\t&quot;,4699,3597,[19,257],4700,3597,4699,[238],4701,3597,4700,[19,212],4702,3604,[19,18324],4703,3606,[19,18487],4704,3608,[19,18646],4705,3610,[19,18369],4706,3611,[19,852],4707,3612,[19,18656],4708,3616,[19,257],4709,3616,4708,[238],4710,3616,4709,[19,212],4711,3623,[19,18324],4712,3625,[19,18361],4713,3627,[19],&quot;AccuRev Plug-In for Eclipse&quot;,4714,3629,[19,18369],4715,3630,[19,852],4716,3631,[19],&quot;\n\t\t\t\tAccuRev Plug-in for Eclipse provides developers and release engineers with an out-of-the-box robust integration between AccuRev software and Eclipse.\n\t\t\t&quot;,4717,3635,[19,257],4718,3635,4717,[238],4719,3635,4718,[19,212],4720,3642,[19,18324],4721,3644,[19,18487],4722,3646,[19],&quot;ALM Octane Docker Container&quot;,4723,3648,[19,18369],4724,3649,[19,852],4725,3650,[19],&quot;\n\t\t\t\tWelcome to ALM Octane with Docker! We are excited to provide you a Dockerized container for on premises consumption.\n\t\t\t&quot;,4726,3654,[19,257],4727,3654,4726,[238],4728,3654,4727,[19,212],4729,3661,[19,18324],4730,3663,[19,18487],4731,3665,[19],&quot;Deployment Automation Jenkins Plugin&quot;,4732,3667,[19,18369],4733,3668,[19,852],4734,3669,[19],&quot;\n\t\t\t\tDeployment Automation Jenkins HPI (JPI). Jenkins plugin to publish and deploy to Deployment Automation\n\t\t\t&quot;,4735,3673,[19,257],4736,3673,4735,[238],4737,3673,4736,[19,212],4738,3680,[19,18324],4739,3682,[19,18361],4740,3684,[19],&quot;Deployment Automation - Fortify SCA Plugin&quot;,4741,3686,[19,18369],4742,3687,[19,852],4743,3688,[19],&quot;\n\t\t\t\tThe Fortify Static Code Analyzer plugin is a security plugin. It is run during the development and deployment process to execute static application security testing as part of a Deployment Automation workflow\n\t\t\t&quot;,4744,3692,[19,257],4745,3692,4744,[238],4746,3692,4745,[19,212],4747,3699,[19,18324],4748,3701,[19,18361],4749,3703,[19],&quot;Deployment Automation - Docker Compose Plugin&quot;,4750,3705,[19,18369],4751,3706,[19,852],4752,3707,[19],&quot;\n\t\t\t\tThe Docker Compose plugin is a configuration management plugin. It is run during the development and deployment process to orchestrate the creation and management of Docker containers through compose files.\n\t\t\t&quot;,4753,3711,[19,257],4754,3711,4753,[238],4755,3711,4754,[19,212],4756,3718,[19,18324],4757,3720,[19,18361],4758,3722,[19],&quot;Deployment Automation - Elastic Beanstalk Plugin&quot;,4759,3724,[19,18369],4760,3725,[19,852],4761,3726,[19],&quot;\n\t\t\t\tThe AWS Elastic Benstalk plugin is a Cloud Deployment plugin. It is run during the development and deployment process to manage and deploy web applications into AWS Elastic Beanstalk.\n\t\t\t&quot;,4762,3730,[19,257],4763,3730,4762,[238],4764,3730,4763,[19,212],4765,3737,[19,18324],4766,3739,[19,18361],4767,3741,[19],&quot;Release Control - Jenkins Pipeline Plugin&quot;,4768,3743,[19,18369],4769,3744,[19,852],4770,3745,[19],&quot;\n\t\t\t\tThe Jenkins Pipeline plugin integrates Micro Focus Release Control into Jenkins Pipelines. It allows you to create pipeline steps to create and check the status of releases in order to bring governance, approvals and visibility into your DevOps processes.\n\t\t\t&quot;,4771,3749,[19,257],4772,3749,4771,[238],4773,3749,4772,[19,212],4774,3756,[19,18324],4775,3758,[19,18361],4776,3760,[19],&quot;Deployment Automation - Maven Build Plugin&quot;,4777,3762,[19,18369],4778,3763,[19,852],4779,3764,[19],&quot;\n\t\t\t\tThe Maven Build plugin is a build management plugin. It is run during the development and deployment process to execute Maven builds.\n\t\t\t&quot;,4780,3768,[19,257],4781,3768,4780,[238],4782,3768,4781,[19,212],4783,3775,[19,18324],4784,3777,[19,18328],4785,3779,[19],&quot;UFT Safari Extension&quot;,4786,3781,[19],&quot;Ran Bachar&quot;,4787,3782,[19,852],4788,3783,[19],&quot;\n\t\t\t\tUFT Safari Extension\n\t\t\t&quot;,4789,3787,[19,257],4790,3787,4789,[238],4791,3787,4790,[19,212],4792,3794,[19,18324],4793,3796,[19,18328],4794,3798,[19],&quot;▪▪▪▫▫▫▫ Testing Extensibility SDK&quot;,4795,3800,[19,19264],4796,3801,[19,852],4797,3802,[19],&quot;\n\t\t\t\tUFT Testing Extensibility enables you to extend Unified Functional Testing (UFT) support for technologies and applications that are not supported out-of-the-box by UFT.\nUse the UFT Testing Extensibility SDK, also known as Testing Extensibility Add-in (TEA\n\t\t\t&quot;,4798,3806,[19,257],4799,3806,4798,[238],4800,3806,4799,[19,212],4801,3813,[19,18324],4802,3815,[19,18361],4803,3817,[19,18584],4804,3819,[19,18369],4805,3820,[19,852],4806,3821,[19,18594],4807,3825,[19,257],4808,3825,4807,[238],4809,3825,4808,[19,212],4810,3834,[19,18324],4811,3836,[19,18328],4812,3838,[19,18332],4813,3840,[19,18336],4814,3841,[19,852],4815,3842,[19,18343],4816,3846,[19,257],4817,3846,4816,[238],4818,3846,4817,[19,212],4819,3855,[19,18324],4820,3857,[19,18487],4821,3859,[19],&quot;NFARM Client for Windows&quot;,4822,3861,[19,18369],4823,3862,[19,852],4824,3863,[19],&quot;\n\t\t\t\tOES File Access Rights Management (NFARM) for Windows is a shell extension that enables eDirectory or Active Directory administrators or users to manage the access rights and quotas of AD or eDirectory users or groups on Storage Services (NSS) resources.\n\t\t\t&quot;,4825,3867,[19,257],4826,3867,4825,[238],4827,3867,4826,[19,212],4828,3876,[19,18324],4829,3878,[19,18487],4830,3880,[19],&quot;iPrint Client for Mac&quot;,4831,3882,[19,18369],4832,3883,[19,852],4833,3884,[19],&quot;\n\t\t\t\tiPrint Client for Mac allows your users to install printers and print from any macOS devices.\n\t\t\t&quot;,4834,3888,[19,257],4835,3888,4834,[238],4836,3888,4835,[19,212],4837,3897,[19,18324],4838,3899,[19,18487],4839,3901,[19,18739],4840,3903,[19,18369],4841,3904,[19,852],4842,3905,[19,18749],4843,3909,[19,257],4844,3909,4843,[238],4845,3909,4844,[19,212],4846,3918,[19,18324],4847,3920,[19,18361],4848,3922,[19],&quot;ALM Integration Plug-In for PPM&quot;,4849,3924,[19,18369],4850,3925,[19,852],4851,3926,[19],&quot;\n\t\t\t\tALM Integration Plug-In for PPM\n\t\t\t&quot;,4852,3930,[19,257],4853,3930,4852,[238],4854,3930,4853,[19,212],4855,3939,[19,18324],4856,3941,[19,18487],4857,3943,[19],&quot;iPrint Client for Windows&quot;,4858,3945,[19,18369],4859,3946,[19,852],4860,3947,[19],&quot;\n\t\t\t\tiPrint Client for Windows allows your users to install printers and print from any Windows device.\n\t\t\t&quot;,4861,3951,[19,257],4862,3951,4861,[238],4863,3951,4862,[19,212],4864,3960,[19,18324],4865,3962,[19,18361],4866,3964,[19,18365],4867,3966,[19,18369],4868,3967,[19,852],4869,3968,[19,18376],4870,3972,[19,257],4871,3972,4870,[238],4872,3972,4871,[19,212],4873,3981,[19,18324],4874,3983,[19,18361],4875,3985,[19,18397],4876,3987,[19,18369],4877,3988,[19,852],4878,3989,[19,18407],4879,3993,[19,257],4880,3993,4879,[238],4881,3993,4880,[19,212],4882,4002,[19,18324],4883,4004,[19,18361],4884,4006,[19],&quot;Visual Studio Code plugin for ValueEdge&quot;,4885,4008,[19,18369],4886,4009,[19,852],4887,4010,[19],&quot;\n\t\t\t\tWith the ValueEdge Visual Studio Code plugin, you can do your ValueEdge work (on stories, defects, tasks, and so on) directly within the Visual Studio Code development framework.\n\t\t\t&quot;,4888,4014,[19,257],4889,4014,4888,[238],4890,4014,4889,[19,212],4891,4023,[19,18324],4892,4025,[19,18361],4893,4027,[19],&quot;ALM Client Launcher&quot;,4894,4029,[19,18369],4895,4030,[19,852],4896,4031,[19],&quot;\n\t\t\t\tALM Client Launcher is a lightweight and flexible tool that enables you to run an ALM desktop client on Windows machine with no need for Internet Explorer or admin permissions.\n\t\t\t&quot;,4897,4035,[19,257],4898,4035,4897,[238],4899,4035,4898,[19,212],4900,4042,[19,18324],4901,4044,[19,18361],4902,4046,[19],&quot;Microsoft Excel Add-In&quot;,4903,4048,[19,18369],4904,4049,[19,852],4905,4050,[19],&quot;\n\t\t\t\tALM Microsoft Excel Add-In\n\t\t\t&quot;,4906,4054,[19,257],4907,4054,4906,[238],4908,4054,4907,[19,212],4909,4061,[19,18324],4910,4063,[19,18487],4911,4065,[19],&quot;Web Tours Sample Application&quot;,4912,4067,[19,18369],4913,4068,[19,852],4914,4069,[19],&quot;\n\t\t\t\tWeb Tours is a sample Web-based travel agency application used to demonstrate how LoadRunner is used as a solution for performance testing.\n\t\t\t&quot;,4915,4073,[19,257],4916,4073,4915,[238],4917,4073,4916,[19,212],4918,4080,[19,18324],4919,4082,[19,18361],4920,4084,[19,18708],4921,4086,[19,18369],4922,4087,[19,852],4923,4088,[19,18718],4924,4092,[19,257],4925,4092,4924,[238],4926,4092,4925,[19,212],4927,4099,[19,18324],4928,4101,[19,18361],4929,4103,[19],&quot;UFT One AI Feature Model ▪▫&quot;,4930,4105,[19,18369],4931,4106,[19,852],4932,4107,[19],&quot;\n\t\t\t\tUFT One AI Feature Model Files Version\n\t\t\t&quot;,4933,4111,[19,257],4934,4111,4933,[238],4935,4111,4934,[19,212],4936,4118,[19,18324],4937,4120,[19,18487],4938,4122,[19],&quot;Client for Open Enterprise Server&quot;,4939,4124,[19,18369],4940,4125,[19,852],4941,4126,[19],&quot;\n\t\t\t\tThe Client for Open Enterprise Server software extends the capabilities of Windows desktops by providing access to Open Enterprise Servers (OES)\n\t\t\t&quot;,4942,4130,[19,257],4943,4130,4942,[238],4944,4130,4943,[19,212],4945,4137,[19,18324],4946,4139,[19,18361],4947,4141,[19,18428],4948,4143,[19,18369],4949,4144,[19,852],4950,4145,[19,18438],4951,4149,[19,257],4952,4149,4951,[238],4953,4149,4952,[19,212],4954,4156,[19,18324],4955,4158,[19,18361],4956,4160,[19],&quot;ALM Client Cleanup Add-In&quot;,4957,4162,[19,18369],4958,4163,[19,852],4959,4164,[19],&quot;\n\t\t\t\tWhen you run ALM on your client computer, client components are downloaded to your client machine. You can use the client cleanup add-in to remove all ALM client components, including files and registry keys.\n\t\t\t&quot;,4960,4168,[19,257],4961,4168,4960,[238],4962,4168,4961,[19,212],4963,4175,[19,18324],4964,4177,[19,18487],4965,4179,[19,18522],4966,4181,[19,18369],4967,4182,[19,852],4968,4183,[19,18532],4969,4187,[19,257],4970,4187,4969,[238],4971,4187,4970,[19,212],4972,4194,[19,18324],4973,4196,[19,18361],4974,4198,[19],&quot;Business Views Microsoft Excel Add-In&quot;,4975,4200,[19,18369],4976,4201,[19,852],4977,4202,[19],&quot;\n\t\t\t\tALM Business Views Microsoft Excel Add-in makes ALM reporting more flexible.\n\t\t\t&quot;,4978,4206,[19,257],4979,4206,4978,[238],4980,4206,4979,[19,212],4981,4213,[19,18324],4982,4215,[19,18487],4983,4217,[19],&quot;LoadRunner Detect&quot;,4984,4219,[19,18369],4985,4220,[19,852],4986,4221,[19],&quot;\n\t\t\t\tA non-invasive data collection tool developed for supporting LoadRunner (LR) and Performance Center (PC) products.\n\t\t\t&quot;,4987,4225,[19,257],4988,4225,4987,[238],4989,4225,4988,[19,212],4990,4232,[19,18324],4991,4234,[19,18487],4992,4236,[19,19503],4993,4238,[19,18369],4994,4239,[19,852],4995,4240,[19,19513],4996,4244,[19,257],4997,4244,4996,[238],4998,4244,4997,[19,212],4999,4253,[19,18324],5000,4255,[19,18361],5001,4257,[19,18770],5002,4259,[19,18369],5003,4260,[19,852],5004,4261,[19,18780],5005,4265,[19,257],5006,4265,5005,[238],5007,4265,5006,[19,212],5008,4274,[19,18324],5009,4276,[19,18361],5010,4278,[19],&quot;ALM Explorer Add-In&quot;,5011,4280,[19,18369],5012,4281,[19,852],5013,4282,[19],&quot;\n\t\t\t\tALM Explorer Add-In enables you to use ALM without using Microsoft Internet Explorer\n\t\t\t&quot;,5014,4286,[19,257],5015,4286,5014,[238],5016,4286,5015,[19,212],5017,4293,[19,18324],5018,4295,[19,18487],5019,4297,[19,18491],5020,4299,[19,18369],5021,4300,[19,852],5022,4301,[19,18501],5023,4305,[19,257],5024,4305,5023,[238],5025,4305,5024,[19,212],5026,4312,[19,18324],5027,4314,[19,18361],5028,4316,[19],&quot;Shift - ALM Octane and ValueEdge migration tool&quot;,5029,4318,[19,18369],5030,4319,[19,852],5031,4320,[19],&quot;\n\t\t\t\tShift is a high-performance solution for migrating ALM/QC, Silk Central, Jira projects (including Xray entities) and Octane workspaces to ALM Octane and ValueEdge.\n\nPlease reach out to your account manager or to ▪▪▪-▪▪.▪▪▪▪▪▪@▪▪▪▪▪▪▪▪.▪▪▪ to get started.\n\t\t\t&quot;,5032,4324,[19,257],5033,4324,5032,[238],5034,4324,5033,[19,212],5035,4333,[1169,8487],5036,4335,[19,10171],5037,4340,[19,2193],5038,4340,5037,[1020,2529,4435],5039,4340,5038,[19,2310],5040,4342,[19],&quot;▫▫▫ items&quot;,5041,4348,[19,2116],5042,4348,5041,[1020,7306,4435],5043,4348,5042,[19,2193],5044,4350,[19],&quot;▫▫ item&quot;,5045,4356,[19,2116],5046,4356,5045,[1020,7318,4435],5047,4356,5046,[19,2193],5048,4358,[19],&quot;▫ item&quot;,5049,4364,[19,2116],5050,4364,5049,[1020,7342,4435],5051,4364,5050,[19,2193],5052,4366,[19,20133],5053,4372,[19,2116],5054,4372,5053,[1020,7258,4435],5055,4372,5054,[19,2193],5056,4374,[19],&quot;▫▫▫ item&quot;,5057,4380,[19,2116],5058,4380,5057,[1020,7246,4435],5059,4380,5058,[19,2193],5060,4382,[19,20133],5061,4388,[19,2116],5062,4388,5061,[1020,7282,4435],5063,4388,5062,[19,2193],5064,4390,[19,20133],5065,4396,[19,2116],5066,4396,5065,[1020,7234,4435],5067,4396,5066,[19,2193],5068,4398,[19,20133],5069,4404,[19,2116],5070,4404,5069,[1020,7294,4435],5071,4404,5070,[19,2193],5072,4406,[19,20148],5073,4412,[19,2116],5074,4412,5073,[1020,7270,4435],5075,4412,5074,[19,2193],5076,4414,[19,20133],5077,4420,[19,2116],5078,4420,5077,[1020,7330,4435],5079,4420,5078,[19,2193],5080,4422,[19,20148],5081,4428,[19],&quot;QA&quot;,5082,4430,[19],&quot;Admin Review&quot;,5083,4455,[19],&quot;items&quot;,5084,4467,[19,20273],5085,4481,[19,20265],5086,4483,[19,20269],5087,4492,[19,20273],5088,4510,[19,217],5089,4510,5088,[238],5090,4510,5089,[19,269],5091,4510,5090,[19,631],5092,4520,[19,3069],5093,4520,5092,[238],&quot;class=rating rating-50&quot;,5094,4520,5093,[19],&quot;\n                    \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t&quot;,5095,4520,5094,[238],&quot;class=downloads-blk &quot;,5096,4520,5095,[19],&quot;\n\t\t\t\t\t\t\t\t\t\t\t\t            &quot;,5097,4529,[19,3069],5098,4529,5097,[238,20308],5099,4529,5098,[19,20313],5100,4529,5099,[238,20318],5101,4529,5100,[19,20323],5102,4538,[19,3069],5103,4538,5102,[238,20308],5104,4538,5103,[19,20313],5105,4538,5104,[238,20318],5106,4538,5105,[19,20323],5107,4547,[19,3069],5108,4547,5107,[238,20308],5109,4547,5108,[19,20313],5110,4547,5109,[238,20318],5111,4547,5110,[19,20323],5112,4556,[19,3069],5113,4556,5112,[238,20308],5114,4556,5113,[19,20313],5115,4556,5114,[238,20318],5116,4556,5115,[19,20323],5117,4565,[19,3069],5118,4565,5117,[238,20308],5119,4565,5118,[19,20313],5120,4565,5119,[238,20318],5121,4565,5120,[19,20323],5122,4574,[19,3069],5123,4574,5122,[238,20308],5124,4574,5123,[19,20313],5125,4574,5124,[238,20318],5126,4574,5125,[19,20323],5127,4583,[19,3069],5128,4583,5127,[238,20308],5129,4583,5128,[19,20313],5130,4583,5129,[238,20318],5131,4583,5130,[19,20323],5132,4592,[19,3069],5133,4592,5132,[238],&quot;class=rating rating-45&quot;,5134,4592,5133,[19,20313],5135,4592,5134,[238,20318],5136,4592,5135,[19,20323],5137,4601,[19,3069],5138,4601,5137,[238,20464],5139,4601,5138,[19,20313],5140,4601,5139,[238,20318],5141,4601,5140,[19,20323],5142,4610,[19,3069],5143,4610,5142,[238],&quot;class=rating rating-40&quot;,5144,4610,5143,[19,20313],5145,4610,5144,[238,20318],5146,4610,5145,[19,20323],5147,4619,[19,3069],5148,4619,5147,[238,20503],5149,4619,5148,[19,20313],5150,4619,5149,[238,20318],5151,4619,5150,[19,20323],5152,4628,[19,3069],5153,4628,5152,[238,20503],5154,4628,5153,[19,20313],5155,4628,5154,[238,20318],5156,4628,5155,[19,20323],5157,4637,[19,3069],5158,4637,5157,[238],&quot;class=rating rating-30&quot;,5159,4637,5158,[19,20313],5160,4637,5159,[238,20318],5161,4637,5160,[19,20323],5162,4646,[19,3069],5163,4646,5162,[238,20561],5164,4646,5163,[19,20313],5165,4646,5164,[238,20318],5166,4646,5165,[19,20323],5167,4655,[19,3069],5168,4655,5167,[238,20561],5169,4655,5168,[19,20313],5170,4655,5169,[238,20318],5171,4655,5170,[19,20323],5172,4664,[19,3069],5173,4664,5172,[238,20561],5174,4664,5173,[19,20313],5175,4664,5174,[238,20318],5176,4664,5175,[19,20323],5177,4673,[19,3069],5178,4673,5177,[238],&quot;class=rating rating-0&quot;,5179,4673,5178,[19,20313],5180,4673,5179,[238,20318],5181,4673,5180,[19,20323],5182,4682,[19,3069],5183,4682,5182,[238,20561],5184,4682,5183,[19,20313],5185,4682,5184,[238,20318],5186,4682,5185,[19,20323],5187,4691,[19,3069],5188,4691,5187,[238],&quot;class=rating rating-20&quot;,5189,4691,5188,[19,20313],5190,4691,5189,[238,20318],5191,4691,5190,[19,20323],5192,4700,[19,3069],5193,4700,5192,[238,20638],5194,4700,5193,[19,20313],5195,4700,5194,[238,20318],5196,4700,5195,[19,20323],5197,4709,[19,3069],5198,4709,5197,[238,20503],5199,4709,5198,[19,20313],5200,4709,5199,[238,20318],5201,4709,5200,[19,20323],5202,4718,[19,3069],5203,4718,5202,[238,20638],5204,4718,5203,[19,20313],5205,4718,5204,[238,20318],5206,4718,5205,[19,20323],5207,4727,[19,3069],5208,4727,5207,[238,20503],5209,4727,5208,[19,20313],5210,4727,5209,[238,20318],5211,4727,5210,[19,20323],5212,4736,[19,3069],5213,4736,5212,[238,20638],5214,4736,5213,[19,20313],5215,4736,5214,[238,20318],5216,4736,5215,[19,20323],5217,4745,[19,3069],5218,4745,5217,[238,20308],5219,4745,5218,[19,20313],5220,4745,5219,[238,20318],5221,4745,5220,[19,20323],5222,4754,[19,3069],5223,4754,5222,[238,20308],5224,4754,5223,[19,20313],5225,4754,5224,[238,20318],5226,4754,5225,[19,20323],5227,4763,[19,3069],5228,4763,5227,[238,20308],5229,4763,5228,[19,20313],5230,4763,5229,[238,20318],5231,4763,5230,[19,20323],5232,4772,[19,3069],5233,4772,5232,[238,20308],5234,4772,5233,[19,20313],5235,4772,5234,[238,20318],5236,4772,5235,[19,20323],5237,4781,[19,3069],5238,4781,5237,[238,20308],5239,4781,5238,[19,20313],5240,4781,5239,[238,20318],5241,4781,5240,[19,20323],5242,4790,[19,3069],5243,4790,5242,[238],&quot;class=rating rating-15&quot;,5244,4790,5243,[19,20313],5245,4790,5244,[238,20318],5246,4790,5245,[19,20323],5247,4799,[19,3069],5248,4799,5247,[238,20638],5249,4799,5248,[19,20313],5250,4799,5249,[238,20318],5251,4799,5250,[19,20323],5252,4808,[19,3069],5253,4808,5252,[238,20464],5254,4808,5253,[19,20313],5255,4808,5254,[238,20318],5256,4808,5255,[19,20323],5257,4817,[19,3069],5258,4817,5257,[238,20308],5259,4817,5258,[19,20313],5260,4817,5259,[238,20318],5261,4817,5260,[19,20323],5262,4826,[19,3069],5263,4826,5262,[238,20638],5264,4826,5263,[19,20313],5265,4826,5264,[238,20318],5266,4826,5265,[19,20323],5267,4835,[19,3069],5268,4835,5267,[238,20638],5269,4835,5268,[19,20313],5270,4835,5269,[238,20318],5271,4835,5270,[19,20323],5272,4844,[19,3069],5273,4844,5272,[238,20561],5274,4844,5273,[19,20313],5275,4844,5274,[238,20318],5276,4844,5275,[19,20323],5277,4853,[19,3069],5278,4853,5277,[238,20638],5279,4853,5278,[19,20313],5280,4853,5279,[238,20318],5281,4853,5280,[19,20323],5282,4862,[19,3069],5283,4862,5282,[238,20677],5284,4862,5283,[19,20313],5285,4862,5284,[238,20318],5286,4862,5285,[19,20323],5287,4871,[19,3069],5288,4871,5287,[238,20308],5289,4871,5288,[19,20313],5290,4871,5289,[238,20318],5291,4871,5290,[19,20323],5292,4880,[19,3069],5293,4880,5292,[238,20308],5294,4880,5293,[19,20313],5295,4880,5294,[238,20318],5296,4880,5295,[19,20323],5297,4889,[19,3069],5298,4889,5297,[238,20638],5299,4889,5298,[19,20313],5300,4889,5299,[238,20318],5301,4889,5300,[19,20323],5302,4898,[19,3069],5303,4898,5302,[238],&quot;class=rating rating-35&quot;,5304,4898,5303,[19,20313],5305,4898,5304,[238,20318],5306,4898,5305,[19,20323],5307,4907,[19,3069],5308,4907,5307,[238,20677],5309,4907,5308,[19,20313],5310,4907,5309,[238,20318],5311,4907,5310,[19,20323],5312,4916,[19,3069],5313,4916,5312,[238,20503],5314,4916,5313,[19,20313],5315,4916,5314,[238,20318],5316,4916,5315,[19,20323],5317,4925,[19,3069],5318,4925,5317,[238,20503],5319,4925,5318,[19,20313],5320,4925,5319,[238,20318],5321,4925,5320,[19,20323],5322,4934,[19,3069],5323,4934,5322,[238,20638],5324,4934,5323,[19,20313],5325,4934,5324,[238,20318],5326,4934,5325,[19,20323],5327,4943,[19,3069],5328,4943,5327,[238,21116],5329,4943,5328,[19,20313],5330,4943,5329,[238,20318],5331,4943,5330,[19,20323],5332,4952,[19,3069],5333,4952,5332,[238,20308],5334,4952,5333,[19,20313],5335,4952,5334,[238,20318],5336,4952,5335,[19,20323],5337,4961,[19,3069],5338,4961,5337,[238,21116],5339,4961,5338,[19,20313],5340,4961,5339,[238,20318],5341,4961,5340,[19,20323],5342,4970,[19,3069],5343,4970,5342,[238,20308],5344,4970,5343,[19,20313],5345,4970,5344,[238,20318],5346,4970,5345,[19,20323],5347,4979,[19,3069],5348,4979,5347,[238,20677],5349,4979,5348,[19,20313],5350,4979,5349,[238,20318],5351,4979,5350,[19,20323],5352,4988,[19,3069],5353,4988,5352,[238,20503],5354,4988,5353,[19,20313],5355,4988,5354,[238,20318],5356,4988,5355,[19,20323],5357,4997,[19,3069],5358,4997,5357,[238,20677],5359,4997,5358,[19,20313],5360,4997,5359,[238,20318],5361,4997,5360,[19,20323],5362,5006,[19,3069],5363,5006,5362,[238,20561],5364,5006,5363,[19,20313],5365,5006,5364,[238,20318],5366,5006,5365,[19,20323],5367,5015,[19,3069],5368,5015,5367,[238,20561],5369,5015,5368,[19,20313],5370,5015,5369,[238,20318],5371,5015,5370,[19,20323],5372,5024,[19,3069],5373,5024,5372,[238,20308],5374,5024,5373,[19,20313],5375,5024,5374,[238,20318],5376,5024,5375,[19,20323],5377,5033,[19,3069],5378,5033,5377,[238,20638],5379,5033,5378,[19,20313],5380,5033,5379,[238,20318],5381,5033,5380,[19,20323],5382,5035,[19,12237],5383,5038,[19],&quot;All items&quot;,5384,5042,[19],&quot;Open Enterprise Server&quot;,5385,5046,[19],&quot;OpenText Filr&quot;,5386,5050,[19],&quot;Performance Engineering&quot;,5387,5054,[19],&quot;DevOps&quot;,5388,5058,[19],&quot;Developer Tools&quot;,5389,5062,[19],&quot;Enterprise Agile&quot;,5390,5066,[19],&quot;Continuous Testing&quot;,5391,5070,[19],&quot;Micro Focus Subscription Management Tool&quot;,5392,5074,[19],&quot;Digital UX&quot;,5393,5078,[19],&quot;Others&quot;,5394,5089,[19,20],5395,5089,5394,[1614],&quot;id=sso_login_form&quot;,&quot;name=ssologin&quot;,[1759],&quot;action=https://login.microfocus.com/nidp/app/login?sid=0&amp;sid=0&quot;,5396,5089,5395,[19,217],5397,5095,[3613],5398,5095,5397,[19],&quot;\n\t\t\t\t\t\t\t\t▫▫\n\t\t\t\t\t\t\t&quot;,5399,5100,[3613],5400,5100,5399,[19],&quot;\n\t\t\t\t\t\t\t\t▫▫▫\n\t\t\t\t\t\t\t&quot;,5401,5105,[3613],5402,5105,5401,[19,21491],5403,5110,[3613],5404,5110,5403,[19],&quot;\n\t\t\t\t\t\t\t\t▫▫,▫▫▫\n\t\t\t\t\t\t\t&quot;,5405,5115,[3613],5406,5115,5405,[19,21491],5407,5120,[3613],5408,5120,5407,[19],&quot;\n\t\t\t\t\t\t\t\t▫,▫▫▫\n\t\t\t\t\t\t\t&quot;,5409,5125,[3613],5410,5125,5409,[19,21506],5411,5130,[3613],5412,5130,5411,[19,21491],5413,5135,[3613],5414,5135,5413,[19,21491],5415,5140,[3613],5416,5140,5415,[19,21521],5417,5145,[3613],5418,5145,5417,[19,21506],5419,5150,[3613],5420,5150,5419,[19,21521],5421,5155,[3613],5422,5155,5421,[19,21506],5423,5160,[3613],5424,5160,5423,[19,21521],5425,5165,[3613],5426,5165,5425,[19,21506],5427,5170,[3613],5428,5170,5427,[19,21521],5429,5175,[3613],5430,5175,5429,[19,21521],5431,5180,[3613],5432,5180,5431,[19,21491],5433,5185,[3613],5434,5185,5433,[19,21521],5435,5190,[3613],5436,5190,5435,[19,21506],5437,5195,[3613],5438,5195,5437,[19,21491],5439,5200,[3613],5440,5200,5439,[19,21506],5441,5205,[3613],5442,5205,5441,[19,21491],5443,5210,[3613],5444,5210,5443,[19,21521],5445,5215,[3613],5446,5215,5445,[19,21491],5447,5220,[3613],5448,5220,5447,[19,21491],5449,5225,[3613],5450,5225,5449,[19,21483],5451,5230,[3613],5452,5230,5451,[19,21483],5453,5235,[3613],5454,5235,5453,[19,21483],5455,5240,[3613],5456,5240,5455,[19,21483],5457,5245,[3613],5458,5245,5457,[19,21483],5459,5250,[3613],5460,5250,5459,[19,21491],5461,5255,[3613],5462,5255,5461,[19,21491],5463,5260,[3613],5464,5260,5463,[19,21483],5465,5265,[3613],5466,5265,5465,[19,21491],5467,5270,[3613],5468,5270,5467,[19,21491],5469,5275,[3613],5470,5275,5469,[19,21521],5471,5280,[3613],5472,5280,5471,[19,21491],5473,5285,[3613],5474,5285,5473,[19,21521],5475,5290,[3613],5476,5290,5475,[19,21491],5477,5295,[3613],5478,5295,5477,[19,21491],5479,5300,[3613],5480,5300,5479,[19,21483],5481,5305,[3613],5482,5305,5481,[19,21506],5483,5310,[3613],5484,5310,5483,[19],&quot;\n\t\t\t\t\t\t\t\t▫▫▫,▫▫▫\n\t\t\t\t\t\t\t&quot;,5485,5315,[3613],5486,5315,5485,[19,21506],5487,5320,[3613],5488,5320,5487,[19,21506],5489,5325,[3613],5490,5325,5489,[19,21521],5491,5330,[3613],5492,5330,5491,[19,21506],5493,5335,[3613],5494,5335,5493,[19,21506],5495,5340,[3613],5496,5340,5495,[19,21506],5497,5345,[3613],5498,5345,5497,[19,21506],5499,5350,[3613],5500,5350,5499,[19,21506],5501,5355,[3613],5502,5355,5501,[19,21521],5503,5360,[3613],5504,5360,5503,[19,21521],5505,5365,[3613],5506,5365,5505,[19,21506],5507,5370,[3613],5508,5370,5507,[19,21506],5509,5375,[3613],5510,5375,5509,[19,21521],5511,5380,[3613],5512,5380,5511,[19,21521],5513,5395,[19,29],5514,5395,5513,[3282,3283],&quot;name=option&quot;,[3285],5515,5395,5514,[19,29],5516,5395,5515,[3282,3283],&quot;name=target&quot;,[3285],5517,5395,5516,[19,29],5518,5395,5517,[3282,6418,4411],&quot;name=Ecom_User_ID&quot;,[6424],5519,5395,5518,[19,29],5520,5395,5519,[3282,6457,4540],&quot;name=Ecom_Password&quot;,[3285],5521,5395,5520,[19,20]]]}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Sec-Fetch-Mode" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                <stringProp name="Header.value">cors</stringProp>
              </elementProp>
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">https://www.microfocus.com/</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Site" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                <stringProp name="Header.value">cross-site</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Origin" elementType="Header">
                <stringProp name="Header.name">Origin</stringProp>
                <stringProp name="Header.value">https://www.microfocus.com</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">text/plain;charset=UTF-8</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:128.0) Gecko/20100101 Firefox/128.0</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Dest" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                <stringProp name="Header.value">empty</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/v1/beacon/img.gif-77" enabled="true">
          <stringProp name="HTTPSampler.domain">b.6sc.co</stringProp>
          <stringProp name="HTTPSampler.port">443</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.path">/v1/beacon/img.gif</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments">
              <elementProp name="token" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">token</stringProp>
                <stringProp name="Argument.value">5f90029b56db57cd17027efd926646ef</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="svisitor" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">svisitor</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="visitor" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">visitor</stringProp>
                <stringProp name="Argument.value">e43783fd-0d0b-4b08-8499-84fc86871881</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="session" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">session</stringProp>
                <stringProp name="Argument.value">cfa3825d-7349-4a7a-87a4-13fccbbe3404</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="event" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">event</stringProp>
                <stringProp name="Argument.value">passive_time_track</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="q" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">q</stringProp>
                <stringProp name="Argument.value">{&quot;currentTime&quot;:&quot;Sat, 20 Jul 2024 15:23:58 GMT&quot;,&quot;lastTrackTime&quot;:&quot;Sat, 20 Jul 2024 15:22:36 GMT&quot;,&quot;timeSpent&quot;:&quot;81861&quot;,&quot;totalTimeSpent&quot;:&quot;1228031&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="isIframe" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">isIframe</stringProp>
                <stringProp name="Argument.value">false</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="m" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">m</stringProp>
                <stringProp name="Argument.value">{&quot;description&quot;:&quot;Web Tours is a sample Web-based travel agency application used to demonstrate how LoadRunner is used as a solution for performance testing.&quot;,&quot;keywords&quot;:&quot;&quot;,&quot;title&quot;:&quot;      Web Tours Sample Application | AppDelivery Marketplace\n  &quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="cb" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">cb</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="r" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">r</stringProp>
                <stringProp name="Argument.value">https://www.google.com/</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="thirdParty" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">thirdParty</stringProp>
                <stringProp name="Argument.value">{}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="v2" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">v2</stringProp>
                <stringProp name="Argument.value">1</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="pageURL" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">pageURL</stringProp>
                <stringProp name="Argument.value">https://www.microfocus.com/marketplace/appdelivery/content/web-tours-sample-application</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="pageViewId" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">pageViewId</stringProp>
                <stringProp name="Argument.value">81a5b2a4-c15c-483b-81d4-6c490410d751</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="ipv6" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">ipv6</stringProp>
                <stringProp name="Argument.value">2405:201:a008:d18b:9529:4cdd:5ec2:3539</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="v" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">v</stringProp>
                <stringProp name="Argument.value">1.1.22</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Sec-Fetch-Mode" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                <stringProp name="Header.value">no-cors</stringProp>
              </elementProp>
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">https://www.microfocus.com/</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Site" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                <stringProp name="Header.value">cross-site</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Priority" elementType="Header">
                <stringProp name="Header.name">Priority</stringProp>
                <stringProp name="Header.value">u=6, i</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:128.0) Gecko/20100101 Firefox/128.0</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">image/avif,image/webp,image/png,image/svg+xml,image/*;q=0.8,*/*;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Dest" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                <stringProp name="Header.value">image</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/nidp/app/login-74" enabled="true">
          <stringProp name="HTTPSampler.domain">login.microfocus.com</stringProp>
          <stringProp name="HTTPSampler.port">443</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.path">/nidp/app/login</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments">
              <elementProp name="sid" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">sid</stringProp>
                <stringProp name="Argument.value">34</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Sec-Fetch-Mode" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                <stringProp name="Header.value">navigate</stringProp>
              </elementProp>
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">https://www.microfocus.com/</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Site" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                <stringProp name="Header.value">same-site</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Priority" elementType="Header">
                <stringProp name="Header.name">Priority</stringProp>
                <stringProp name="Header.value">u=4</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/png,image/svg+xml,*/*;q=0.8</stringProp>
              </elementProp>
              <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:128.0) Gecko/20100101 Firefox/128.0</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Dest" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                <stringProp name="Header.value">iframe</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/v1/beacon/img.gif-79" enabled="true">
          <stringProp name="HTTPSampler.domain">b.6sc.co</stringProp>
          <stringProp name="HTTPSampler.port">443</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.path">/v1/beacon/img.gif</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments">
              <elementProp name="token" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">token</stringProp>
                <stringProp name="Argument.value">5f90029b56db57cd17027efd926646ef</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="svisitor" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">svisitor</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="visitor" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">visitor</stringProp>
                <stringProp name="Argument.value">e43783fd-0d0b-4b08-8499-84fc86871881</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="session" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">session</stringProp>
                <stringProp name="Argument.value">cfa3825d-7349-4a7a-87a4-13fccbbe3404</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="event" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">event</stringProp>
                <stringProp name="Argument.value">active_time_track</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="q" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">q</stringProp>
                <stringProp name="Argument.value">{&quot;currentTime&quot;:&quot;Sat, 20 Jul 2024 15:23:58 GMT&quot;,&quot;lastTrackTime&quot;:&quot;Sat, 20 Jul 2024 15:23:57 GMT&quot;,&quot;timeSpent&quot;:&quot;1013&quot;,&quot;totalTimeSpent&quot;:&quot;4052&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="isIframe" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">isIframe</stringProp>
                <stringProp name="Argument.value">false</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="m" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">m</stringProp>
                <stringProp name="Argument.value">{&quot;description&quot;:&quot;Accelerate the planning, testing, delivery and support of optimized applications.&quot;,&quot;keywords&quot;:&quot;&quot;,&quot;title&quot;:&quot;Application Delivery Marketplace | OpenText&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="cb" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">cb</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="r" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">r</stringProp>
                <stringProp name="Argument.value">https://www.microfocus.com/marketplace/appdelivery</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="thirdParty" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">thirdParty</stringProp>
                <stringProp name="Argument.value">{}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="v2" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">v2</stringProp>
                <stringProp name="Argument.value">1</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="pageURL" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">pageURL</stringProp>
                <stringProp name="Argument.value">https://www.microfocus.com/marketplace/appdelivery</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="pageViewId" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">pageViewId</stringProp>
                <stringProp name="Argument.value">08d224e6-f0d9-4af1-8fe4-78c8bb9ff1fa</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="v" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">v</stringProp>
                <stringProp name="Argument.value">1.1.22</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Sec-Fetch-Mode" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                <stringProp name="Header.value">no-cors</stringProp>
              </elementProp>
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">https://www.microfocus.com/</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Site" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                <stringProp name="Header.value">cross-site</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Priority" elementType="Header">
                <stringProp name="Header.name">Priority</stringProp>
                <stringProp name="Header.value">u=6, i</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:128.0) Gecko/20100101 Firefox/128.0</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">image/avif,image/webp,image/png,image/svg+xml,image/*;q=0.8,*/*;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Dest" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                <stringProp name="Header.value">image</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/nidp/saml2/sso-80" enabled="true">
          <stringProp name="HTTPSampler.domain">sldlogin.microfocus.com</stringProp>
          <stringProp name="HTTPSampler.port">443</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">ISO-8859-1</stringProp>
          <stringProp name="HTTPSampler.path">/nidp/saml2/sso</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments">
              <elementProp name="SAMLRequest" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">SAMLRequest</stringProp>
                <stringProp name="Argument.value">PHNhbWxwOkF1dGhuUmVxdWVzdCB4bWxuczpzYW1scD0idXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6Mi4wOnByb3RvY29sIiB4bWxuczpzYW1sPSJ1cm46b2FzaXM6bmFtZXM6dGM6U0FNTDoyLjA6YXNzZXJ0aW9uIiBDb25zZW50PSJ1cm46b2FzaXM6bmFtZXM6dGM6U0FNTDoyLjA6Y29uc2VudDp1bmF2YWlsYWJsZSIgRGVzdGluYXRpb249Imh0dHBzOi8vc2xkbG9naW4ubWljcm9mb2N1cy5jb20vbmlkcC9zYW1sMi9zc28iIEZvcmNlQXV0aG49ImZhbHNlIiBJRD0iaWRxZ2VZWmVOdUM2M2JUbFpJTm1zUFAwUWZxQ28iIElzUGFzc2l2ZT0idHJ1ZSIgSXNzdWVJbnN0YW50PSIyMDI0LTA3LTIwVDE1OjIzOjU4WiIgUHJvdG9jb2xCaW5kaW5nPSJ1cm46b2FzaXM6bmFtZXM6dGM6U0FNTDoyLjA6YmluZGluZ3M6SFRUUC1QT1NUIiBWZXJzaW9uPSIyLjAiPjxzYW1sOklzc3Vlcj5odHRwczovL2xvZ2luLm1pY3JvZm9jdXMuY29tL25pZHAvc2FtbDIvbWV0YWRhdGE8L3NhbWw6SXNzdWVyPjxkczpTaWduYXR1cmUgeG1sbnM6ZHM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvMDkveG1sZHNpZyMiPjxkczpTaWduZWRJbmZvPjxDYW5vbmljYWxpemF0aW9uTWV0aG9kIHhtbG5zPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwLzA5L3htbGRzaWcjIiBBbGdvcml0aG09Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvMTAveG1sLWV4Yy1jMTRuIyIvPjxkczpTaWduYXR1cmVNZXRob2QgQWxnb3JpdGhtPSJodHRwOi8vd3d3LnczLm9yZy8yMDAxLzA0L3htbGRzaWctbW9yZSNyc2Etc2hhMjU2Ii8+PGRzOlJlZmVyZW5jZSBVUkk9IiNpZHFnZVlaZU51QzYzYlRsWklObXNQUDBRZnFDbyI+PGRzOlRyYW5zZm9ybXM+PGRzOlRyYW5zZm9ybSBBbGdvcml0aG09Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvMDkveG1sZHNpZyNlbnZlbG9wZWQtc2lnbmF0dXJlIi8+PGRzOlRyYW5zZm9ybSBBbGdvcml0aG09Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvMTAveG1sLWV4Yy1jMTRuIyIvPjwvZHM6VHJhbnNmb3Jtcz48ZHM6RGlnZXN0TWV0aG9kIEFsZ29yaXRobT0iaHR0cDovL3d3dy53My5vcmcvMjAwMS8wNC94bWxlbmMjc2hhMjU2Ii8+PERpZ2VzdFZhbHVlIHhtbG5zPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwLzA5L3htbGRzaWcjIj5ramV3RERxc0Z0U1B2YVltQm1TWnk1Z0dBbTN2b0srT1BEcTM4QUtCemRVPTwvRGlnZXN0VmFsdWU+PC9kczpSZWZlcmVuY2U+PC9kczpTaWduZWRJbmZvPjxTaWduYXR1cmVWYWx1ZSB4bWxucz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC8wOS94bWxkc2lnIyI+CmljbUlTdzVDaFJ4b2NxZk5LRUFnQlJsUFJmeGdvTnZmMExGVHl5b2luQ2VVTUtkMnlGVmNnT3h0dzdOdU9OZjZSdGNqRDhoWm5ZakIKdEdtbHJJUmx0S25POFpwWVVEaDhwZlVNb0FLbk9xL21GOExyQ0Y2SngzM21ha0I5SmVodEFQV3kzbTdjUWxHaGpuSWxwZENEVmthRApNU05pOTNPWklTKzJoT2N5OWVSb2Izd2hSWmJFWG9NalJTeDVKaU50eUpDNE5URndKZnMySFg4cUgxUUthM3B1VkxsWjRhdjYwT2UwClBvS21kRC9EZG53NEFxUUpqK1pGWHAybVZHcGx5R2dKRy9Nb3oxN3ZvWlQzQXRZdVhRME5CSEFYMHd6SStjdk5vWEpRMzhUQkYxb1kKSFlsN0NLRk9YVVVXVEMyeU1GMUFra2NaZDN0QWpnSE5hUTlMdHc9PQo8L1NpZ25hdHVyZVZhbHVlPjxkczpLZXlJbmZvPjxkczpYNTA5RGF0YT48ZHM6WDUwOUNlcnRpZmljYXRlPgpNSUlHNVRDQ0JjMmdBd0lCQWdJUUEyQkNjd2ZLUUhXS3RUQ2M5ZGtLWmpBTkJna3Foa2lHOXcwQkFRc0ZBREJaTVFzd0NRWURWUVFHCkV3SlZVekVWTUJNR0ExVUVDaE1NUkdsbmFVTmxjblFnU1c1ak1UTXdNUVlEVlFRREV5cEVhV2RwUTJWeWRDQkhiRzlpWVd3Z1J6SWcKVkV4VElGSlRRU0JUU0VFeU5UWWdNakF5TUNCRFFURXdIaGNOTWpRd01UQXlNREF3TURBd1doY05NalV3TVRBeU1qTTFPVFU1V2pCbQpNUXN3Q1FZRFZRUUdFd0pIUWpFUU1BNEdBMVVFQnhNSFRtVjNZblZ5ZVRFcU1DZ0dBMVVFQ2hNaFRXbGpjbThnUm05amRYTWdTVzUwClpYSnVZWFJwYjI1aGJDQk1hVzFwZEdWa01Sa3dGd1lEVlFRRERCQXFMbTFwWTNKdlptOWpkWE11WTI5dE1JSUJJakFOQmdrcWhraUcKOXcwQkFRRUZBQU9DQVE4QU1JSUJDZ0tDQVFFQXg5RW5sQ3pUQmdrZjV5UGljWVhrbjBoQkduZVBYeXpLQjJ2c0p1RUFtWk11a0ZSRwpicTgxRllTR1NLajN4Ykt0b24wMGFTbTRlK3orQkZpcnUrWW1tc1h1cktvUGZBVkxxem9FQ2dxUlVMNkhjNzM4dGZXRjhSR1V5aDFrCm4vcDlKSVpzZ014NG1oT0NxRWFMZnlLOVhxSnhUcldub1AwZ1Q5KytTRHVvNThuRUVvU2h1aVdZQ0hzZWZlaEpuNkVRbXhOWThrRUkKUE83UDFjdkNFL1hWVnkyUW5QSWc3ZEd2SEJnMFlrZUdzTjJ6U2I3RVJVZFdWWVdiUmxYcE4rWVVuclpxTWs4Y3dibURhRHg3b05NNQp1eWIwUDN2TnVrYkJra3ExSk5jeWtPM092bXBVdkFkaWl6RHoyNG9KbG1ZWTJyVTJta2Q1T1NySG94N0ZZWEloVVFJREFRQUJvNElECm1qQ0NBNVl3SHdZRFZSMGpCQmd3Rm9BVWRJV0F3R2JIM3pmZXo3MHBONm9ESGI3dHpSY3dIUVlEVlIwT0JCWUVGTzNUbUVsaDllcW0KRXlGdGF0TDR0ZXp0RWhJaE1Dc0dBMVVkRVFRa01DS0NFQ291YldsamNtOW1iMk4xY3k1amIyMkNEbTFwWTNKdlptOWpkWE11WTI5dApNRDRHQTFVZElBUTNNRFV3TXdZR1o0RU1BUUlDTUNrd0p3WUlLd1lCQlFVSEFnRVdHMmgwZEhBNkx5OTNkM2N1WkdsbmFXTmxjblF1ClkyOXRMME5RVXpBT0JnTlZIUThCQWY4RUJBTUNCYUF3SFFZRFZSMGxCQll3RkFZSUt3WUJCUVVIQXdFR0NDc0dBUVVGQndNQ01JR2YKQmdOVkhSOEVnWmN3Z1pRd1NLQkdvRVNHUW1oMGRIQTZMeTlqY213ekxtUnBaMmxqWlhKMExtTnZiUzlFYVdkcFEyVnlkRWRzYjJKaApiRWN5VkV4VFVsTkJVMGhCTWpVMk1qQXlNRU5CTVMweExtTnliREJJb0VhZ1JJWkNhSFIwY0RvdkwyTnliRFF1WkdsbmFXTmxjblF1ClkyOXRMMFJwWjJsRFpYSjBSMnh2WW1Gc1J6SlVURk5TVTBGVFNFRXlOVFl5TURJd1EwRXhMVEV1WTNKc01JR0hCZ2dyQmdFRkJRY0IKQVFSN01Ia3dKQVlJS3dZQkJRVUhNQUdHR0doMGRIQTZMeTl2WTNOd0xtUnBaMmxqWlhKMExtTnZiVEJSQmdnckJnRUZCUWN3QW9aRgphSFIwY0RvdkwyTmhZMlZ5ZEhNdVpHbG5hV05sY25RdVkyOXRMMFJwWjJsRFpYSjBSMnh2WW1Gc1J6SlVURk5TVTBGVFNFRXlOVFl5Ck1ESXdRMEV4TFRFdVkzSjBNQXdHQTFVZEV3RUIvd1FDTUFBd2dnRjhCZ29yQmdFRUFkWjVBZ1FDQklJQmJBU0NBV2dCWmdCMUFNOFIKVnU3VkxueXY4NGRiMldrdW0ra2FjV2RLc0Jmc3JBSFNXM2ZPekRzSUFBQUJqTXU3NGdrQUFBUURBRVl3UkFJZ1pZVnl0YXpncG45TQpqVVlrbVE4UnJXVnV4Y2IxVGpxUFFnWFRVeWdWb05jQ0lCSlhsR0czNWFhdDd2cXkrZTBuUjFRakFaa1dyYVNGbHYwcXFBc3BHZVJDCkFIWUFQeGRMVDljaVIxaVVIV1VjaEw0TkV1MlFOMzhmaFdycndiOG9oZXo0Wkc0QUFBR015N3ZoMHdBQUJBTUFSekJGQWlFQS9USFQKaDkwTTc1dUtlRlJaQTV5SVB5WVVUU3E5V0FaYU9WSVRQQ3BPOGNZQ0lCcjN1VVBldnp4alJCV3J1eHNKeWt6cGJJazBnUVRVMU5jZQo0NzlCMlc3OUFIVUFmVmtlRXVGNEtuc2NZV2Q4WHYzNDBJZGNGS0JPbFo2NUF5L1pEb3d1ZWJnQUFBR015N3ZoeFFBQUJBTUFSakJFCkFpQVdUMnNQZU9HWnN4eWsvZEY3anhyL3daNk1ReDBvZ2JkaWR4bGp1azlzbmdJZ1JKdVRFU2VjelRDWVNqYXV1OGpTS2hEVkJORkwKeTVjVVkvdjJBQlphYXRrd0RRWUpLb1pJaHZjTkFRRUxCUUFEZ2dFQkFBcndDOFNpd3F0NFcvZWwzdEFBdEdVdUlGZ0xwVzhMVXdnbApzaGVOQUhuVDJFN0JYOGt2OGc5eWZrZ0hFT1l0T2toT05aRE1ndmNabmVlaS91ajRQZndldzBiUTcyYjhuSnAvQlpDWmFpLzZGMEZJCkNvY2NNcmJRK2JnNFVCVFJHYmhMZWhrdVpOek5yV3dDU1YxWHgzbWl4b0JVNmUwVFFXTG1uM1EramV5QUg5dFRpcGFTZldmV2xIdzAKaThrMTMweW9rUGhtNnhDU0tvemNXREVWVFZZRUpLRVl1dWVUTitaSlJaRG9LcWwrOGRmcnZVRldjajZNK3ZYdUhFQk9JTlE5ZUs4dwp4aDF1OFg0cUZlTE9yOCtkenRuRDQwNWJ0czV0bzBKU2tiWHhBN3pTQm9ib1dTT1NoZnZmZjJ3dEsvWU5mR284d2tzMGlrelZ5YWNHCjdPND0KPC9kczpYNTA5Q2VydGlmaWNhdGU+PC9kczpYNTA5RGF0YT48L2RzOktleUluZm8+PC9kczpTaWduYXR1cmU+PHNhbWxwOk5hbWVJRFBvbGljeSBGb3JtYXQ9InVybjpvYXNpczpuYW1lczp0YzpTQU1MOjEuMTpuYW1laWQtZm9ybWF0OnVuc3BlY2lmaWVkIi8+PC9zYW1scDpBdXRoblJlcXVlc3Q+</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="RelayState" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">RelayState</stringProp>
                <stringProp name="Argument.value">MzQ=</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Sec-Fetch-Mode" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                <stringProp name="Header.value">navigate</stringProp>
              </elementProp>
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">https://login.microfocus.com/</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Site" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                <stringProp name="Header.value">same-site</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Origin" elementType="Header">
                <stringProp name="Header.name">Origin</stringProp>
                <stringProp name="Header.value">https://login.microfocus.com</stringProp>
              </elementProp>
              <elementProp name="Priority" elementType="Header">
                <stringProp name="Header.name">Priority</stringProp>
                <stringProp name="Header.value">u=4</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/png,image/svg+xml,*/*;q=0.8</stringProp>
              </elementProp>
              <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:128.0) Gecko/20100101 Firefox/128.0</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Dest" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                <stringProp name="Header.value">iframe</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/collect-78" enabled="true">
          <stringProp name="HTTPSampler.domain">y.clarity.ms</stringProp>
          <stringProp name="HTTPSampler.port">443</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">/collect</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;e&quot;:[&quot;0.7.32&quot;,3,376,2458,&quot;iu69ce0l9t&quot;,&quot;dprpjk&quot;,&quot;lkifca&quot;,2,0,0],&quot;a&quot;:[[821,24,&quot;clarity&quot;,&quot;dup.3ynmtgenx6&quot;],[20,12,854,732,338],[36,12,854,730,338],[52,12,854,730,339],[67,12,854,730,341],[333,12,854,726,347],[333,12,854,723,355],[348,12,854,719,370],[364,12,854,717,375],[395,12,1401,711,389],[411,12,1401,710,390],[458,12,1401,710,391],[473,12,1401,710,392],[489,12,1401,710,392],[1605,2,1,2,204],[376,4,1,1536,2380,1536,731,0,0,0,0,0,0],[2834,0,2,70910,3,1,4,26,5,4,25,21],[2834,36,6,[2533,23,2818,0]]],&quot;p&quot;:[[2533,6,298,184,297,&quot;LI&quot;,&quot;class=appdelivery bu-active primary-list &quot;,&quot;data-uk-dropdown=&quot;,&quot;aria-haspopup=true&quot;,&quot;aria-expanded=false&quot;],[2536,6,298,184,297,&quot;LI&quot;,&quot;class=appdelivery bu-active primary-list uk-open&quot;,&quot;data-uk-dropdown=&quot;,&quot;aria-haspopup=true&quot;,&quot;aria-expanded=true&quot;],[2556,6,296,184,295,&quot;LI&quot;,&quot;class=itom  primary-list &quot;,&quot;data-uk-dropdown=&quot;,&quot;aria-haspopup=true&quot;,&quot;aria-expanded=false&quot;],[2818,6,298,184,297,&quot;LI&quot;,&quot;class=appdelivery bu-active primary-list&quot;,&quot;data-uk-dropdown=&quot;,&quot;aria-haspopup=true&quot;,&quot;aria-expanded=false&quot;,296,184,295,[5],&quot;class=itom primary-list uk-open&quot;,[7,8],&quot;aria-expanded=true&quot;]]}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Sec-Fetch-Mode" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                <stringProp name="Header.value">cors</stringProp>
              </elementProp>
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">https://www.microfocus.com/</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Site" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                <stringProp name="Header.value">cross-site</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Origin" elementType="Header">
                <stringProp name="Header.name">Origin</stringProp>
                <stringProp name="Header.value">https://www.microfocus.com</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">text/plain;charset=UTF-8</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:128.0) Gecko/20100101 Firefox/128.0</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Dest" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                <stringProp name="Header.value">empty</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/j/collect?v=1&amp;_v=j101&amp;a=471012738&amp;t=pageview&amp;_s=1&amp;dl=https%3A%2F%2Fwww.microfocus.com%2Fmarketplace%2Fappdelivery&amp;ul=en-us&amp;de=UTF-8&amp;dt=Application%20Delivery%20Marketplace%20%7C%20OpenText&amp;sd=24-bit&amp;sr=1536x864&amp;vp=1536x731&amp;je=0&amp;_u=QCCACEABBAAAACgAI~&amp;jid=&amp;gjid=&amp;cid=1264267099.1721486760&amp;tid=UA-44010430-10&amp;_gid=675600319.1721486761&amp;_slc=1&amp;gtm=45He47h0n71MXKD45v71343913za200&amp;gcs=G111&amp;gcd=13n3n3n3n5&amp;dma=0&amp;tag_exp=0&amp;z=1983434426-82" enabled="true">
          <stringProp name="HTTPSampler.domain">www.google-analytics.com</stringProp>
          <stringProp name="HTTPSampler.port">443</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.path">/j/collect?v=1&amp;_v=j101&amp;a=471012738&amp;t=pageview&amp;_s=1&amp;dl=https%3A%2F%2Fwww.microfocus.com%2Fmarketplace%2Fappdelivery&amp;ul=en-us&amp;de=UTF-8&amp;dt=Application%20Delivery%20Marketplace%20%7C%20OpenText&amp;sd=24-bit&amp;sr=1536x864&amp;vp=1536x731&amp;je=0&amp;_u=QCCACEABBAAAACgAI~&amp;jid=&amp;gjid=&amp;cid=1264267099.1721486760&amp;tid=UA-44010430-10&amp;_gid=675600319.1721486761&amp;_slc=1&amp;gtm=45He47h0n71MXKD45v71343913za200&amp;gcs=G111&amp;gcd=13n3n3n3n5&amp;dma=0&amp;tag_exp=0&amp;z=1983434426</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Sec-Fetch-Mode" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                <stringProp name="Header.value">cors</stringProp>
              </elementProp>
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">https://www.microfocus.com/</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Site" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                <stringProp name="Header.value">cross-site</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Origin" elementType="Header">
                <stringProp name="Header.name">Origin</stringProp>
                <stringProp name="Header.value">https://www.microfocus.com</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">text/plain</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:128.0) Gecko/20100101 Firefox/128.0</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Dest" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                <stringProp name="Header.value">empty</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/-84" enabled="true">
          <stringProp name="HTTPSampler.domain">c.6sc.co</stringProp>
          <stringProp name="HTTPSampler.port">443</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.path">/</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Sec-Fetch-Mode" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                <stringProp name="Header.value">cors</stringProp>
              </elementProp>
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">https://www.microfocus.com/</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Site" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                <stringProp name="Header.value">cross-site</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Origin" elementType="Header">
                <stringProp name="Header.name">Origin</stringProp>
                <stringProp name="Header.value">https://www.microfocus.com</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:128.0) Gecko/20100101 Firefox/128.0</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Dest" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                <stringProp name="Header.value">empty</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/c.gif-81" enabled="true">
          <stringProp name="TestPlan.comments">Detected the start of a redirect chain</stringProp>
          <stringProp name="HTTPSampler.domain">c.clarity.ms</stringProp>
          <stringProp name="HTTPSampler.port">443</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.path">/c.gif</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Sec-Fetch-Mode" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                <stringProp name="Header.value">no-cors</stringProp>
              </elementProp>
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">https://www.microfocus.com/</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Site" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                <stringProp name="Header.value">cross-site</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Priority" elementType="Header">
                <stringProp name="Header.name">Priority</stringProp>
                <stringProp name="Header.value">u=6, i</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:128.0) Gecko/20100101 Firefox/128.0</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">image/avif,image/webp,image/png,image/svg+xml,image/*;q=0.8,*/*;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Dest" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                <stringProp name="Header.value">image</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/v1/beacon/img.gif-83" enabled="true">
          <stringProp name="HTTPSampler.domain">b.6sc.co</stringProp>
          <stringProp name="HTTPSampler.port">443</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.path">/v1/beacon/img.gif</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments">
              <elementProp name="token" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">token</stringProp>
                <stringProp name="Argument.value">5f90029b56db57cd17027efd926646ef</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="svisitor" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">svisitor</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="visitor" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">visitor</stringProp>
                <stringProp name="Argument.value">e43783fd-0d0b-4b08-8499-84fc86871881</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="session" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">session</stringProp>
                <stringProp name="Argument.value">cfa3825d-7349-4a7a-87a4-13fccbbe3404</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="event" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">event</stringProp>
                <stringProp name="Argument.value">s_update</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="q" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">q</stringProp>
                <stringProp name="Argument.value">{&quot;settings&quot;:&quot;[{\&quot;name\&quot;:\&quot;setEpsilonKey\&quot;,\&quot;value\&quot;:\&quot;bcf06a87ae1f9b0ae09e0fa47a3f4be3c4799786\&quot;,\&quot;dateTime\&quot;:\&quot;Sat, 20 Jul 2024 15:24:00 GMT\&quot;,\&quot;timeSincePageLoad\&quot;:\&quot;5128\&quot;}]&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="isIframe" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">isIframe</stringProp>
                <stringProp name="Argument.value">false</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="m" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">m</stringProp>
                <stringProp name="Argument.value">{&quot;description&quot;:&quot;Accelerate the planning, testing, delivery and support of optimized applications.&quot;,&quot;keywords&quot;:&quot;&quot;,&quot;title&quot;:&quot;Application Delivery Marketplace | OpenText&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="cb" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">cb</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="r" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">r</stringProp>
                <stringProp name="Argument.value">https://www.microfocus.com/marketplace/appdelivery</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="thirdParty" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">thirdParty</stringProp>
                <stringProp name="Argument.value">{}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="v2" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">v2</stringProp>
                <stringProp name="Argument.value">1</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="pageURL" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">pageURL</stringProp>
                <stringProp name="Argument.value">https://www.microfocus.com/marketplace/appdelivery</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="pageViewId" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">pageViewId</stringProp>
                <stringProp name="Argument.value">08d224e6-f0d9-4af1-8fe4-78c8bb9ff1fa</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="v" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">v</stringProp>
                <stringProp name="Argument.value">1.1.22</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Sec-Fetch-Mode" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                <stringProp name="Header.value">no-cors</stringProp>
              </elementProp>
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">https://www.microfocus.com/</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Site" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                <stringProp name="Header.value">cross-site</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Priority" elementType="Header">
                <stringProp name="Header.name">Priority</stringProp>
                <stringProp name="Header.value">u=6, i</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:128.0) Gecko/20100101 Firefox/128.0</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">image/avif,image/webp,image/png,image/svg+xml,image/*;q=0.8,*/*;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Dest" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                <stringProp name="Header.value">image</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/v1/beacon/img.gif-86" enabled="true">
          <stringProp name="HTTPSampler.domain">b.6sc.co</stringProp>
          <stringProp name="HTTPSampler.port">443</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.path">/v1/beacon/img.gif</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments">
              <elementProp name="token" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">token</stringProp>
                <stringProp name="Argument.value">5f90029b56db57cd17027efd926646ef</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="svisitor" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">svisitor</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="visitor" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">visitor</stringProp>
                <stringProp name="Argument.value">e43783fd-0d0b-4b08-8499-84fc86871881</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="session" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">session</stringProp>
                <stringProp name="Argument.value">cfa3825d-7349-4a7a-87a4-13fccbbe3404</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="event" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">event</stringProp>
                <stringProp name="Argument.value">s_update</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="q" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">q</stringProp>
                <stringProp name="Argument.value">{&quot;settings&quot;:&quot;[{\&quot;name\&quot;:\&quot;enableCompanyDetails\&quot;,\&quot;value\&quot;:\&quot;[true,null]\&quot;,\&quot;dateTime\&quot;:\&quot;Sat, 20 Jul 2024 15:24:00 GMT\&quot;,\&quot;timeSincePageLoad\&quot;:\&quot;5126\&quot;}]&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="isIframe" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">isIframe</stringProp>
                <stringProp name="Argument.value">false</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="m" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">m</stringProp>
                <stringProp name="Argument.value">{&quot;description&quot;:&quot;Accelerate the planning, testing, delivery and support of optimized applications.&quot;,&quot;keywords&quot;:&quot;&quot;,&quot;title&quot;:&quot;Application Delivery Marketplace | OpenText&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="cb" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">cb</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="r" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">r</stringProp>
                <stringProp name="Argument.value">https://www.microfocus.com/marketplace/appdelivery</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="thirdParty" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">thirdParty</stringProp>
                <stringProp name="Argument.value">{}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="v2" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">v2</stringProp>
                <stringProp name="Argument.value">1</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="pageURL" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">pageURL</stringProp>
                <stringProp name="Argument.value">https://www.microfocus.com/marketplace/appdelivery</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="pageViewId" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">pageViewId</stringProp>
                <stringProp name="Argument.value">08d224e6-f0d9-4af1-8fe4-78c8bb9ff1fa</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="v" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">v</stringProp>
                <stringProp name="Argument.value">1.1.22</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Sec-Fetch-Mode" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                <stringProp name="Header.value">no-cors</stringProp>
              </elementProp>
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">https://www.microfocus.com/</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Site" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                <stringProp name="Header.value">cross-site</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Priority" elementType="Header">
                <stringProp name="Header.name">Priority</stringProp>
                <stringProp name="Header.value">u=6, i</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:128.0) Gecko/20100101 Firefox/128.0</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">image/avif,image/webp,image/png,image/svg+xml,image/*;q=0.8,*/*;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Dest" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                <stringProp name="Header.value">image</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/v3/company/details-85" enabled="true">
          <stringProp name="HTTPSampler.domain">epsilon.6sense.com</stringProp>
          <stringProp name="HTTPSampler.port">443</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.path">/v3/company/details</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Sec-Fetch-Mode" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                <stringProp name="Header.value">cors</stringProp>
              </elementProp>
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">https://www.microfocus.com/</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Site" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                <stringProp name="Header.value">cross-site</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Origin" elementType="Header">
                <stringProp name="Header.name">Origin</stringProp>
                <stringProp name="Header.value">https://www.microfocus.com</stringProp>
              </elementProp>
              <elementProp name="X-6s-CustomID" elementType="Header">
                <stringProp name="Header.name">X-6s-CustomID</stringProp>
                <stringProp name="Header.value">WebTag1.0 5f90029b56db57cd17027efd926646ef</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:128.0) Gecko/20100101 Firefox/128.0</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Dest" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                <stringProp name="Header.value">empty</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/v1/beacon/img.gif-87" enabled="true">
          <stringProp name="HTTPSampler.domain">b.6sc.co</stringProp>
          <stringProp name="HTTPSampler.port">443</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.path">/v1/beacon/img.gif</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments">
              <elementProp name="token" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">token</stringProp>
                <stringProp name="Argument.value">5f90029b56db57cd17027efd926646ef</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="svisitor" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">svisitor</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="visitor" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">visitor</stringProp>
                <stringProp name="Argument.value">e43783fd-0d0b-4b08-8499-84fc86871881</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="session" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">session</stringProp>
                <stringProp name="Argument.value">cfa3825d-7349-4a7a-87a4-13fccbbe3404</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="event" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">event</stringProp>
                <stringProp name="Argument.value">active_time_track</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="q" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">q</stringProp>
                <stringProp name="Argument.value">{&quot;currentTime&quot;:&quot;Sat, 20 Jul 2024 15:24:00 GMT&quot;,&quot;lastTrackTime&quot;:&quot;Sat, 20 Jul 2024 15:23:58 GMT&quot;,&quot;timeSpent&quot;:&quot;1023&quot;,&quot;totalTimeSpent&quot;:&quot;5075&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="isIframe" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">isIframe</stringProp>
                <stringProp name="Argument.value">false</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="m" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">m</stringProp>
                <stringProp name="Argument.value">{&quot;description&quot;:&quot;Accelerate the planning, testing, delivery and support of optimized applications.&quot;,&quot;keywords&quot;:&quot;&quot;,&quot;title&quot;:&quot;Application Delivery Marketplace | OpenText&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="cb" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">cb</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="r" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">r</stringProp>
                <stringProp name="Argument.value">https://www.microfocus.com/marketplace/appdelivery</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="thirdParty" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">thirdParty</stringProp>
                <stringProp name="Argument.value">{}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="v2" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">v2</stringProp>
                <stringProp name="Argument.value">1</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="pageURL" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">pageURL</stringProp>
                <stringProp name="Argument.value">https://www.microfocus.com/marketplace/appdelivery</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="pageViewId" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">pageViewId</stringProp>
                <stringProp name="Argument.value">08d224e6-f0d9-4af1-8fe4-78c8bb9ff1fa</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="v" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">v</stringProp>
                <stringProp name="Argument.value">1.1.22</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Sec-Fetch-Mode" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                <stringProp name="Header.value">no-cors</stringProp>
              </elementProp>
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">https://www.microfocus.com/</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Site" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                <stringProp name="Header.value">cross-site</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Priority" elementType="Header">
                <stringProp name="Header.name">Priority</stringProp>
                <stringProp name="Header.value">u=6, i</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:128.0) Gecko/20100101 Firefox/128.0</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">image/avif,image/webp,image/png,image/svg+xml,image/*;q=0.8,*/*;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Dest" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                <stringProp name="Header.value">image</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/submit/firefox-desktop/pageload/1/c0283345-8c6c-499a-b978-a9382c8b437e-88" enabled="true">
          <stringProp name="HTTPSampler.domain">incoming.telemetry.mozilla.org</stringProp>
          <stringProp name="HTTPSampler.port">443</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
          <stringProp name="HTTPSampler.path">/submit/firefox-desktop/pageload/1/c0283345-8c6c-499a-b978-a9382c8b437e</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&#x1f;�&#x8;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;��Y�n�F&#x12;�&#x17;�f���Eo&#x1;v�&#xd;v6���b�X&#x4;&#x2;-R&#x12;3&#x14;��b�&#x13;��SlY&#x1a;��M��&#x7;�&#x18;&amp;�}9Uu�T���9+&#xe;۬ؗ��ϨN&#x7f;�6�CT7q�l��F��b�&#x11;V��/&#x14;o��p~�1�&#x1;�&#xd;�ч(-&#x12;�P�7&#x18;�a�nC�4��&#x2;&#x6;6�*��e�t�&#x7f;;�&#x15;|_4u���,&#xe;�I�&#x13;���ǻ��N{��!��]�&lt;�$��6�&#x1b;~_���&#x8;S&amp;i�=�Փ�����e�t�Ud���F�_��󇨛�P�m���$nR�&#x16;�}���H��&#x1;&#x1e;$(+&#x0;�&lt;���,jT�y^�&#xd;b��&#x11;q�&#xe;־|���~�ܮ��&#x1f;Pv:�Us���z&lt;&apos;�&gt;z�����;��٬I�tW��&quot;	��&#x4;u�&#x7;,�{t��&#x1a;g�&#xd;D&#x7;�7`ئ� �g�ߞ&#xf;U���&gt;�M�&#x1d;��w˷Yg�&#xd;
�,�,�֫Ӹ�&#x1d;&#x11;&lt;�g���V�яW�頏[��[A*&#xb;�N�!R�&#xd;jJ�z&#x1f;�y���&#x11;�uZի0ꐏ&#xb;�}|H����&#x1e;=f�&#x11;ŰD&#x3;�{1�&#x3;7�|�	���&gt;V�I&#x6;&amp;oj�/+&#x14;�]t6U��o�&#x1a;��EmC�&#x1d;^�ϊ��?f&#x7f;�U�&#x8;��Oq&#x4;&#x7;�N&#x4;L�-&#x1;@���O&#x17;�@{�f_~�(@%&#xc;H-7��5�ך��&#x0;0X��&#x1b;�&#x8;\&#x1b;&#x5;y&#x6;��&#x18;�&#x1;�9�1��u�u{�f@��H�;rG`��|�=�X&#x16;+�	%&#x1c;&#x1b;xi_l�x���(�0��/&#x18;�@���&#x1f;&#x6;&#x2;Du����:��&#x7;��Q�cV$�c}Ym[�����6�JF.�&#x0;g&lt;���&#x16;8��nI��OK��迗��O�&#x1;q�Z�D���;&#x4;Dzր��U����[��w�ɰ��[iw�&#xb;��&#xe;�&#x17;.��&#x7f;�$��&#x3;f����&apos;�/&#x18;&#x0;�#&#x1d;J�+�&#x8;��&#x1e;�(b���&#x10;�ۼ�&#x7;�����dH0U��7N�?c���&#x3;�[l{&#xb;ED&#x1;�Zr����&#xe;&amp;��6�������ӏ&#x7f;�)&#x15;H���[&#xd;
�&#x2;��Vo�o����{�&#x14;5������96&#x379;C�[&#x6;�l�N&#xe;&lt;��I�]���&#x3;���&#x0;&#x17;e�rhz8&#x18;��&#x1e;X���Yp�&#x13;�i!�&#xf;&#x17;� ���9qb&#x10;Ap�mYe���&#x16;�&#xd;�6u1s�!�O,��97�o�&#x7;���wF3y�0h�(%��&#x10;D�oJ�d�L#��������m��	3g�&#x6;�;�@26	��6Al&#x5;e��e�k����E�e&#x1f;?&#x7f;���&#x1f;?�c�(�9�djj�&#xd;
&#x13;a��BX9&#x18;�I&#x6;�&#x6;�&#xd;�&#x1a;&#xe;�Tð&#x16;lqD��&amp;&#xc;1&#x1e;����B&#x1c;�;3����&#x4;���\�*f��D�HSE�&#x18;&#x6;���Kap&#x16;�.&#xc;�Ҍh�i�&#xd;y&#x17;@�]w��8��b,��&#x12;3	�&#xb;��@�bM��&#x4;�U�nwP&#x5;6/�z{x�.&#x15;^�e�y&#x0;&#x10;lxXH�dl�q4�&quot;&#x1;X�&#xc;A&#x2;3&#x18;/�F��k&#xd;
�r&#x1;�&#x4;&#x13;pq�B�&#x8;���&#xb;�[�&#x7;��%x�&#xc;yh8�zh�r����&#x1e;&#x1b;�����# �T���@�|�z�&#xd;�����[&#xd;B��2�&#xc;�D&#x8;3����&#xe;�0&amp;&#x1c;&#xb;�$�14�),�B���F&lt;l]}A�U�r&amp;�C4Di���	5&#x19;D&#xe;�&#x13;0�0&#x3;�4�G&#x8;P��r��&#x18;��K��&#x13;5[�POƻT&apos;�&#x8;&quot;��E`�&#x1f;��,�~������&#x10;&#xc;�s�\&quot;&#x7;E__�&#x18;j\��p&#x12;&#xe;�\Ox�ƄP%��?&#x17;[b�n�+�&#x16;�.*&#x4;ĺ�k*.&#x10;��*pQ]��&#x1b;�&apos;�&#x4;Ǖ�\#0��&#x2;Â��ܦF&#x17;ml�&#x18;3	���&#x15;��&#x4;}=�m���sS&#x16;Ֆ��#�Q�c&#x13;v�A�&#x15;�W&#x1;&#x0;�ct���x?��Ф𔐣Lk�Y�&#xf;C?�K��&#x18;�����څ.�(M�&#x11;f��&#xc;���DO&#x13;M&#x10;n*��]�3&#x17;�Ժ��&#x12;�d&#x16;&#x13;�J�@|�Q�&#x12;��R��&#x1b;	rJ&#x18;&#x13;���8�u�@�&#x13;�&apos;��ݰq&#x7f;���&#x6;%m��W&#xd;
&#x18;{D��LH�Bms�\����&gt;&#x1a;Pt&#x12;&gt;é�	o`s(�|]&#x6;A��տ�,c̄&#x6;&#x1e;y7�&#x6;��&amp;z��&#x7;&quot;�j+�S:�Q\�F�,&#x16;Ɯ( �Q&#x1f;	ch ӥ��s&#x12;ӎ�R&amp;i�&#x19;܆-&amp;��N��&#x15;V�&#x7;-&#x4;&#x15;���&#x17;�KH�b%��X#�@&#x1a;2&gt;7�sŘOuS��&#x1e;��`�&#x7f;Y?\&#xb;&#xd;
�&lt;��&#x4;�=�h�&#x4;_�9�`G�pn%�lV&#x1d;�7|2&#xd;��f���&#x1;�nD��x^&#x11;���&#xd;:�J�&amp;ވ�t����g�&#x5cc;4�&#x8;��K8�M�%&#x18;�t����&#x1e;l�{D�&#x6;&#x1b;��dʒps��[��bV\��^����u�&#x17;&#x7f;�߅(&#x15;h&quot;����F��Kb&#xd;
ı1��o��&#x8;3D�9-_O��8����^:&#x8;=5&#xd;
��AGr�&#x17;�&#x15;�AHk�&#xd;g��p�P1Ӊ&#x1a;�,N&#xb;&#x2;��ҍ M|-e&amp;�&#x7;&#x1c;(3������&#x1b;�:���c��&#x15;:&#x19;�\(�&#x7f;&#xe;�&#x4;^���&#x3a2;kd�oؠ{����GA���o�皧O@�&#x6;l� �ؾ��kX�nJ�&amp;ƿ=�h�&#x4;Y	�t/&#xd;��sT��(̰&apos;HE}̡��Q&#x8;G&#x3;j&#x7;zz��8C&#x13;&lt;?���&#x17;ϚW�3)&#x0;&#x0;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="date" elementType="Header">
                <stringProp name="Header.name">date</stringProp>
                <stringProp name="Header.value">Sat, 20 Jul 2024 15:24:00 GMT</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Mode" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                <stringProp name="Header.value">no-cors</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Site" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                <stringProp name="Header.value">none</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="content-encoding" elementType="Header">
                <stringProp name="Header.name">content-encoding</stringProp>
                <stringProp name="Header.value">gzip</stringProp>
              </elementProp>
              <elementProp name="Priority" elementType="Header">
                <stringProp name="Header.name">Priority</stringProp>
                <stringProp name="Header.value">u=4</stringProp>
              </elementProp>
              <elementProp name="Pragma" elementType="Header">
                <stringProp name="Header.name">Pragma</stringProp>
                <stringProp name="Header.value">no-cache</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-telemetry-agent" elementType="Header">
                <stringProp name="Header.name">x-telemetry-agent</stringProp>
                <stringProp name="Header.value">Glean/60.1.1 (Rust on Windows)</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json; charset=utf-8</stringProp>
              </elementProp>
              <elementProp name="Cache-Control" elementType="Header">
                <stringProp name="Header.name">Cache-Control</stringProp>
                <stringProp name="Header.value">no-cache</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:128.0) Gecko/20100101 Firefox/128.0</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Dest" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                <stringProp name="Header.value">empty</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/canonical.html-90" enabled="true">
          <stringProp name="HTTPSampler.domain">detectportal.firefox.com</stringProp>
          <stringProp name="HTTPSampler.port">0</stringProp>
          <stringProp name="HTTPSampler.protocol">http</stringProp>
          <stringProp name="HTTPSampler.path">/canonical.html</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Cache-Control" elementType="Header">
                <stringProp name="Header.name">Cache-Control</stringProp>
                <stringProp name="Header.value">no-cache</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate</stringProp>
              </elementProp>
              <elementProp name="Pragma" elementType="Header">
                <stringProp name="Header.name">Pragma</stringProp>
                <stringProp name="Header.value">no-cache</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:128.0) Gecko/20100101 Firefox/128.0</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/success.txt-92" enabled="true">
          <stringProp name="HTTPSampler.domain">detectportal.firefox.com</stringProp>
          <stringProp name="HTTPSampler.port">0</stringProp>
          <stringProp name="HTTPSampler.protocol">http</stringProp>
          <stringProp name="HTTPSampler.path">/success.txt</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments">
              <elementProp name="ipv6" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">ipv6</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata"></stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Priority" elementType="Header">
                <stringProp name="Header.name">Priority</stringProp>
                <stringProp name="Header.value">u=4</stringProp>
              </elementProp>
              <elementProp name="Cache-Control" elementType="Header">
                <stringProp name="Header.name">Cache-Control</stringProp>
                <stringProp name="Header.value">no-cache</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate</stringProp>
              </elementProp>
              <elementProp name="Pragma" elementType="Header">
                <stringProp name="Header.name">Pragma</stringProp>
                <stringProp name="Header.value">no-cache</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:128.0) Gecko/20100101 Firefox/128.0</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/success.txt-91" enabled="true">
          <stringProp name="HTTPSampler.domain">detectportal.firefox.com</stringProp>
          <stringProp name="HTTPSampler.port">0</stringProp>
          <stringProp name="HTTPSampler.protocol">http</stringProp>
          <stringProp name="HTTPSampler.path">/success.txt</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments">
              <elementProp name="ipv4" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">ipv4</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata"></stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Priority" elementType="Header">
                <stringProp name="Header.name">Priority</stringProp>
                <stringProp name="Header.value">u=4</stringProp>
              </elementProp>
              <elementProp name="Cache-Control" elementType="Header">
                <stringProp name="Header.name">Cache-Control</stringProp>
                <stringProp name="Header.value">no-cache</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate</stringProp>
              </elementProp>
              <elementProp name="Pragma" elementType="Header">
                <stringProp name="Header.name">Pragma</stringProp>
                <stringProp name="Header.value">no-cache</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:128.0) Gecko/20100101 Firefox/128.0</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/v1/beacon/img.gif-89" enabled="true">
          <stringProp name="HTTPSampler.domain">b.6sc.co</stringProp>
          <stringProp name="HTTPSampler.port">443</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.path">/v1/beacon/img.gif</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments">
              <elementProp name="token" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">token</stringProp>
                <stringProp name="Argument.value">5f90029b56db57cd17027efd926646ef</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="svisitor" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">svisitor</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="visitor" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">visitor</stringProp>
                <stringProp name="Argument.value">e43783fd-0d0b-4b08-8499-84fc86871881</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="session" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">session</stringProp>
                <stringProp name="Argument.value">cfa3825d-7349-4a7a-87a4-13fccbbe3404</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="event" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">event</stringProp>
                <stringProp name="Argument.value">click</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="q" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">q</stringProp>
                <stringProp name="Argument.value">{&quot;event_value&quot;:&quot;/marketplace/appdelivery/category/oes&quot;,&quot;event_id&quot;:&quot;&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="isIframe" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">isIframe</stringProp>
                <stringProp name="Argument.value">false</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="m" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">m</stringProp>
                <stringProp name="Argument.value">{&quot;description&quot;:&quot;Accelerate the planning, testing, delivery and support of optimized applications.&quot;,&quot;keywords&quot;:&quot;&quot;,&quot;title&quot;:&quot;Application Delivery Marketplace | OpenText&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="cb" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">cb</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="r" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">r</stringProp>
                <stringProp name="Argument.value">https://www.microfocus.com/marketplace/appdelivery</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="thirdParty" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">thirdParty</stringProp>
                <stringProp name="Argument.value">{}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="v2" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">v2</stringProp>
                <stringProp name="Argument.value">1</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="pageURL" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">pageURL</stringProp>
                <stringProp name="Argument.value">https://www.microfocus.com/marketplace/appdelivery</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="pageViewId" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">pageViewId</stringProp>
                <stringProp name="Argument.value">08d224e6-f0d9-4af1-8fe4-78c8bb9ff1fa</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="v" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">v</stringProp>
                <stringProp name="Argument.value">1.1.22</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Sec-Fetch-Mode" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                <stringProp name="Header.value">no-cors</stringProp>
              </elementProp>
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">https://www.microfocus.com/</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Site" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                <stringProp name="Header.value">cross-site</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Priority" elementType="Header">
                <stringProp name="Header.name">Priority</stringProp>
                <stringProp name="Header.value">u=0, i</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:128.0) Gecko/20100101 Firefox/128.0</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">image/avif,image/webp,image/png,image/svg+xml,image/*;q=0.8,*/*;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Dest" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                <stringProp name="Header.value">image</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/canonical.html-96" enabled="true">
          <stringProp name="HTTPSampler.domain">detectportal.firefox.com</stringProp>
          <stringProp name="HTTPSampler.port">0</stringProp>
          <stringProp name="HTTPSampler.protocol">http</stringProp>
          <stringProp name="HTTPSampler.path">/canonical.html</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Cache-Control" elementType="Header">
                <stringProp name="Header.name">Cache-Control</stringProp>
                <stringProp name="Header.value">no-cache</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate</stringProp>
              </elementProp>
              <elementProp name="Pragma" elementType="Header">
                <stringProp name="Header.name">Pragma</stringProp>
                <stringProp name="Header.value">no-cache</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:128.0) Gecko/20100101 Firefox/128.0</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/success.txt-99" enabled="true">
          <stringProp name="HTTPSampler.domain">detectportal.firefox.com</stringProp>
          <stringProp name="HTTPSampler.port">0</stringProp>
          <stringProp name="HTTPSampler.protocol">http</stringProp>
          <stringProp name="HTTPSampler.path">/success.txt</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments">
              <elementProp name="ipv6" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">ipv6</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata"></stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Priority" elementType="Header">
                <stringProp name="Header.name">Priority</stringProp>
                <stringProp name="Header.value">u=4</stringProp>
              </elementProp>
              <elementProp name="Cache-Control" elementType="Header">
                <stringProp name="Header.name">Cache-Control</stringProp>
                <stringProp name="Header.value">no-cache</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate</stringProp>
              </elementProp>
              <elementProp name="Pragma" elementType="Header">
                <stringProp name="Header.name">Pragma</stringProp>
                <stringProp name="Header.value">no-cache</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:128.0) Gecko/20100101 Firefox/128.0</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/success.txt-98" enabled="true">
          <stringProp name="HTTPSampler.domain">detectportal.firefox.com</stringProp>
          <stringProp name="HTTPSampler.port">0</stringProp>
          <stringProp name="HTTPSampler.protocol">http</stringProp>
          <stringProp name="HTTPSampler.path">/success.txt</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments">
              <elementProp name="ipv4" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">ipv4</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata"></stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Priority" elementType="Header">
                <stringProp name="Header.name">Priority</stringProp>
                <stringProp name="Header.value">u=4</stringProp>
              </elementProp>
              <elementProp name="Cache-Control" elementType="Header">
                <stringProp name="Header.name">Cache-Control</stringProp>
                <stringProp name="Header.value">no-cache</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate</stringProp>
              </elementProp>
              <elementProp name="Pragma" elementType="Header">
                <stringProp name="Header.name">Pragma</stringProp>
                <stringProp name="Header.value">no-cache</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:128.0) Gecko/20100101 Firefox/128.0</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/marketplace/appdelivery/category/oes-94" enabled="true">
          <stringProp name="HTTPSampler.domain">www.microfocus.com</stringProp>
          <stringProp name="HTTPSampler.port">443</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.path">/marketplace/appdelivery/category/oes</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Sec-Fetch-Mode" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                <stringProp name="Header.value">navigate</stringProp>
              </elementProp>
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">https://www.microfocus.com/marketplace/appdelivery</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Site" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                <stringProp name="Header.value">same-origin</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-User" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-User</stringProp>
                <stringProp name="Header.value">?1</stringProp>
              </elementProp>
              <elementProp name="Priority" elementType="Header">
                <stringProp name="Header.name">Priority</stringProp>
                <stringProp name="Header.value">u=0, i</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/png,image/svg+xml,*/*;q=0.8</stringProp>
              </elementProp>
              <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:128.0) Gecko/20100101 Firefox/128.0</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Dest" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                <stringProp name="Header.value">document</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/v1/beacon/img.gif-97" enabled="true">
          <stringProp name="HTTPSampler.domain">b.6sc.co</stringProp>
          <stringProp name="HTTPSampler.port">443</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.path">/v1/beacon/img.gif</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments">
              <elementProp name="token" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">token</stringProp>
                <stringProp name="Argument.value">5f90029b56db57cd17027efd926646ef</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="svisitor" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">svisitor</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="visitor" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">visitor</stringProp>
                <stringProp name="Argument.value">e43783fd-0d0b-4b08-8499-84fc86871881</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="session" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">session</stringProp>
                <stringProp name="Argument.value">cfa3825d-7349-4a7a-87a4-13fccbbe3404</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="event" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">event</stringProp>
                <stringProp name="Argument.value">active_time_track</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="q" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">q</stringProp>
                <stringProp name="Argument.value">{&quot;currentTime&quot;:&quot;Sat, 20 Jul 2024 15:24:02 GMT&quot;,&quot;lastTrackTime&quot;:&quot;Sat, 20 Jul 2024 15:24:01 GMT&quot;,&quot;timeSpent&quot;:&quot;1009&quot;,&quot;totalTimeSpent&quot;:&quot;7088&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="isIframe" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">isIframe</stringProp>
                <stringProp name="Argument.value">false</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="m" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">m</stringProp>
                <stringProp name="Argument.value">{&quot;description&quot;:&quot;Accelerate the planning, testing, delivery and support of optimized applications.&quot;,&quot;keywords&quot;:&quot;&quot;,&quot;title&quot;:&quot;Application Delivery Marketplace | OpenText&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="cb" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">cb</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="r" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">r</stringProp>
                <stringProp name="Argument.value">https://www.microfocus.com/marketplace/appdelivery</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="thirdParty" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">thirdParty</stringProp>
                <stringProp name="Argument.value">{}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="v2" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">v2</stringProp>
                <stringProp name="Argument.value">1</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="pageURL" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">pageURL</stringProp>
                <stringProp name="Argument.value">https://www.microfocus.com/marketplace/appdelivery</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="pageViewId" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">pageViewId</stringProp>
                <stringProp name="Argument.value">08d224e6-f0d9-4af1-8fe4-78c8bb9ff1fa</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="v" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">v</stringProp>
                <stringProp name="Argument.value">1.1.22</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Sec-Fetch-Mode" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                <stringProp name="Header.value">no-cors</stringProp>
              </elementProp>
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">https://www.microfocus.com/</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Site" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                <stringProp name="Header.value">cross-site</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Priority" elementType="Header">
                <stringProp name="Header.name">Priority</stringProp>
                <stringProp name="Header.value">u=6, i</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:128.0) Gecko/20100101 Firefox/128.0</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">image/avif,image/webp,image/png,image/svg+xml,image/*;q=0.8,*/*;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Dest" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                <stringProp name="Header.value">image</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/g/collect?v=2&amp;tid=G-SWJ97E3ZRQ&amp;gtm=45je47h0v885797725za200zb71343913&amp;_p=1721489034037&amp;gcs=G111&amp;gcd=13n3n3n3n5&amp;npa=0&amp;dma=0&amp;tag_exp=0&amp;gdid=dYWJhMj&amp;cid=1264267099.1721486760&amp;ul=en-us&amp;sr=1536x864&amp;frm=0&amp;pscdl=noapi&amp;_s=2&amp;sid=1721486760&amp;sct=1&amp;seg=1&amp;dl=https%3A%2F%2Fwww.microfocus.com%2Fmarketplace%2Fappdelivery&amp;dr=https%3A%2F%2Fwww.microfocus.com%2Fmarketplace%2Fappdelivery&amp;dt=Application%20Delivery%20Marketplace%20%7C%20OpenText&amp;en=user_engagement&amp;_et=2430&amp;tfd=14992&amp;_z=fetch-101" enabled="true">
          <stringProp name="HTTPSampler.domain">analytics.google.com</stringProp>
          <stringProp name="HTTPSampler.port">443</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.path">/g/collect?v=2&amp;tid=G-SWJ97E3ZRQ&amp;gtm=45je47h0v885797725za200zb71343913&amp;_p=1721489034037&amp;gcs=G111&amp;gcd=13n3n3n3n5&amp;npa=0&amp;dma=0&amp;tag_exp=0&amp;gdid=dYWJhMj&amp;cid=1264267099.1721486760&amp;ul=en-us&amp;sr=1536x864&amp;frm=0&amp;pscdl=noapi&amp;_s=2&amp;sid=1721486760&amp;sct=1&amp;seg=1&amp;dl=https%3A%2F%2Fwww.microfocus.com%2Fmarketplace%2Fappdelivery&amp;dr=https%3A%2F%2Fwww.microfocus.com%2Fmarketplace%2Fappdelivery&amp;dt=Application%20Delivery%20Marketplace%20%7C%20OpenText&amp;en=user_engagement&amp;_et=2430&amp;tfd=14992&amp;_z=fetch</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Sec-Fetch-Mode" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                <stringProp name="Header.value">no-cors</stringProp>
              </elementProp>
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">https://www.microfocus.com/</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Site" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                <stringProp name="Header.value">cross-site</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Origin" elementType="Header">
                <stringProp name="Header.name">Origin</stringProp>
                <stringProp name="Header.value">https://www.microfocus.com</stringProp>
              </elementProp>
              <elementProp name="Priority" elementType="Header">
                <stringProp name="Header.name">Priority</stringProp>
                <stringProp name="Header.value">u=4</stringProp>
              </elementProp>
              <elementProp name="Pragma" elementType="Header">
                <stringProp name="Header.name">Pragma</stringProp>
                <stringProp name="Header.value">no-cache</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="Cache-Control" elementType="Header">
                <stringProp name="Header.name">Cache-Control</stringProp>
                <stringProp name="Header.value">no-cache</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:128.0) Gecko/20100101 Firefox/128.0</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Dest" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                <stringProp name="Header.value">empty</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/g/collect?v=2&amp;tid=G-SWJ97E3ZRQ&amp;gtm=45je47h0v885797725z871343913za200zb71343913&amp;_p=1721489034037&amp;gcs=G111&amp;gcd=13n3n3n3n5&amp;npa=0&amp;dma=0&amp;tag_exp=0&amp;gdid=dYWJhMj&amp;cid=1264267099.1721486760&amp;ul=en-us&amp;sr=1536x864&amp;frm=0&amp;pscdl=noapi&amp;_s=1&amp;sid=1721486760&amp;sct=1&amp;seg=1&amp;dl=https%3A%2F%2Fwww.microfocus.com%2Fmarketplace%2Fappdelivery&amp;dr=https%3A%2F%2Fwww.microfocus.com%2Fmarketplace%2Fappdelivery&amp;dt=Application%20Delivery%20Marketplace%20%7C%20OpenText&amp;en=page_view&amp;tfd=14992&amp;_z=fetch-100" enabled="true">
          <stringProp name="HTTPSampler.domain">analytics.google.com</stringProp>
          <stringProp name="HTTPSampler.port">443</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.path">/g/collect?v=2&amp;tid=G-SWJ97E3ZRQ&amp;gtm=45je47h0v885797725z871343913za200zb71343913&amp;_p=1721489034037&amp;gcs=G111&amp;gcd=13n3n3n3n5&amp;npa=0&amp;dma=0&amp;tag_exp=0&amp;gdid=dYWJhMj&amp;cid=1264267099.1721486760&amp;ul=en-us&amp;sr=1536x864&amp;frm=0&amp;pscdl=noapi&amp;_s=1&amp;sid=1721486760&amp;sct=1&amp;seg=1&amp;dl=https%3A%2F%2Fwww.microfocus.com%2Fmarketplace%2Fappdelivery&amp;dr=https%3A%2F%2Fwww.microfocus.com%2Fmarketplace%2Fappdelivery&amp;dt=Application%20Delivery%20Marketplace%20%7C%20OpenText&amp;en=page_view&amp;tfd=14992&amp;_z=fetch</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Sec-Fetch-Mode" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                <stringProp name="Header.value">no-cors</stringProp>
              </elementProp>
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">https://www.microfocus.com/</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Site" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                <stringProp name="Header.value">cross-site</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Origin" elementType="Header">
                <stringProp name="Header.name">Origin</stringProp>
                <stringProp name="Header.value">https://www.microfocus.com</stringProp>
              </elementProp>
              <elementProp name="Priority" elementType="Header">
                <stringProp name="Header.name">Priority</stringProp>
                <stringProp name="Header.value">u=4</stringProp>
              </elementProp>
              <elementProp name="Pragma" elementType="Header">
                <stringProp name="Header.name">Pragma</stringProp>
                <stringProp name="Header.value">no-cache</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="Cache-Control" elementType="Header">
                <stringProp name="Header.name">Cache-Control</stringProp>
                <stringProp name="Header.value">no-cache</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:128.0) Gecko/20100101 Firefox/128.0</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Dest" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                <stringProp name="Header.value">empty</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/collect-95" enabled="true">
          <stringProp name="HTTPSampler.domain">y.clarity.ms</stringProp>
          <stringProp name="HTTPSampler.port">443</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">/collect</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;e&quot;:[&quot;0.7.32&quot;,4,2834,3087,&quot;iu69ce0l9t&quot;,&quot;dprpjk&quot;,&quot;lkifca&quot;,2,0,0],&quot;a&quot;:[[3000,2,2,2,204],[1145,12,1101,469,394],[1161,12,854,463,383],[1161,12,854,458,372],[1177,12,854,450,345],[1177,12,1099,447,327],[1192,12,1099,446,317],[1208,12,1099,444,300],[1208,12,854,444,290],[1222,12,1097,444,276],[1222,12,1097,444,267],[1239,12,1097,444,256],[1239,12,1097,444,247],[1255,12,854,444,231],[1270,12,854,444,216],[1285,12,854,444,214],[1301,12,854,444,210],[1333,12,854,444,210],[1395,12,854,444,209],[1427,12,854,445,208],[1442,12,524,456,202],[1442,12,524,468,194],[1458,12,524,483,189],[1458,12,524,501,180],[1473,12,524,515,176],[1473,12,524,527,172],[1489,12,524,538,170],[1489,12,524,549,170],[1505,12,524,567,170],[1520,12,524,582,174],[1536,12,524,601,179],[1552,12,524,617,185],[1567,12,524,634,190],[1583,12,524,651,195],[1597,12,524,663,202],[1613,12,524,669,205],[1613,12,854,672,208],[1630,12,854,677,214],[1645,12,854,680,220],[1660,12,854,682,225],[1677,12,854,684,228],[1692,12,854,686,232],[1708,12,854,690,238],[1723,12,854,692,240],[1723,12,1097,696,244],[1739,12,1097,701,248],[1755,12,1097,712,259],[1769,12,1097,726,273],[1769,12,1097,735,279],[1786,12,854,743,286],[1802,12,854,758,295],[1802,12,854,762,299],[1817,12,1099,767,302],[1833,12,1099,776,307],[1848,12,1099,786,310],[1864,12,1099,794,311],[1880,12,1099,799,312],[1895,12,1099,801,312],[2208,12,1099,817,309],[2223,12,1099,842,302],[2223,12,854,870,296],[2239,12,854,898,290],[2255,12,1097,937,282],[2269,12,1097,952,281],[2285,12,1097,970,278],[2302,12,1097,987,274],[2317,12,1097,991,274],[2333,12,1097,993,274],[2348,12,1097,994,274],[2380,12,1097,994,273],[2394,12,1097,994,271],[2410,12,1097,992,265],[2427,12,1097,976,254],[2442,12,1097,958,246],[2458,12,854,892,226],[2473,12,854,851,214],[2473,12,524,814,204],[2473,12,524,778,194],[2488,12,524,747,182],[2488,12,524,719,170],[2504,12,524,694,158],[2504,12,477,673,148],[2520,12,477,653,139],[2536,12,184,637,132],[2536,12,474,626,127],[2552,12,474,618,123],[2566,12,474,605,116],[2582,12,474,590,107],[2598,12,474,588,106],[2630,12,474,587,106],[2879,12,474,557,115],[2879,12,474,516,130],[2895,12,469,481,141],[2895,12,469,452,146],[2911,12,469,436,148],[2911,12,469,424,150],[2926,12,469,406,150],[2941,12,469,397,150],[2958,12,469,395,150],[2973,12,469,394,150],[3067,12,469,394,150],[3083,12,469,394,149],[3098,12,469,394,148],[3130,12,469,394,147],[3145,12,469,394,146],[3161,12,469,396,146],[3177,12,469,405,143],[3192,12,469,421,138],[3208,12,469,446,131],[3208,12,469,483,120],[3208,12,474,521,111],[3223,12,474,564,102],[3223,12,243,604,90],[3239,12,243,637,80],[3255,12,406,684,73],[3270,12,406,702,70],[3286,12,406,704,70],[3302,12,406,705,70],[3317,12,406,706,70],[3411,12,406,705,70],[3427,12,406,690,65],[3442,12,1294,682,62],[3458,12,1534,674,59],[3473,12,1534,670,58],[4348,2,3,2,204],[4391,29,30,64,64,65,83,83,6494,12385,12385,12388,0,323349,&quot;navigate&quot;,&quot;http/1.1&quot;,321689,321689],[4630,12,1294,676,62],[4630,12,1296,686,70],[4645,12,1296,696,78],[4645,12,1298,706,83],[4661,12,1298,714,92],[4661,12,1298,722,98],[4677,12,2048,730,105],[4677,12,2048,737,111],[4692,12,2958,741,117],[4692,12,5042,746,122],[4708,12,5042,750,126],[4723,12,5042,750,127],[4739,12,5042,751,128],[4755,12,5042,751,129],[4786,12,5042,752,129],[5614,13,5042,752,129],[5739,14,5042,752,129],[5739,9,5042,752,129,4562,20479,0,1,0,&quot;Open Enterprise Server&quot;,&quot;https://www.microfocus.com/marketplace/appdelivery/category/oes&quot;,&quot;287zs6cfa.gc8q3uef&quot;,1],[2834,4,1,1536,2380,1536,731,0,0,710,392,2818,0],[5921,1,4,[&quot;rsms.me&quot;,&quot;www.microfocus.com&quot;,&quot;www.clarity.ms&quot;,&quot;d3075pyijv0bbs.cloudfront.net&quot;,&quot;s.go-mpulse.net&quot;,&quot;www.googletagmanager.com&quot;,&quot;login.microfocus.com&quot;,&quot;cdn.cookielaw.org&quot;,&quot;c.go-mpulse.net&quot;,&quot;j.6sc.co&quot;,&quot;b.6sc.co&quot;,&quot;c.6sc.co&quot;,&quot;ipv6.6sc.co&quot;,&quot;y.clarity.ms&quot;,&quot;www.google-analytics.com&quot;,&quot;epsilon.6sense.com&quot;]],[5921,0,2,427,3,21,4,35,5,14,8,6718,10,15,25,160,28,2403],[5921,36,6,[2909,0,3175,0,3470,0,3740,24,4316,98,4430,11,5484,0]]],&quot;p&quot;:[[2909,6,294,184,293,&quot;LI&quot;,&quot;class=cyberres  primary-list &quot;,&quot;data-uk-dropdown= {mode:&apos;hover&apos;, remaintime: 500, pos:&apos;bottom-center&apos;} &quot;,&quot;aria-haspopup=true&quot;,&quot;aria-expanded=false&quot;,471,294,470,&quot;DIV&quot;,&quot;class=uk-dropdown cyberres&quot;,&quot;aria-hidden=true&quot;],[3175,6,296,184,295,&quot;LI&quot;,&quot;class=itom primary-list&quot;,&quot;data-uk-dropdown=&quot;,&quot;aria-haspopup=true&quot;,&quot;aria-expanded=false&quot;,5522,&quot;DIV&quot;,471,294,470,[11],&quot;class=uk-dropdown cyberres uk-dropdown-bottom&quot;,&quot;aria-hidden=false&quot;,&quot;style=top: 60px; left: -159.5px;&quot;,&quot;tabindex=&quot;,294,184,293,[5],&quot;class=cyberres primary-list uk-open&quot;,&quot;data-uk-dropdown= {mode:&apos;hover&apos;, remaintime: 500, pos:&apos;bottom-center&apos;} &quot;,[8],&quot;aria-expanded=true&quot;],[3470,6,974,683,973,&quot;DIV&quot;,&quot;data-uk-dropdown={mode:&apos;hover&apos;, remaintime: 200}&quot;,&quot;aria-haspopup=true&quot;,&quot;aria-expanded=false&quot;,1296,974,1295,[5],&quot;class=uk-dropdown categories-caret uk-visible-large&quot;,&quot;aria-hidden=true&quot;,1298,974,1297,[5],&quot;class=uk-dropdown categories  uk-visible-large&quot;,[14]],[3740,6,294,184,293,&quot;LI&quot;,&quot;class=cyberres primary-list&quot;,&quot;data-uk-dropdown= {mode:&apos;hover&apos;, remaintime: 500, pos:&apos;bottom-center&apos;} &quot;,&quot;aria-haspopup=true&quot;,&quot;aria-expanded=false&quot;,471,294,470,&quot;DIV&quot;,&quot;class=uk-dropdown cyberres uk-dropdown-bottom&quot;,&quot;aria-hidden=true&quot;,&quot;style=top: 60px; left: -159.5px;&quot;,&quot;tabindex=&quot;],[3764,6,1298,974,1297,&quot;DIV&quot;,&quot;class=uk-dropdown categories uk-visible-large uk-dropdown-bottom&quot;,&quot;aria-hidden=false&quot;,&quot;style=top: 24px; left: 0px;&quot;,&quot;tabindex=&quot;,1296,974,1295,[5],&quot;class=uk-dropdown categories-caret uk-visible-large uk-dropdown-bottom&quot;,[7,8,9],974,683,973,[5],&quot;data-uk-dropdown={mode:&apos;hover&apos;, remaintime: 200}&quot;,&quot;aria-haspopup=true&quot;,&quot;aria-expanded=true&quot;,&quot;class=uk-open&quot;],[4316,6,2136,1858,2135,&quot;IFRAME&quot;,&quot;src=https://login.microfocus.com/nidp/app&quot;,&quot;frameborder=0&quot;,&quot;height=0&quot;,&quot;width=0&quot;],[4331,6,5523,3,40,&quot;LINK&quot;,&quot;id=dnsprefetchlink&quot;,&quot;rel=dns-prefetch&quot;,&quot;href=//gesxevrrfsbxgzu322bq-f-a0d1b2b31-clientnsv4-s.akamaihd.net&quot;],[4411,6,1928,1683,1927,&quot;H3&quot;,&quot;class=cat-name&quot;,&quot;style=&quot;,1935,1686,1934,[5,6,7],1942,1689,1941,[5,6,7],1949,1692,1948,[5,6,7],1956,1695,1955,[5,6,7],1963,1698,1962,[5,6,7],1970,1701,1969,[5,6,7],1977,1704,1976,[5,6,7],1984,1707,1983,[5,6,7],1991,1710,1990,[5,6,7]],[4414,6,581,344,580,&quot;DIV&quot;,&quot;class=img-blk&quot;,&quot;style=&quot;,590,346,589,[5,6,7],599,348,598,[5,6,7]],[4430,6,1928,1683,1927,&quot;H3&quot;,&quot;class=cat-name&quot;,&quot;style=min-height: 52px;&quot;,1935,1686,1934,[5,6,7],1942,1689,1941,[5,6,7],1949,1692,1948,[5,6,7],1956,1695,1955,[5,6,7],1963,1698,1962,[5,6],&quot;style=min-height: 104px;&quot;,1970,1701,1969,[5,6,28],1977,1704,1976,[5,6,28],1984,1707,1983,[5,6,28],1991,1710,1990,[5,6,28]],[4437,6,581,344,580,&quot;DIV&quot;,&quot;class=img-blk&quot;,&quot;style=min-height: 0px;&quot;,590,346,589,[5,6,7],599,348,598,[5,6,7]],[5484,6,313,191,312,&quot;LI&quot;,&quot;data-slideshow-slide=img&quot;,&quot;aria-hidden=false&quot;,&quot;class=uk-active uk-slideshow-fade-out&quot;,&quot;style=height: 350px; animation-duration: 500ms;&quot;,315,191,314,[5,6],&quot;aria-hidden=true&quot;,&quot;style=height: 350px; animation-duration: 500ms; opacity: 1;&quot;,320,193,319,[5],&quot;data-uk-slideshow-item=0&quot;,&quot;class=&quot;,322,193,321,[5],&quot;data-uk-slideshow-item=1&quot;,&quot;class=uk-active&quot;]]}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Sec-Fetch-Mode" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                <stringProp name="Header.value">cors</stringProp>
              </elementProp>
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">https://www.microfocus.com/</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Site" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                <stringProp name="Header.value">cross-site</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Origin" elementType="Header">
                <stringProp name="Header.name">Origin</stringProp>
                <stringProp name="Header.value">https://www.microfocus.com</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">text/plain;charset=UTF-8</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:128.0) Gecko/20100101 Firefox/128.0</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Dest" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                <stringProp name="Header.value">empty</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/inter/font-files/Inter-SemiBold.woff-108" enabled="true">
          <stringProp name="HTTPSampler.domain">rsms.me</stringProp>
          <stringProp name="HTTPSampler.port">443</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
          <stringProp name="HTTPSampler.path">/inter/font-files/Inter-SemiBold.woff</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments">
              <elementProp name="v" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">v</stringProp>
                <stringProp name="Argument.value">3.19</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Sec-Fetch-Mode" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                <stringProp name="Header.value">cors</stringProp>
              </elementProp>
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">https://www.microfocus.com/</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Site" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                <stringProp name="Header.value">cross-site</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Origin" elementType="Header">
                <stringProp name="Header.name">Origin</stringProp>
                <stringProp name="Header.value">https://www.microfocus.com</stringProp>
              </elementProp>
              <elementProp name="Priority" elementType="Header">
                <stringProp name="Header.name">Priority</stringProp>
                <stringProp name="Header.value">u=2</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">application/font-woff2;q=1.0,application/font-woff;q=0.9,*/*;q=0.8</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:128.0) Gecko/20100101 Firefox/128.0</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Dest" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                <stringProp name="Header.value">font</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/inter/font-files/Inter-Light.woff-105" enabled="true">
          <stringProp name="HTTPSampler.domain">rsms.me</stringProp>
          <stringProp name="HTTPSampler.port">443</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
          <stringProp name="HTTPSampler.path">/inter/font-files/Inter-Light.woff</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments">
              <elementProp name="v" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">v</stringProp>
                <stringProp name="Argument.value">3.19</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Sec-Fetch-Mode" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                <stringProp name="Header.value">cors</stringProp>
              </elementProp>
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">https://www.microfocus.com/</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Site" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                <stringProp name="Header.value">cross-site</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Origin" elementType="Header">
                <stringProp name="Header.name">Origin</stringProp>
                <stringProp name="Header.value">https://www.microfocus.com</stringProp>
              </elementProp>
              <elementProp name="Priority" elementType="Header">
                <stringProp name="Header.name">Priority</stringProp>
                <stringProp name="Header.value">u=2</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">application/font-woff2;q=1.0,application/font-woff;q=0.9,*/*;q=0.8</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:128.0) Gecko/20100101 Firefox/128.0</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Dest" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                <stringProp name="Header.value">font</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/inter/font-files/Inter-Bold.woff-106" enabled="true">
          <stringProp name="HTTPSampler.domain">rsms.me</stringProp>
          <stringProp name="HTTPSampler.port">443</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
          <stringProp name="HTTPSampler.path">/inter/font-files/Inter-Bold.woff</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments">
              <elementProp name="v" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">v</stringProp>
                <stringProp name="Argument.value">3.19</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Sec-Fetch-Mode" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                <stringProp name="Header.value">cors</stringProp>
              </elementProp>
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">https://www.microfocus.com/</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Site" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                <stringProp name="Header.value">cross-site</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Origin" elementType="Header">
                <stringProp name="Header.name">Origin</stringProp>
                <stringProp name="Header.value">https://www.microfocus.com</stringProp>
              </elementProp>
              <elementProp name="Priority" elementType="Header">
                <stringProp name="Header.name">Priority</stringProp>
                <stringProp name="Header.value">u=2</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">application/font-woff2;q=1.0,application/font-woff;q=0.9,*/*;q=0.8</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:128.0) Gecko/20100101 Firefox/128.0</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Dest" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                <stringProp name="Header.value">font</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/inter/font-files/Inter-ExtraLightItalic.woff-104" enabled="true">
          <stringProp name="HTTPSampler.domain">rsms.me</stringProp>
          <stringProp name="HTTPSampler.port">443</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
          <stringProp name="HTTPSampler.path">/inter/font-files/Inter-ExtraLightItalic.woff</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments">
              <elementProp name="v" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">v</stringProp>
                <stringProp name="Argument.value">3.19</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Sec-Fetch-Mode" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                <stringProp name="Header.value">cors</stringProp>
              </elementProp>
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">https://www.microfocus.com/</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Site" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                <stringProp name="Header.value">cross-site</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Origin" elementType="Header">
                <stringProp name="Header.name">Origin</stringProp>
                <stringProp name="Header.value">https://www.microfocus.com</stringProp>
              </elementProp>
              <elementProp name="Priority" elementType="Header">
                <stringProp name="Header.name">Priority</stringProp>
                <stringProp name="Header.value">u=2</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">application/font-woff2;q=1.0,application/font-woff;q=0.9,*/*;q=0.8</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:128.0) Gecko/20100101 Firefox/128.0</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Dest" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                <stringProp name="Header.value">font</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/marketplace/dist/commons.bundle.js-109" enabled="true">
          <stringProp name="HTTPSampler.domain">www.microfocus.com</stringProp>
          <stringProp name="HTTPSampler.port">443</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.path">/marketplace/dist/commons.bundle.js</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Sec-Fetch-Mode" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                <stringProp name="Header.value">no-cors</stringProp>
              </elementProp>
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">https://www.microfocus.com/marketplace/appdelivery/category/oes</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Site" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                <stringProp name="Header.value">same-origin</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:128.0) Gecko/20100101 Firefox/128.0</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Dest" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                <stringProp name="Header.value">script</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/collect-112" enabled="true">
          <stringProp name="HTTPSampler.domain">y.clarity.ms</stringProp>
          <stringProp name="HTTPSampler.port">443</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">/collect</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;e&quot;:[&quot;0.7.32&quot;,5,5921,998,&quot;iu69ce0l9t&quot;,&quot;dprpjk&quot;,&quot;lkifca&quot;,2,1,1],&quot;a&quot;:[[6919,26,&quot;pagehide&quot;],[5921,4,1,1536,2380,1536,731,0,0,752,129,5484,0],[6919,1,4,[&quot;684d0d45.akstat.io&quot;,&quot;c.clarity.ms&quot;]],[6919,0,2,2411,3,3,4,9,5,2,25,7],[6919,36,6,[5999,11]]],&quot;p&quot;:[[5999,6,313,191,312,&quot;LI&quot;,&quot;data-slideshow-slide=img&quot;,&quot;aria-hidden=false&quot;,&quot;class=uk-active&quot;,&quot;style=height: 350px; animation-duration: 500ms; opacity: 0;&quot;],[6010,6,315,191,314,&quot;LI&quot;,&quot;data-slideshow-slide=img&quot;,&quot;aria-hidden=false&quot;,&quot;style=animation-duration: 500ms; opacity: 1; height: 350px;&quot;,&quot;class=uk-active&quot;,313,191,312,[5,6],&quot;aria-hidden=true&quot;,&quot;class=&quot;,&quot;style=animation-duration: 500ms; opacity: 0; height: 350px;&quot;]]}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Sec-Fetch-Mode" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                <stringProp name="Header.value">no-cors</stringProp>
              </elementProp>
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">https://www.microfocus.com/</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Site" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                <stringProp name="Header.value">cross-site</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Origin" elementType="Header">
                <stringProp name="Header.name">Origin</stringProp>
                <stringProp name="Header.value">https://www.microfocus.com</stringProp>
              </elementProp>
              <elementProp name="Priority" elementType="Header">
                <stringProp name="Header.name">Priority</stringProp>
                <stringProp name="Header.value">u=6</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">text/plain;charset=UTF-8</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:128.0) Gecko/20100101 Firefox/128.0</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Dest" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                <stringProp name="Header.value">empty</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/marketplace/dist/client.css-103" enabled="true">
          <stringProp name="HTTPSampler.domain">www.microfocus.com</stringProp>
          <stringProp name="HTTPSampler.port">443</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.path">/marketplace/dist/client.css</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Sec-Fetch-Mode" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                <stringProp name="Header.value">no-cors</stringProp>
              </elementProp>
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">https://www.microfocus.com/marketplace/appdelivery/category/oes</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Site" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                <stringProp name="Header.value">same-origin</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Priority" elementType="Header">
                <stringProp name="Header.name">Priority</stringProp>
                <stringProp name="Header.value">u=2</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">text/css,*/*;q=0.1</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:128.0) Gecko/20100101 Firefox/128.0</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Dest" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                <stringProp name="Header.value">style</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/marketplace/dist/clientlayout.bundle.js-111" enabled="true">
          <stringProp name="HTTPSampler.domain">www.microfocus.com</stringProp>
          <stringProp name="HTTPSampler.port">443</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.path">/marketplace/dist/clientlayout.bundle.js</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Sec-Fetch-Mode" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                <stringProp name="Header.value">no-cors</stringProp>
              </elementProp>
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">https://www.microfocus.com/marketplace/appdelivery/category/oes</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Site" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                <stringProp name="Header.value">same-origin</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:128.0) Gecko/20100101 Firefox/128.0</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Dest" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                <stringProp name="Header.value">script</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/marketplace/dist/vendor.bundle.js-110" enabled="true">
          <stringProp name="HTTPSampler.domain">www.microfocus.com</stringProp>
          <stringProp name="HTTPSampler.port">443</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.path">/marketplace/dist/vendor.bundle.js</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Sec-Fetch-Mode" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                <stringProp name="Header.value">no-cors</stringProp>
              </elementProp>
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">https://www.microfocus.com/marketplace/appdelivery/category/oes</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Site" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                <stringProp name="Header.value">same-origin</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:128.0) Gecko/20100101 Firefox/128.0</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Dest" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                <stringProp name="Header.value">script</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/marketplace/dist/mktp.bundle.js-113" enabled="true">
          <stringProp name="HTTPSampler.domain">www.microfocus.com</stringProp>
          <stringProp name="HTTPSampler.port">443</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.path">/marketplace/dist/mktp.bundle.js</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Sec-Fetch-Mode" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                <stringProp name="Header.value">no-cors</stringProp>
              </elementProp>
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">https://www.microfocus.com/marketplace/appdelivery/category/oes</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Site" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                <stringProp name="Header.value">same-origin</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:128.0) Gecko/20100101 Firefox/128.0</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Dest" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                <stringProp name="Header.value">script</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/marketplace/dist/generic.css-102" enabled="true">
          <stringProp name="HTTPSampler.domain">www.microfocus.com</stringProp>
          <stringProp name="HTTPSampler.port">443</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.path">/marketplace/dist/generic.css</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Sec-Fetch-Mode" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                <stringProp name="Header.value">no-cors</stringProp>
              </elementProp>
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">https://www.microfocus.com/marketplace/appdelivery/category/oes</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Site" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                <stringProp name="Header.value">same-origin</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Priority" elementType="Header">
                <stringProp name="Header.name">Priority</stringProp>
                <stringProp name="Header.value">u=2</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">text/css,*/*;q=0.1</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:128.0) Gecko/20100101 Firefox/128.0</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Dest" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                <stringProp name="Header.value">style</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/marketplace/dist/commons.css-107" enabled="true">
          <stringProp name="HTTPSampler.domain">www.microfocus.com</stringProp>
          <stringProp name="HTTPSampler.port">443</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.path">/marketplace/dist/commons.css</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Sec-Fetch-Mode" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                <stringProp name="Header.value">no-cors</stringProp>
              </elementProp>
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">https://www.microfocus.com/marketplace/appdelivery/category/oes</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Site" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                <stringProp name="Header.value">same-origin</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Priority" elementType="Header">
                <stringProp name="Header.name">Priority</stringProp>
                <stringProp name="Header.value">u=2</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">text/css,*/*;q=0.1</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:128.0) Gecko/20100101 Firefox/128.0</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Dest" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                <stringProp name="Header.value">style</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/marketplace/signin/sso-114" enabled="true">
          <stringProp name="HTTPSampler.domain">www.microfocus.com</stringProp>
          <stringProp name="HTTPSampler.port">443</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">/marketplace/signin/sso</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Sec-Fetch-Mode" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                <stringProp name="Header.value">navigate</stringProp>
              </elementProp>
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">https://www.microfocus.com/marketplace/appdelivery/category/oes</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Site" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                <stringProp name="Header.value">same-origin</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Priority" elementType="Header">
                <stringProp name="Header.name">Priority</stringProp>
                <stringProp name="Header.value">u=4</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/png,image/svg+xml,*/*;q=0.8</stringProp>
              </elementProp>
              <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:128.0) Gecko/20100101 Firefox/128.0</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Dest" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                <stringProp name="Header.value">iframe</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/marketplace/api/user/products/5/377369-116" enabled="true">
          <stringProp name="HTTPSampler.domain">www.microfocus.com</stringProp>
          <stringProp name="HTTPSampler.port">443</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.path">/marketplace/api/user/products/5/377369</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Sec-Fetch-Mode" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                <stringProp name="Header.value">cors</stringProp>
              </elementProp>
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">https://www.microfocus.com/marketplace/appdelivery/category/oes</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Site" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                <stringProp name="Header.value">same-origin</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">application/json, text/javascript, */*; q=0.01</stringProp>
              </elementProp>
              <elementProp name="X-Requested-With" elementType="Header">
                <stringProp name="Header.name">X-Requested-With</stringProp>
                <stringProp name="Header.value">XMLHttpRequest</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:128.0) Gecko/20100101 Firefox/128.0</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Dest" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                <stringProp name="Header.value">empty</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/marketplace/api/user/subscription/5/377369-117" enabled="true">
          <stringProp name="HTTPSampler.domain">www.microfocus.com</stringProp>
          <stringProp name="HTTPSampler.port">443</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.path">/marketplace/api/user/subscription/5/377369</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Sec-Fetch-Mode" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                <stringProp name="Header.value">cors</stringProp>
              </elementProp>
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">https://www.microfocus.com/marketplace/appdelivery/category/oes</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Site" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                <stringProp name="Header.value">same-origin</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">application/json, text/javascript, */*; q=0.01</stringProp>
              </elementProp>
              <elementProp name="X-Requested-With" elementType="Header">
                <stringProp name="Header.name">X-Requested-With</stringProp>
                <stringProp name="Header.value">XMLHttpRequest</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:128.0) Gecko/20100101 Firefox/128.0</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Dest" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                <stringProp name="Header.value">empty</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/nidp/app-115" enabled="true">
          <stringProp name="TestPlan.comments">Detected the start of a redirect chain</stringProp>
          <stringProp name="HTTPSampler.domain">login.microfocus.com</stringProp>
          <stringProp name="HTTPSampler.port">443</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.path">/nidp/app</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Sec-Fetch-Mode" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                <stringProp name="Header.value">navigate</stringProp>
              </elementProp>
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">https://www.microfocus.com/</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Site" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                <stringProp name="Header.value">same-site</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Priority" elementType="Header">
                <stringProp name="Header.name">Priority</stringProp>
                <stringProp name="Header.value">u=4</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/png,image/svg+xml,*/*;q=0.8</stringProp>
              </elementProp>
              <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:128.0) Gecko/20100101 Firefox/128.0</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Dest" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                <stringProp name="Header.value">iframe</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/nidp/saml2/getintro-118" enabled="true">
          <stringProp name="TestPlan.comments">Detected the start of a redirect chain</stringProp>
          <stringProp name="HTTPSampler.domain">sldlogin.microfocus.com</stringProp>
          <stringProp name="HTTPSampler.port">443</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.path">/nidp/saml2/getintro</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments">
              <elementProp name="RelayState" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">RelayState</stringProp>
                <stringProp name="Argument.value">https://login.microfocus.com/nidp/app/login?sid=35&amp;first=true</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Sec-Fetch-Mode" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                <stringProp name="Header.value">navigate</stringProp>
              </elementProp>
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">https://www.microfocus.com/</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Site" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                <stringProp name="Header.value">same-site</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Priority" elementType="Header">
                <stringProp name="Header.name">Priority</stringProp>
                <stringProp name="Header.value">u=4</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/png,image/svg+xml,*/*;q=0.8</stringProp>
              </elementProp>
              <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:128.0) Gecko/20100101 Firefox/128.0</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Dest" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                <stringProp name="Header.value">iframe</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/marketplace/product_catalog/_search-121" enabled="true">
          <stringProp name="HTTPSampler.domain">www.microfocus.com</stringProp>
          <stringProp name="HTTPSampler.port">443</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.path">/marketplace/product_catalog/_search</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;_source&quot;:[&quot;author&quot;,&quot;platforms.name&quot;,&quot;product_group&quot;,&quot;platforms.versions.version&quot;,&quot;course_delivery_method&quot;,&quot;course_level&quot;],&quot;query&quot;:{&quot;bool&quot;:{&quot;must&quot;:[{&quot;term&quot;:{&quot;group_name&quot;:&quot;appdelivery&quot;}},{&quot;term&quot;:{&quot;categories&quot;:&quot;Open Enterprise Server&quot;}}]}},&quot;from&quot;:0,&quot;size&quot;:1000}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Sec-Fetch-Mode" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                <stringProp name="Header.value">cors</stringProp>
              </elementProp>
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">https://www.microfocus.com/marketplace/appdelivery/category/oes</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Site" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                <stringProp name="Header.value">same-origin</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Origin" elementType="Header">
                <stringProp name="Header.name">Origin</stringProp>
                <stringProp name="Header.value">https://www.microfocus.com</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">application/json, text/javascript, */*; q=0.01</stringProp>
              </elementProp>
              <elementProp name="X-Requested-With" elementType="Header">
                <stringProp name="Header.name">X-Requested-With</stringProp>
                <stringProp name="Header.value">XMLHttpRequest</stringProp>
              </elementProp>
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:128.0) Gecko/20100101 Firefox/128.0</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Dest" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                <stringProp name="Header.value">empty</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/marketplace/product_catalog/_search-119" enabled="true">
          <stringProp name="HTTPSampler.domain">www.microfocus.com</stringProp>
          <stringProp name="HTTPSampler.port">443</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.path">/marketplace/product_catalog/_search</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;_source&quot;:[&quot;name&quot;,&quot;alpha&quot;,&quot;slug&quot;,&quot;logos&quot;,&quot;author&quot;,&quot;summary&quot;,&quot;categories&quot;,&quot;subcategories&quot;,&quot;price&quot;,&quot;platforms.name&quot;,&quot;platforms.versions.version&quot;,&quot;last_published&quot;,&quot;download_count&quot;,&quot;is_company_partner&quot;,&quot;course_delivery_method&quot;,&quot;product_group&quot;,&quot;course_level&quot;,&quot;releases.files.is_external&quot;,&quot;group_name&quot;,&quot;average_rating&quot;,&quot;is_hpe_supported&quot;,&quot;is_early_access&quot;,&quot;has_entitlement&quot;,&quot;is_early_access&quot;],&quot;query&quot;:{&quot;bool&quot;:{&quot;must&quot;:[{&quot;term&quot;:{&quot;group_name&quot;:&quot;appdelivery&quot;}},{&quot;term&quot;:{&quot;categories&quot;:&quot;Open Enterprise Server&quot;}}]}},&quot;from&quot;:0,&quot;size&quot;:66,&quot;sort&quot;:{&quot;last_published&quot;:{&quot;order&quot;:&quot;desc&quot;}}}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Sec-Fetch-Mode" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                <stringProp name="Header.value">cors</stringProp>
              </elementProp>
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">https://www.microfocus.com/marketplace/appdelivery/category/oes</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Site" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                <stringProp name="Header.value">same-origin</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Origin" elementType="Header">
                <stringProp name="Header.name">Origin</stringProp>
                <stringProp name="Header.value">https://www.microfocus.com</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">application/json, text/javascript, */*; q=0.01</stringProp>
              </elementProp>
              <elementProp name="X-Requested-With" elementType="Header">
                <stringProp name="Header.name">X-Requested-With</stringProp>
                <stringProp name="Header.value">XMLHttpRequest</stringProp>
              </elementProp>
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:128.0) Gecko/20100101 Firefox/128.0</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Dest" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                <stringProp name="Header.value">empty</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/marketplace/product_catalog/_search-120" enabled="true">
          <stringProp name="HTTPSampler.domain">www.microfocus.com</stringProp>
          <stringProp name="HTTPSampler.port">443</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.path">/marketplace/product_catalog/_search</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;query&quot;:{&quot;bool&quot;:{&quot;must&quot;:[{&quot;match&quot;:{&quot;group_name&quot;:&quot;appdelivery&quot;}},{&quot;range&quot;:{&quot;average_rating&quot;:{&quot;gte&quot; : 30,&quot;lte&quot; : 50}}}]}}}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Sec-Fetch-Mode" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                <stringProp name="Header.value">cors</stringProp>
              </elementProp>
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">https://www.microfocus.com/marketplace/appdelivery/category/oes</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Site" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                <stringProp name="Header.value">same-origin</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Origin" elementType="Header">
                <stringProp name="Header.name">Origin</stringProp>
                <stringProp name="Header.value">https://www.microfocus.com</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">application/json, text/javascript, */*; q=0.01</stringProp>
              </elementProp>
              <elementProp name="X-Requested-With" elementType="Header">
                <stringProp name="Header.name">X-Requested-With</stringProp>
                <stringProp name="Header.value">XMLHttpRequest</stringProp>
              </elementProp>
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:128.0) Gecko/20100101 Firefox/128.0</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Dest" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                <stringProp name="Header.value">empty</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/tag/iu69ce0l9t-123" enabled="true">
          <stringProp name="HTTPSampler.domain">www.clarity.ms</stringProp>
          <stringProp name="HTTPSampler.port">443</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.path">/tag/iu69ce0l9t</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Sec-Fetch-Mode" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                <stringProp name="Header.value">no-cors</stringProp>
              </elementProp>
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">https://www.microfocus.com/</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Site" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                <stringProp name="Header.value">cross-site</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:128.0) Gecko/20100101 Firefox/128.0</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Dest" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                <stringProp name="Header.value">script</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/api/config.json-125" enabled="true">
          <stringProp name="HTTPSampler.domain">c.go-mpulse.net</stringProp>
          <stringProp name="HTTPSampler.port">443</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.path">/api/config.json</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments">
              <elementProp name="key" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">key</stringProp>
                <stringProp name="Argument.value">5KNJK-8UTBJ-V9LAY-HLX72-YR7DF</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="d" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">d</stringProp>
                <stringProp name="Argument.value">www.microfocus.com</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="t" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">t</stringProp>
                <stringProp name="Argument.value">5738297</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="v" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">v</stringProp>
                <stringProp name="Argument.value">1.720.0</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="sl" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">sl</stringProp>
                <stringProp name="Argument.value">0</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="si" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">si</stringProp>
                <stringProp name="Argument.value">b4c0696d-c076-40be-885f-78f18b8710e8-sgxhg2</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="plugins" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">plugins</stringProp>
                <stringProp name="Argument.value">AK,ConfigOverride,Continuity,PageParams,IFrameDelay,AutoXHR,SPA,History,Angular,Backbone,Ember,RT,CrossDomain,BW,PaintTiming,NavigationTiming,ResourceTiming,Memory,CACHE_RELOAD,Errors,TPAnalytics,UserTiming,Akamai,Early,EventTiming,LOGN</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="acao" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">acao</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="ak.ai" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">ak.ai</stringProp>
                <stringProp name="Argument.value">492776</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Sec-Fetch-Mode" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                <stringProp name="Header.value">cors</stringProp>
              </elementProp>
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">https://www.microfocus.com/</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Site" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                <stringProp name="Header.value">cross-site</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Origin" elementType="Header">
                <stringProp name="Header.name">Origin</stringProp>
                <stringProp name="Header.value">https://www.microfocus.com</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:128.0) Gecko/20100101 Firefox/128.0</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Dest" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                <stringProp name="Header.value">empty</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/marketplace/api/user/status-124" enabled="true">
          <stringProp name="HTTPSampler.domain">www.microfocus.com</stringProp>
          <stringProp name="HTTPSampler.port">443</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.path">/marketplace/api/user/status</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Sec-Fetch-Mode" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                <stringProp name="Header.value">cors</stringProp>
              </elementProp>
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">https://www.microfocus.com/marketplace/appdelivery/category/oes</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Site" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                <stringProp name="Header.value">same-origin</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="X-Requested-With" elementType="Header">
                <stringProp name="Header.name">X-Requested-With</stringProp>
                <stringProp name="Header.value">XMLHttpRequest</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:128.0) Gecko/20100101 Firefox/128.0</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Dest" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                <stringProp name="Header.value">empty</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/-127" enabled="true">
          <stringProp name="HTTPSampler.domain">c.6sc.co</stringProp>
          <stringProp name="HTTPSampler.port">443</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.path">/</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Sec-Fetch-Mode" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                <stringProp name="Header.value">cors</stringProp>
              </elementProp>
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">https://www.microfocus.com/</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Site" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                <stringProp name="Header.value">cross-site</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Origin" elementType="Header">
                <stringProp name="Header.name">Origin</stringProp>
                <stringProp name="Header.value">https://www.microfocus.com</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:128.0) Gecko/20100101 Firefox/128.0</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Dest" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                <stringProp name="Header.value">empty</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/-128" enabled="true">
          <stringProp name="HTTPSampler.domain">ipv6.6sc.co</stringProp>
          <stringProp name="HTTPSampler.port">443</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.path">/</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Sec-Fetch-Mode" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                <stringProp name="Header.value">cors</stringProp>
              </elementProp>
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">https://www.microfocus.com/</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Site" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                <stringProp name="Header.value">cross-site</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Origin" elementType="Header">
                <stringProp name="Header.name">Origin</stringProp>
                <stringProp name="Header.value">https://www.microfocus.com</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:128.0) Gecko/20100101 Firefox/128.0</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Dest" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                <stringProp name="Header.value">empty</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/nidp/app/login-122" enabled="true">
          <stringProp name="TestPlan.comments">Detected the start of a redirect chain</stringProp>
          <stringProp name="HTTPSampler.domain">login.microfocus.com</stringProp>
          <stringProp name="HTTPSampler.port">443</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">ISO-8859-1</stringProp>
          <stringProp name="HTTPSampler.path">/nidp/app/login</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments">
              <elementProp name="sid" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">sid</stringProp>
                <stringProp name="Argument.value">35</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="first" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">first</stringProp>
                <stringProp name="Argument.value">true</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="_saml_idp" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">_saml_idp</stringProp>
                <stringProp name="Argument.value">aHR0cHM6Ly9zbGRsb2dpbi5taWNyb2ZvY3VzLmNvbS9uaWRwL3NhbWwyL21ldGFkYXRh</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Sec-Fetch-Mode" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                <stringProp name="Header.value">navigate</stringProp>
              </elementProp>
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">https://www.microfocus.com/</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Site" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                <stringProp name="Header.value">same-site</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Priority" elementType="Header">
                <stringProp name="Header.name">Priority</stringProp>
                <stringProp name="Header.value">u=4</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/png,image/svg+xml,*/*;q=0.8</stringProp>
              </elementProp>
              <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:128.0) Gecko/20100101 Firefox/128.0</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Dest" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                <stringProp name="Header.value">iframe</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/tag/3ynmtgenx6-126" enabled="true">
          <stringProp name="HTTPSampler.domain">www.clarity.ms</stringProp>
          <stringProp name="HTTPSampler.port">443</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.path">/tag/3ynmtgenx6</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Sec-Fetch-Mode" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                <stringProp name="Header.value">no-cors</stringProp>
              </elementProp>
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">https://www.microfocus.com/</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Site" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                <stringProp name="Header.value">cross-site</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:128.0) Gecko/20100101 Firefox/128.0</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Dest" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                <stringProp name="Header.value">script</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/v1/beacon/img.gif-130" enabled="true">
          <stringProp name="HTTPSampler.domain">b.6sc.co</stringProp>
          <stringProp name="HTTPSampler.port">443</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.path">/v1/beacon/img.gif</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments">
              <elementProp name="token" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">token</stringProp>
                <stringProp name="Argument.value">5f90029b56db57cd17027efd926646ef</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="svisitor" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">svisitor</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="visitor" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">visitor</stringProp>
                <stringProp name="Argument.value">e43783fd-0d0b-4b08-8499-84fc86871881</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="session" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">session</stringProp>
                <stringProp name="Argument.value">cfa3825d-7349-4a7a-87a4-13fccbbe3404</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="event" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">event</stringProp>
                <stringProp name="Argument.value">a_pageload</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="q" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">q</stringProp>
                <stringProp name="Argument.value">{&quot;pageLoadTime&quot;:&quot;Sat, 20 Jul 2024 15:24:08 GMT&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="isIframe" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">isIframe</stringProp>
                <stringProp name="Argument.value">false</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="m" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">m</stringProp>
                <stringProp name="Argument.value">{&quot;description&quot;:&quot;Securely deliver advanced file, print, network, and storage management services across your enterprise.&quot;,&quot;keywords&quot;:&quot;&quot;,&quot;title&quot;:&quot;            Open Enterprise Server | Application Delivery Marketplace | OpenText\n    &quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="cb" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">cb</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="r" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">r</stringProp>
                <stringProp name="Argument.value">https://www.microfocus.com/marketplace/appdelivery</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="thirdParty" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">thirdParty</stringProp>
                <stringProp name="Argument.value">{}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="v2" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">v2</stringProp>
                <stringProp name="Argument.value">1</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="pageURL" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">pageURL</stringProp>
                <stringProp name="Argument.value">https://www.microfocus.com/marketplace/appdelivery/category/oes</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="pageViewId" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">pageViewId</stringProp>
                <stringProp name="Argument.value">6fa0f2f9-bb7e-4bcf-8cba-baaaf4caec92</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="v" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">v</stringProp>
                <stringProp name="Argument.value">1.1.22</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Sec-Fetch-Mode" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                <stringProp name="Header.value">no-cors</stringProp>
              </elementProp>
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">https://www.microfocus.com/</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Site" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                <stringProp name="Header.value">cross-site</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Priority" elementType="Header">
                <stringProp name="Header.name">Priority</stringProp>
                <stringProp name="Header.value">u=6, i</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:128.0) Gecko/20100101 Firefox/128.0</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">image/avif,image/webp,image/png,image/svg+xml,image/*;q=0.8,*/*;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Dest" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                <stringProp name="Header.value">image</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/v1/beacon/img.gif-131" enabled="true">
          <stringProp name="HTTPSampler.domain">b.6sc.co</stringProp>
          <stringProp name="HTTPSampler.port">443</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.path">/v1/beacon/img.gif</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments">
              <elementProp name="token" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">token</stringProp>
                <stringProp name="Argument.value">5f90029b56db57cd17027efd926646ef</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="svisitor" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">svisitor</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="visitor" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">visitor</stringProp>
                <stringProp name="Argument.value">e43783fd-0d0b-4b08-8499-84fc86871881</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="session" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">session</stringProp>
                <stringProp name="Argument.value">cfa3825d-7349-4a7a-87a4-13fccbbe3404</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="event" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">event</stringProp>
                <stringProp name="Argument.value">ni:asyncSettingsAudit</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="q" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">q</stringProp>
                <stringProp name="Argument.value">{&quot;settings&quot;:&quot;[{\&quot;name\&quot;:\&quot;enableEventTracking\&quot;,\&quot;value\&quot;:\&quot;true\&quot;,\&quot;dateTime\&quot;:\&quot;Sat, 20 Jul 2024 15:24:08 GMT\&quot;,\&quot;timeSincePageLoad\&quot;:\&quot;0\&quot;},{\&quot;name\&quot;:\&quot;setToken\&quot;,\&quot;value\&quot;:\&quot;5f90029b56db57cd17027efd926646ef\&quot;,\&quot;dateTime\&quot;:\&quot;Sat, 20 Jul 2024 15:24:08 GMT\&quot;,\&quot;timeSincePageLoad\&quot;:\&quot;0\&quot;},{\&quot;name\&quot;:\&quot;setEndpoint\&quot;,\&quot;value\&quot;:\&quot;b.6sc.co\&quot;,\&quot;dateTime\&quot;:\&quot;Sat, 20 Jul 2024 15:24:08 GMT\&quot;,\&quot;timeSincePageLoad\&quot;:\&quot;0\&quot;}]&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="isIframe" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">isIframe</stringProp>
                <stringProp name="Argument.value">false</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="m" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">m</stringProp>
                <stringProp name="Argument.value">{&quot;description&quot;:&quot;Securely deliver advanced file, print, network, and storage management services across your enterprise.&quot;,&quot;keywords&quot;:&quot;&quot;,&quot;title&quot;:&quot;            Open Enterprise Server | Application Delivery Marketplace | OpenText\n    &quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="cb" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">cb</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="r" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">r</stringProp>
                <stringProp name="Argument.value">https://www.microfocus.com/marketplace/appdelivery</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="thirdParty" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">thirdParty</stringProp>
                <stringProp name="Argument.value">{}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="v2" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">v2</stringProp>
                <stringProp name="Argument.value">1</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="pageURL" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">pageURL</stringProp>
                <stringProp name="Argument.value">https://www.microfocus.com/marketplace/appdelivery/category/oes</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="pageViewId" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">pageViewId</stringProp>
                <stringProp name="Argument.value">6fa0f2f9-bb7e-4bcf-8cba-baaaf4caec92</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="v" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">v</stringProp>
                <stringProp name="Argument.value">1.1.22</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Sec-Fetch-Mode" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                <stringProp name="Header.value">no-cors</stringProp>
              </elementProp>
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">https://www.microfocus.com/</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Site" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                <stringProp name="Header.value">cross-site</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Priority" elementType="Header">
                <stringProp name="Header.name">Priority</stringProp>
                <stringProp name="Header.value">u=6, i</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:128.0) Gecko/20100101 Firefox/128.0</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">image/avif,image/webp,image/png,image/svg+xml,image/*;q=0.8,*/*;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Dest" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                <stringProp name="Header.value">image</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/collect-129" enabled="true">
          <stringProp name="HTTPSampler.domain">y.clarity.ms</stringProp>
          <stringProp name="HTTPSampler.port">443</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.path">/collect</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments">
              <elementProp name="�&#x8;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#xa;�R�n�0&#x10;�&#x15;��&#x16;�J|KvNE�&#x16;" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">�&#x8;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;
�R�n�0&#x10;�&#x15;��&#x16;�J|KvNE�&#x16;</stringProp>
                <stringProp name="Argument.value">�=8E&#xf;�&#x10;(2�2�E�Rl��&#x7f;�m��&#x0;��;�3Cq��{�l�(�B &#xe;&#x12;&#x4;H���&apos;��&#x18;&#x16;3&#x7;�N9=n�&#x18;�a�w&#x1c;4��&#x16;x���@&#xd;�j&#x7;R誅F[�8#��g@���a
&#xf;�爐�6���?�8�=o/(&#x1d;���W&#x18;����`���q&#x1d;&#xf;&#x13;�tǤ(�&#x15;C�� v�W�/��&#xb;�}��6�JH��d�C��x,OS��(�}�Ӵ,���P�B��</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="�OS��]�����i�z_v)��&#x10;�&gt;�,�n��&quot;&#x16;�O��^��D���ɏ��8��r�&lt;[��S���Mi&#x8;�&#x14;��n.&#x1c;v�_&#xb;W�{�3J-Pʏo���,6R�&#x1f;�1P�N3:(�&#x14;/&#xa;Cņ`Y(KuM�s&apos;��Կ�&#x17;&#x14;~���&#x17;�ԕ��44T&#xe;0c&#x9;�&#xb;p�&#x15;T8�撺��&#x19;�V&#x6;��-�C&#x1a;n�*V&#x1a;(nK&#x7f;�9y�*��&#x10;h��*�2J�" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">�OS��]�����i�z_v)��&#x10;�&gt;�,�n��&quot;&#x16;�O��^��D���ɏ��8��r�&lt;[��S���Mi&#x8;�&#x14;��n.&#x1c;v�_&#xb;W�{�3J-Pʏo���,6R�&#x1f;�1P�N3:(�&#x14;/
Cņ`Y(KuM�s&apos;��Կ�&#x17;&#x14;~���&#x17;�ԕ��44T&#xe;0c	�&#xb;p�&#x15;T8�撺��&#x19;�V&#x6;��-�C&#x1a;n�*V&#x1a;(nK&#x7f;�9y�*��&#x10;h��*�2J�</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata"></stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Sec-Fetch-Mode" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                <stringProp name="Header.value">cors</stringProp>
              </elementProp>
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">https://www.microfocus.com/</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Site" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                <stringProp name="Header.value">cross-site</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Origin" elementType="Header">
                <stringProp name="Header.name">Origin</stringProp>
                <stringProp name="Header.value">https://www.microfocus.com</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">application/x-clarity-gzip</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:128.0) Gecko/20100101 Firefox/128.0</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Dest" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                <stringProp name="Header.value">empty</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/nidp/app/login-133" enabled="true">
          <stringProp name="HTTPSampler.domain">login.microfocus.com</stringProp>
          <stringProp name="HTTPSampler.port">443</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">ISO-8859-1</stringProp>
          <stringProp name="HTTPSampler.path">/nidp/app/login</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments">
              <elementProp name="sid" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">sid</stringProp>
                <stringProp name="Argument.value">35</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Sec-Fetch-Mode" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                <stringProp name="Header.value">navigate</stringProp>
              </elementProp>
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">https://www.microfocus.com/</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Site" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                <stringProp name="Header.value">same-site</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Priority" elementType="Header">
                <stringProp name="Header.name">Priority</stringProp>
                <stringProp name="Header.value">u=4</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/png,image/svg+xml,*/*;q=0.8</stringProp>
              </elementProp>
              <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:128.0) Gecko/20100101 Firefox/128.0</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Dest" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                <stringProp name="Header.value">iframe</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/v1/beacon/img.gif-135" enabled="true">
          <stringProp name="HTTPSampler.domain">b.6sc.co</stringProp>
          <stringProp name="HTTPSampler.port">443</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.path">/v1/beacon/img.gif</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments">
              <elementProp name="token" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">token</stringProp>
                <stringProp name="Argument.value">5f90029b56db57cd17027efd926646ef</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="svisitor" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">svisitor</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="visitor" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">visitor</stringProp>
                <stringProp name="Argument.value">e43783fd-0d0b-4b08-8499-84fc86871881</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="session" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">session</stringProp>
                <stringProp name="Argument.value">cfa3825d-7349-4a7a-87a4-13fccbbe3404</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="event" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">event</stringProp>
                <stringProp name="Argument.value">active_time_track</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="q" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">q</stringProp>
                <stringProp name="Argument.value">{&quot;currentTime&quot;:&quot;Sat, 20 Jul 2024 15:24:09 GMT&quot;,&quot;lastTrackTime&quot;:&quot;Sat, 20 Jul 2024 15:24:08 GMT&quot;,&quot;timeSpent&quot;:&quot;1020&quot;,&quot;totalTimeSpent&quot;:&quot;1020&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="isIframe" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">isIframe</stringProp>
                <stringProp name="Argument.value">false</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="m" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">m</stringProp>
                <stringProp name="Argument.value">{&quot;description&quot;:&quot;Securely deliver advanced file, print, network, and storage management services across your enterprise.&quot;,&quot;keywords&quot;:&quot;&quot;,&quot;title&quot;:&quot;            Open Enterprise Server | Application Delivery Marketplace | OpenText\n    &quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="cb" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">cb</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="r" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">r</stringProp>
                <stringProp name="Argument.value">https://www.microfocus.com/marketplace/appdelivery</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="thirdParty" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">thirdParty</stringProp>
                <stringProp name="Argument.value">{}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="v2" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">v2</stringProp>
                <stringProp name="Argument.value">1</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="pageURL" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">pageURL</stringProp>
                <stringProp name="Argument.value">https://www.microfocus.com/marketplace/appdelivery/category/oes</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="pageViewId" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">pageViewId</stringProp>
                <stringProp name="Argument.value">6fa0f2f9-bb7e-4bcf-8cba-baaaf4caec92</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="v" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">v</stringProp>
                <stringProp name="Argument.value">1.1.22</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Sec-Fetch-Mode" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                <stringProp name="Header.value">no-cors</stringProp>
              </elementProp>
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">https://www.microfocus.com/</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Site" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                <stringProp name="Header.value">cross-site</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Priority" elementType="Header">
                <stringProp name="Header.name">Priority</stringProp>
                <stringProp name="Header.value">u=6, i</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:128.0) Gecko/20100101 Firefox/128.0</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">image/avif,image/webp,image/png,image/svg+xml,image/*;q=0.8,*/*;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Dest" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                <stringProp name="Header.value">image</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/v1/beacon/img.gif-136" enabled="true">
          <stringProp name="HTTPSampler.domain">b.6sc.co</stringProp>
          <stringProp name="HTTPSampler.port">443</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.path">/v1/beacon/img.gif</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments">
              <elementProp name="token" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">token</stringProp>
                <stringProp name="Argument.value">5f90029b56db57cd17027efd926646ef</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="svisitor" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">svisitor</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="visitor" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">visitor</stringProp>
                <stringProp name="Argument.value">e43783fd-0d0b-4b08-8499-84fc86871881</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="session" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">session</stringProp>
                <stringProp name="Argument.value">cfa3825d-7349-4a7a-87a4-13fccbbe3404</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="event" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">event</stringProp>
                <stringProp name="Argument.value">click</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="q" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">q</stringProp>
                <stringProp name="Argument.value">{&quot;event_value&quot;:&quot;#&quot;,&quot;event_id&quot;:&quot;&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="isIframe" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">isIframe</stringProp>
                <stringProp name="Argument.value">false</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="m" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">m</stringProp>
                <stringProp name="Argument.value">{&quot;description&quot;:&quot;Securely deliver advanced file, print, network, and storage management services across your enterprise.&quot;,&quot;keywords&quot;:&quot;&quot;,&quot;title&quot;:&quot;            Open Enterprise Server | Application Delivery Marketplace | OpenText\n    &quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="cb" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">cb</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="r" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">r</stringProp>
                <stringProp name="Argument.value">https://www.microfocus.com/marketplace/appdelivery</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="thirdParty" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">thirdParty</stringProp>
                <stringProp name="Argument.value">{}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="v2" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">v2</stringProp>
                <stringProp name="Argument.value">1</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="pageURL" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">pageURL</stringProp>
                <stringProp name="Argument.value">https://www.microfocus.com/marketplace/appdelivery/category/oes</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="pageViewId" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">pageViewId</stringProp>
                <stringProp name="Argument.value">6fa0f2f9-bb7e-4bcf-8cba-baaaf4caec92</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="v" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">v</stringProp>
                <stringProp name="Argument.value">1.1.22</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Sec-Fetch-Mode" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                <stringProp name="Header.value">no-cors</stringProp>
              </elementProp>
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">https://www.microfocus.com/</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Site" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                <stringProp name="Header.value">cross-site</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Priority" elementType="Header">
                <stringProp name="Header.name">Priority</stringProp>
                <stringProp name="Header.value">u=0, i</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:128.0) Gecko/20100101 Firefox/128.0</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">image/avif,image/webp,image/png,image/svg+xml,image/*;q=0.8,*/*;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Dest" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                <stringProp name="Header.value">image</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/marketplace/product_catalog/_search-137" enabled="true">
          <stringProp name="HTTPSampler.domain">www.microfocus.com</stringProp>
          <stringProp name="HTTPSampler.port">443</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">/marketplace/product_catalog/_search</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;_source&quot;:[&quot;name&quot;,&quot;alpha&quot;,&quot;slug&quot;,&quot;logos&quot;,&quot;author&quot;,&quot;summary&quot;,&quot;categories&quot;,&quot;subcategories&quot;,&quot;price&quot;,&quot;platforms.name&quot;,&quot;platforms.versions.version&quot;,&quot;last_published&quot;,&quot;download_count&quot;,&quot;is_company_partner&quot;,&quot;course_delivery_method&quot;,&quot;product_group&quot;,&quot;course_level&quot;,&quot;releases.files.is_external&quot;,&quot;group_name&quot;,&quot;average_rating&quot;,&quot;is_hpe_supported&quot;,&quot;is_early_access&quot;,&quot;has_entitlement&quot;,&quot;is_early_access&quot;],&quot;query&quot;:{&quot;bool&quot;:{&quot;must&quot;:[{&quot;term&quot;:{&quot;group_name&quot;:&quot;appdelivery&quot;}},{&quot;term&quot;:{&quot;categories&quot;:&quot;Open Enterprise Server&quot;}}]}},&quot;from&quot;:0,&quot;size&quot;:66,&quot;sort&quot;:{&quot;download_count&quot;:{&quot;order&quot;:&quot;desc&quot;}}}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Sec-Fetch-Mode" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                <stringProp name="Header.value">cors</stringProp>
              </elementProp>
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">https://www.microfocus.com/marketplace/appdelivery/category/oes</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Site" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                <stringProp name="Header.value">same-origin</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Origin" elementType="Header">
                <stringProp name="Header.name">Origin</stringProp>
                <stringProp name="Header.value">https://www.microfocus.com</stringProp>
              </elementProp>
              <elementProp name="Priority" elementType="Header">
                <stringProp name="Header.name">Priority</stringProp>
                <stringProp name="Header.value">u=0</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">application/json, text/javascript, */*; q=0.01</stringProp>
              </elementProp>
              <elementProp name="X-Requested-With" elementType="Header">
                <stringProp name="Header.name">X-Requested-With</stringProp>
                <stringProp name="Header.value">XMLHttpRequest</stringProp>
              </elementProp>
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:128.0) Gecko/20100101 Firefox/128.0</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Dest" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                <stringProp name="Header.value">empty</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/marketplace/product_catalog/_search-138" enabled="true">
          <stringProp name="HTTPSampler.domain">www.microfocus.com</stringProp>
          <stringProp name="HTTPSampler.port">443</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">/marketplace/product_catalog/_search</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;_source&quot;:[&quot;author&quot;,&quot;platforms.name&quot;,&quot;product_group&quot;,&quot;platforms.versions.version&quot;,&quot;course_delivery_method&quot;,&quot;course_level&quot;],&quot;query&quot;:{&quot;bool&quot;:{&quot;must&quot;:[{&quot;term&quot;:{&quot;group_name&quot;:&quot;appdelivery&quot;}},{&quot;term&quot;:{&quot;categories&quot;:&quot;Open Enterprise Server&quot;}}]}},&quot;from&quot;:0,&quot;size&quot;:1000}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Sec-Fetch-Mode" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                <stringProp name="Header.value">cors</stringProp>
              </elementProp>
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">https://www.microfocus.com/marketplace/appdelivery/category/oes</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Site" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                <stringProp name="Header.value">same-origin</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Origin" elementType="Header">
                <stringProp name="Header.name">Origin</stringProp>
                <stringProp name="Header.value">https://www.microfocus.com</stringProp>
              </elementProp>
              <elementProp name="Priority" elementType="Header">
                <stringProp name="Header.name">Priority</stringProp>
                <stringProp name="Header.value">u=0</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">application/json, text/javascript, */*; q=0.01</stringProp>
              </elementProp>
              <elementProp name="X-Requested-With" elementType="Header">
                <stringProp name="Header.name">X-Requested-With</stringProp>
                <stringProp name="Header.value">XMLHttpRequest</stringProp>
              </elementProp>
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:128.0) Gecko/20100101 Firefox/128.0</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Dest" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                <stringProp name="Header.value">empty</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/nidp/saml2/sso-139" enabled="true">
          <stringProp name="HTTPSampler.domain">sldlogin.microfocus.com</stringProp>
          <stringProp name="HTTPSampler.port">443</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">ISO-8859-1</stringProp>
          <stringProp name="HTTPSampler.path">/nidp/saml2/sso</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments">
              <elementProp name="SAMLRequest" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">SAMLRequest</stringProp>
                <stringProp name="Argument.value">PHNhbWxwOkF1dGhuUmVxdWVzdCB4bWxuczpzYW1scD0idXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6Mi4wOnByb3RvY29sIiB4bWxuczpzYW1sPSJ1cm46b2FzaXM6bmFtZXM6dGM6U0FNTDoyLjA6YXNzZXJ0aW9uIiBDb25zZW50PSJ1cm46b2FzaXM6bmFtZXM6dGM6U0FNTDoyLjA6Y29uc2VudDp1bmF2YWlsYWJsZSIgRGVzdGluYXRpb249Imh0dHBzOi8vc2xkbG9naW4ubWljcm9mb2N1cy5jb20vbmlkcC9zYW1sMi9zc28iIEZvcmNlQXV0aG49ImZhbHNlIiBJRD0iaWRvSTF2V05zdmpFeUp2bkFnZWpRNlVXbjVfNTAiIElzUGFzc2l2ZT0idHJ1ZSIgSXNzdWVJbnN0YW50PSIyMDI0LTA3LTIwVDE1OjI0OjA5WiIgUHJvdG9jb2xCaW5kaW5nPSJ1cm46b2FzaXM6bmFtZXM6dGM6U0FNTDoyLjA6YmluZGluZ3M6SFRUUC1QT1NUIiBWZXJzaW9uPSIyLjAiPjxzYW1sOklzc3Vlcj5odHRwczovL2xvZ2luLm1pY3JvZm9jdXMuY29tL25pZHAvc2FtbDIvbWV0YWRhdGE8L3NhbWw6SXNzdWVyPjxkczpTaWduYXR1cmUgeG1sbnM6ZHM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvMDkveG1sZHNpZyMiPjxkczpTaWduZWRJbmZvPjxDYW5vbmljYWxpemF0aW9uTWV0aG9kIHhtbG5zPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwLzA5L3htbGRzaWcjIiBBbGdvcml0aG09Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvMTAveG1sLWV4Yy1jMTRuIyIvPjxkczpTaWduYXR1cmVNZXRob2QgQWxnb3JpdGhtPSJodHRwOi8vd3d3LnczLm9yZy8yMDAxLzA0L3htbGRzaWctbW9yZSNyc2Etc2hhMjU2Ii8+PGRzOlJlZmVyZW5jZSBVUkk9IiNpZG9JMXZXTnN2akV5SnZuQWdlalE2VVduNV81MCI+PGRzOlRyYW5zZm9ybXM+PGRzOlRyYW5zZm9ybSBBbGdvcml0aG09Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvMDkveG1sZHNpZyNlbnZlbG9wZWQtc2lnbmF0dXJlIi8+PGRzOlRyYW5zZm9ybSBBbGdvcml0aG09Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvMTAveG1sLWV4Yy1jMTRuIyIvPjwvZHM6VHJhbnNmb3Jtcz48ZHM6RGlnZXN0TWV0aG9kIEFsZ29yaXRobT0iaHR0cDovL3d3dy53My5vcmcvMjAwMS8wNC94bWxlbmMjc2hhMjU2Ii8+PERpZ2VzdFZhbHVlIHhtbG5zPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwLzA5L3htbGRzaWcjIj43V094bXBObmtQQmtBY0ozWmNLSHVabGNNOFhmTUkzdzF6TUJBbGc4UTJVPTwvRGlnZXN0VmFsdWU+PC9kczpSZWZlcmVuY2U+PC9kczpTaWduZWRJbmZvPjxTaWduYXR1cmVWYWx1ZSB4bWxucz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC8wOS94bWxkc2lnIyI+CmVETVpFYW13YzFzcHRXTWZESHRwSTgzTmpCZjdJR3NTUEJET2NrQVRGOTB6U0hra1V3Rk1yK2syeSs1dEJVR1diUGhiVzZSQmFybnkKaTBQSE80LzM4ZjI4bld2OTliOFdadGxsYzA3L3Q3ZFZVeklRWjloQnJwc1dkUnMyK2RZWWpwL3pkbFhBWmM3WFcyVkV5Ymc2b0VSWgptYkpLK0YwMDRlaXlSaFZ1ZlJEMWI1ODMvR1FrZTBFSVVndmwxTzlIS3ZneU9vdDdYd1NYdkozakwxTkFvMC94enZldG1Ud2lxWjZ4ClZMNjVHWDlJUzJIWlVrU0hYeFVWNTg5aCsvQXRYV1d6TW5zdDVPa2t3TzM4MnVNVGFRL1lheC9JSzVqMWpVTHpjVXJ5VVFIK0Z5UHoKcEdaRG1qdTVTdDFYd3BacGNUMjF6anNWTXpmTXgyZUQxZ01ZUmc9PQo8L1NpZ25hdHVyZVZhbHVlPjxkczpLZXlJbmZvPjxkczpYNTA5RGF0YT48ZHM6WDUwOUNlcnRpZmljYXRlPgpNSUlHNVRDQ0JjMmdBd0lCQWdJUUEyQkNjd2ZLUUhXS3RUQ2M5ZGtLWmpBTkJna3Foa2lHOXcwQkFRc0ZBREJaTVFzd0NRWURWUVFHCkV3SlZVekVWTUJNR0ExVUVDaE1NUkdsbmFVTmxjblFnU1c1ak1UTXdNUVlEVlFRREV5cEVhV2RwUTJWeWRDQkhiRzlpWVd3Z1J6SWcKVkV4VElGSlRRU0JUU0VFeU5UWWdNakF5TUNCRFFURXdIaGNOTWpRd01UQXlNREF3TURBd1doY05NalV3TVRBeU1qTTFPVFU1V2pCbQpNUXN3Q1FZRFZRUUdFd0pIUWpFUU1BNEdBMVVFQnhNSFRtVjNZblZ5ZVRFcU1DZ0dBMVVFQ2hNaFRXbGpjbThnUm05amRYTWdTVzUwClpYSnVZWFJwYjI1aGJDQk1hVzFwZEdWa01Sa3dGd1lEVlFRRERCQXFMbTFwWTNKdlptOWpkWE11WTI5dE1JSUJJakFOQmdrcWhraUcKOXcwQkFRRUZBQU9DQVE4QU1JSUJDZ0tDQVFFQXg5RW5sQ3pUQmdrZjV5UGljWVhrbjBoQkduZVBYeXpLQjJ2c0p1RUFtWk11a0ZSRwpicTgxRllTR1NLajN4Ykt0b24wMGFTbTRlK3orQkZpcnUrWW1tc1h1cktvUGZBVkxxem9FQ2dxUlVMNkhjNzM4dGZXRjhSR1V5aDFrCm4vcDlKSVpzZ014NG1oT0NxRWFMZnlLOVhxSnhUcldub1AwZ1Q5KytTRHVvNThuRUVvU2h1aVdZQ0hzZWZlaEpuNkVRbXhOWThrRUkKUE83UDFjdkNFL1hWVnkyUW5QSWc3ZEd2SEJnMFlrZUdzTjJ6U2I3RVJVZFdWWVdiUmxYcE4rWVVuclpxTWs4Y3dibURhRHg3b05NNQp1eWIwUDN2TnVrYkJra3ExSk5jeWtPM092bXBVdkFkaWl6RHoyNG9KbG1ZWTJyVTJta2Q1T1NySG94N0ZZWEloVVFJREFRQUJvNElECm1qQ0NBNVl3SHdZRFZSMGpCQmd3Rm9BVWRJV0F3R2JIM3pmZXo3MHBONm9ESGI3dHpSY3dIUVlEVlIwT0JCWUVGTzNUbUVsaDllcW0KRXlGdGF0TDR0ZXp0RWhJaE1Dc0dBMVVkRVFRa01DS0NFQ291YldsamNtOW1iMk4xY3k1amIyMkNEbTFwWTNKdlptOWpkWE11WTI5dApNRDRHQTFVZElBUTNNRFV3TXdZR1o0RU1BUUlDTUNrd0p3WUlLd1lCQlFVSEFnRVdHMmgwZEhBNkx5OTNkM2N1WkdsbmFXTmxjblF1ClkyOXRMME5RVXpBT0JnTlZIUThCQWY4RUJBTUNCYUF3SFFZRFZSMGxCQll3RkFZSUt3WUJCUVVIQXdFR0NDc0dBUVVGQndNQ01JR2YKQmdOVkhSOEVnWmN3Z1pRd1NLQkdvRVNHUW1oMGRIQTZMeTlqY213ekxtUnBaMmxqWlhKMExtTnZiUzlFYVdkcFEyVnlkRWRzYjJKaApiRWN5VkV4VFVsTkJVMGhCTWpVMk1qQXlNRU5CTVMweExtTnliREJJb0VhZ1JJWkNhSFIwY0RvdkwyTnliRFF1WkdsbmFXTmxjblF1ClkyOXRMMFJwWjJsRFpYSjBSMnh2WW1Gc1J6SlVURk5TVTBGVFNFRXlOVFl5TURJd1EwRXhMVEV1WTNKc01JR0hCZ2dyQmdFRkJRY0IKQVFSN01Ia3dKQVlJS3dZQkJRVUhNQUdHR0doMGRIQTZMeTl2WTNOd0xtUnBaMmxqWlhKMExtTnZiVEJSQmdnckJnRUZCUWN3QW9aRgphSFIwY0RvdkwyTmhZMlZ5ZEhNdVpHbG5hV05sY25RdVkyOXRMMFJwWjJsRFpYSjBSMnh2WW1Gc1J6SlVURk5TVTBGVFNFRXlOVFl5Ck1ESXdRMEV4TFRFdVkzSjBNQXdHQTFVZEV3RUIvd1FDTUFBd2dnRjhCZ29yQmdFRUFkWjVBZ1FDQklJQmJBU0NBV2dCWmdCMUFNOFIKVnU3VkxueXY4NGRiMldrdW0ra2FjV2RLc0Jmc3JBSFNXM2ZPekRzSUFBQUJqTXU3NGdrQUFBUURBRVl3UkFJZ1pZVnl0YXpncG45TQpqVVlrbVE4UnJXVnV4Y2IxVGpxUFFnWFRVeWdWb05jQ0lCSlhsR0czNWFhdDd2cXkrZTBuUjFRakFaa1dyYVNGbHYwcXFBc3BHZVJDCkFIWUFQeGRMVDljaVIxaVVIV1VjaEw0TkV1MlFOMzhmaFdycndiOG9oZXo0Wkc0QUFBR015N3ZoMHdBQUJBTUFSekJGQWlFQS9USFQKaDkwTTc1dUtlRlJaQTV5SVB5WVVUU3E5V0FaYU9WSVRQQ3BPOGNZQ0lCcjN1VVBldnp4alJCV3J1eHNKeWt6cGJJazBnUVRVMU5jZQo0NzlCMlc3OUFIVUFmVmtlRXVGNEtuc2NZV2Q4WHYzNDBJZGNGS0JPbFo2NUF5L1pEb3d1ZWJnQUFBR015N3ZoeFFBQUJBTUFSakJFCkFpQVdUMnNQZU9HWnN4eWsvZEY3anhyL3daNk1ReDBvZ2JkaWR4bGp1azlzbmdJZ1JKdVRFU2VjelRDWVNqYXV1OGpTS2hEVkJORkwKeTVjVVkvdjJBQlphYXRrd0RRWUpLb1pJaHZjTkFRRUxCUUFEZ2dFQkFBcndDOFNpd3F0NFcvZWwzdEFBdEdVdUlGZ0xwVzhMVXdnbApzaGVOQUhuVDJFN0JYOGt2OGc5eWZrZ0hFT1l0T2toT05aRE1ndmNabmVlaS91ajRQZndldzBiUTcyYjhuSnAvQlpDWmFpLzZGMEZJCkNvY2NNcmJRK2JnNFVCVFJHYmhMZWhrdVpOek5yV3dDU1YxWHgzbWl4b0JVNmUwVFFXTG1uM1EramV5QUg5dFRpcGFTZldmV2xIdzAKaThrMTMweW9rUGhtNnhDU0tvemNXREVWVFZZRUpLRVl1dWVUTitaSlJaRG9LcWwrOGRmcnZVRldjajZNK3ZYdUhFQk9JTlE5ZUs4dwp4aDF1OFg0cUZlTE9yOCtkenRuRDQwNWJ0czV0bzBKU2tiWHhBN3pTQm9ib1dTT1NoZnZmZjJ3dEsvWU5mR284d2tzMGlrelZ5YWNHCjdPND0KPC9kczpYNTA5Q2VydGlmaWNhdGU+PC9kczpYNTA5RGF0YT48L2RzOktleUluZm8+PC9kczpTaWduYXR1cmU+PHNhbWxwOk5hbWVJRFBvbGljeSBGb3JtYXQ9InVybjpvYXNpczpuYW1lczp0YzpTQU1MOjEuMTpuYW1laWQtZm9ybWF0OnVuc3BlY2lmaWVkIi8+PC9zYW1scDpBdXRoblJlcXVlc3Q+</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="RelayState" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">RelayState</stringProp>
                <stringProp name="Argument.value">MzU=</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Sec-Fetch-Mode" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                <stringProp name="Header.value">navigate</stringProp>
              </elementProp>
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">https://login.microfocus.com/</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Site" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                <stringProp name="Header.value">same-site</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Origin" elementType="Header">
                <stringProp name="Header.name">Origin</stringProp>
                <stringProp name="Header.value">https://login.microfocus.com</stringProp>
              </elementProp>
              <elementProp name="Priority" elementType="Header">
                <stringProp name="Header.name">Priority</stringProp>
                <stringProp name="Header.value">u=4</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/png,image/svg+xml,*/*;q=0.8</stringProp>
              </elementProp>
              <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:128.0) Gecko/20100101 Firefox/128.0</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Dest" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                <stringProp name="Header.value">iframe</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/j/collect?v=1&amp;_v=j101&amp;a=2060336775&amp;t=event&amp;ni=0&amp;_s=1&amp;dl=https%3A%2F%2Fwww.microfocus.com%2Fmarketplace%2Fappdelivery%2Fcategory%2Foes&amp;ul=en-us&amp;de=UTF-8&amp;dt=Open%20Enterprise%20Server%20%7C%20Application%20Delivery%20Marketplace%20%7C%20OpenText&amp;sd=24-bit&amp;sr=1536x864&amp;vp=1536x731&amp;je=0&amp;ec=Outbound%20Link%20Click&amp;ea=https%3A%2F%2Fwww.microfocus.com%2Fmarketplace%2Fappdelivery%2Fcategory%2Foes&amp;el=https%3A%2F%2Fwww.microfocus.com%2Fmarketplace%2Fappdelivery%2Fcategory%2Foes%23&amp;_u=QACAAEABAAAAACAAI~&amp;jid=&amp;gjid=&amp;cid=1264267099.1721486760&amp;tid=UA-44010430-10&amp;_gid=675600319.1721486761&amp;_slc=1&amp;gtm=45He47h0n71MXKD45v71343913za200&amp;gcs=G111&amp;gcd=13n3n3n3n5&amp;dma=0&amp;tag_exp=0&amp;z=2111989693-142" enabled="true">
          <stringProp name="HTTPSampler.domain">www.google-analytics.com</stringProp>
          <stringProp name="HTTPSampler.port">443</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.path">/j/collect?v=1&amp;_v=j101&amp;a=2060336775&amp;t=event&amp;ni=0&amp;_s=1&amp;dl=https%3A%2F%2Fwww.microfocus.com%2Fmarketplace%2Fappdelivery%2Fcategory%2Foes&amp;ul=en-us&amp;de=UTF-8&amp;dt=Open%20Enterprise%20Server%20%7C%20Application%20Delivery%20Marketplace%20%7C%20OpenText&amp;sd=24-bit&amp;sr=1536x864&amp;vp=1536x731&amp;je=0&amp;ec=Outbound%20Link%20Click&amp;ea=https%3A%2F%2Fwww.microfocus.com%2Fmarketplace%2Fappdelivery%2Fcategory%2Foes&amp;el=https%3A%2F%2Fwww.microfocus.com%2Fmarketplace%2Fappdelivery%2Fcategory%2Foes%23&amp;_u=QACAAEABAAAAACAAI~&amp;jid=&amp;gjid=&amp;cid=1264267099.1721486760&amp;tid=UA-44010430-10&amp;_gid=675600319.1721486761&amp;_slc=1&amp;gtm=45He47h0n71MXKD45v71343913za200&amp;gcs=G111&amp;gcd=13n3n3n3n5&amp;dma=0&amp;tag_exp=0&amp;z=2111989693</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Sec-Fetch-Mode" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                <stringProp name="Header.value">cors</stringProp>
              </elementProp>
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">https://www.microfocus.com/</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Site" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                <stringProp name="Header.value">cross-site</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Origin" elementType="Header">
                <stringProp name="Header.name">Origin</stringProp>
                <stringProp name="Header.value">https://www.microfocus.com</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">text/plain</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:128.0) Gecko/20100101 Firefox/128.0</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Dest" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                <stringProp name="Header.value">empty</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/collect-134" enabled="true">
          <stringProp name="HTTPSampler.domain">y.clarity.ms</stringProp>
          <stringProp name="HTTPSampler.port">443</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">/collect</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;e&quot;:[&quot;0.7.32&quot;,2,112,142,&quot;iu69ce0l9t&quot;,&quot;dprpjk&quot;,&quot;lkifca&quot;,3,0,0],&quot;a&quot;:[[112,4,1,1536,1037,1536,731,0,0,0,0,0,0],[254,0,1,1,2,419,3,12,4,11,5,2,25,5]],&quot;p&quot;:[[4,5,1,&quot;*D&quot;,&quot;name=html&quot;,&quot;publicId=&quot;,&quot;systemId=&quot;,2,1,&quot;HTML&quot;,&quot;lang=en&quot;,&quot;class=uk-height-1-1 uk-notouch&quot;,3,2,&quot;HEAD&quot;,&quot;*B=https://www.microfocus.com/marketplace/appdelivery/category/oes&quot;,4,2,3,&quot;*T&quot;,&quot;\n    &quot;,5,2,4,&quot;BODY&quot;,&quot;class=uk-height-1-1&quot;,6,3,[19],&quot;\n        &quot;,7,3,6,[19,29],8,3,7,[19,29],9,3,8,[19,29],10,3,9,[19,29],11,3,10,[19,29],12,3,11,[19,29],13,3,12,[19],&quot;\n                            &quot;,14,3,13,[19],&quot;\n        \n        &quot;,15,3,14,&quot;TITLE&quot;,16,3,15,[19],&quot;\n                    &quot;,17,3,16,&quot;LINK&quot;,&quot;rel=icon&quot;,&quot;type=image/x-icon&quot;,&quot;href=https://d3075pyijv0bbs.cloudfront.net/ot_image/favicon.ico&quot;,18,3,17,[19,58],19,3,18,[76],&quot;rel=canonical&quot;,&quot;href=https://www.microfocus.com/marketplace/appdelivery/category/oes&quot;,20,3,19,[19],&quot;\n                                 &quot;,21,3,20,[76],&quot;rel=preload&quot;,&quot;as=font&quot;,&quot;href=https://rsms.me/inter/font-files/Inter-ExtraLightItalic.woff?v=3.19&quot;,&quot;crossorigin=anonymous&quot;,22,3,21,[19,29],23,3,22,[76,99,100],&quot;href=https://rsms.me/inter/font-files/Inter-Bold.woff?v=3.19&quot;,[102],24,3,23,[19,29],25,3,24,[76,99,100],&quot;href=https://rsms.me/inter/font-files/Inter-SemiBold.woff?v=3.19&quot;,[102],26,3,25,[19,29],27,3,26,[76,99,100],&quot;href=https://rsms.me/inter/font-files/Inter-Light.woff?v=3.19&quot;,[102],28,3,27,[19,29],29,3,28,[76],&quot;rel=preconnect&quot;,&quot;href=http://www.googletagmanager.com&quot;,30,3,29,[19],&quot;\n         &quot;,31,3,30,[76],&quot;href=/marketplace/dist/generic.css&quot;,&quot;rel=stylesheet&quot;,&quot;media=all&quot;,32,3,31,[19,29],33,3,32,[76],&quot;href=/marketplace/dist/commons.css&quot;,[153,154],34,3,33,[19],&quot;\n           &quot;,35,3,34,[76],&quot;href=/marketplace/dist/client.css&quot;,[153,154],36,3,35,[19],&quot;\n        \n        \n                \n&quot;,37,3,36,[19],&quot;\n                              &quot;,38,3,37,[76],&quot;href=https://s.go-mpulse.net/boomerang/5KNJK-8UTBJ-V9LAY-HLX72-YR7DF&quot;,[99],&quot;as=script&quot;,39,3,38,&quot;STYLE&quot;,&quot;id=onetrust-style&quot;,&quot;#onetrust-banner-sdk{-ms-text-size-adjust:100%;-webkit-text-size-adjust:100%}#onetrust-banner-sdk .onetrust-vendors-list-handler{cursor:pointer;color:#1f96db;font-size:inherit;font-weight:bold;text-decoration:none;margin-left:5px}#onetrust-banner-sdk .onetrust-vendors-list-handler:hover{color:#1f96db}#onetrust-banner-sdk:focus{outline:2px solid #000;outline-offset:-2px}#onetrust-banner-sdk a:focus{outline:2px solid #000}#onetrust-banner-sdk #onetrust-accept-btn-handler,#onetrust-banner-sdk #onetrust-reject-all-handler,#onetrust-banner-sdk #onetrust-pc-btn-handler{outline-offset:1px}#onetrust-banner-sdk.ot-bnr-w-logo .ot-bnr-logo{height:64px;width:64px}#onetrust-banner-sdk .ot-tcf2-vendor-count.ot-text-bold{font-weight:bold}#onetrust-banner-sdk .ot-close-icon,#onetrust-pc-sdk .ot-close-icon,#ot-sync-ntfy .ot-close-icon{background-size:contain;background-repeat:no-repeat;background-position:center;height:12px;width:12px}#onetrust-banner-sdk .powered-by-logo,#onetrust-banner-sdk .ot-pc-footer-logo a,#onetrust-pc-sdk .powered-by-logo,#onetrust-pc-sdk .ot-pc-footer-logo a,#ot-sync-ntfy .powered-by-logo,#ot-sync-ntfy .ot-pc-footer-logo a{background-size:contain;background-repeat:no-repeat;background-position:center;height:25px;width:152px;display:block;text-decoration:none;font-size:.75em}#onetrust-banner-sdk .powered-by-logo:hover,#onetrust-banner-sdk .ot-pc-footer-logo a:hover,#onetrust-pc-sdk .powered-by-logo:hover,#onetrust-pc-sdk .ot-pc-footer-logo a:hover,#ot-sync-ntfy .powered-by-logo:hover,#ot-sync-ntfy .ot-pc-footer-logo a:hover{color:#565656}#onetrust-banner-sdk h3 *,#onetrust-banner-sdk h4 *,#onetrust-banner-sdk h6 *,#onetrust-banner-sdk button *,#onetrust-banner-sdk a[data-parent-id] *,#onetrust-pc-sdk h3 *,#onetrust-pc-sdk h4 *,#onetrust-pc-sdk h6 *,#onetrust-pc-sdk button *,#onetrust-pc-sdk a[data-parent-id] *,#ot-sync-ntfy h3 *,#ot-sync-ntfy h4 *,#ot-sync-ntfy h6 *,#ot-sync-ntfy button *,#ot-sync-ntfy a[data-parent-id] *{font-size:inherit;font-weight:inherit;color:inherit}#onetrust-banner-sdk .ot-hide,#onetrust-pc-sdk .ot-hide,#ot-sync-ntfy .ot-hide{display:none !important}#onetrust-banner-sdk button.ot-link-btn:hover,#onetrust-pc-sdk button.ot-link-btn:hover,#ot-sync-ntfy button.ot-link-btn:hover{text-decoration:underline;opacity:1}#onetrust-pc-sdk .ot-sdk-row .ot-sdk-column{padding:0}#onetrust-pc-sdk .ot-sdk-container{padding-right:0}#onetrust-pc-sdk .ot-sdk-row{flex-direction:initial;width:100%}#onetrust-pc-sdk [type=checkbox]:checked,#onetrust-pc-sdk [type=checkbox]:not(:checked){pointer-events:initial}#onetrust-pc-sdk [type=checkbox]:disabled+label::before,#onetrust-pc-sdk [type=checkbox]:disabled+label:after,#onetrust-pc-sdk [type=checkbox]:disabled+label{pointer-events:none;opacity:.7}#onetrust-pc-sdk #vendor-list-content{transform:translate3d(0, 0, 0)}#onetrust-pc-sdk li input[type=checkbox]{z-index:1}#onetrust-pc-sdk li .ot-checkbox label{z-index:2}#onetrust-pc-sdk li .ot-checkbox input[type=checkbox]{height:auto;width:auto}#onetrust-pc-sdk li .host-title a,#onetrust-pc-sdk li .ot-host-name a,#onetrust-pc-sdk li .accordion-text,#onetrust-pc-sdk li .ot-acc-txt{z-index:2;position:relative}#onetrust-pc-sdk input{margin:3px .1ex}#onetrust-pc-sdk .pc-logo,#onetrust-pc-sdk .ot-pc-logo{height:60px;width:180px;background-position:center;background-size:contain;background-repeat:no-repeat;display:inline-flex;justify-content:center;align-items:center}#onetrust-pc-sdk .pc-logo img,#onetrust-pc-sdk .ot-pc-logo img{max-height:100%;max-width:100%}#onetrust-pc-sdk .screen-reader-only,#onetrust-pc-sdk .ot-scrn-rdr,.ot-sdk-cookie-policy .screen-reader-only,.ot-sdk-cookie-policy .ot-scrn-rdr{border:0;clip:rect(0 0 0 0);height:1px;margin:-1px;overflow:hidden;padding:0;position:absolute;width:1px}#onetrust-pc-sdk.ot-fade-in,.onetrust-pc-dark-filter.ot-fade-in,#onetrust-banner-sdk.ot-fade-in{animation-name:onetrust-fade-in;animation-duration:400ms;animation-timing-function:ease-in-out}#onetrust-pc-sdk.ot-hide{display:none !important}.onetrust-pc-dark-filter.ot-hide{display:none !important}#ot-sdk-btn.ot-sdk-show-settings,#ot-sdk-btn.optanon-show-settings{color:#68b631;border:1px solid #68b631;height:auto;white-space:normal;word-wrap:break-word;padding:.8em 2em;font-size:.8em;line-height:1.2;cursor:pointer;-moz-transition:.1s ease;-o-transition:.1s ease;-webkit-transition:1s ease;transition:.1s ease}#ot-sdk-btn.ot-sdk-show-settings:hover,#ot-sdk-btn.optanon-show-settings:hover{color:#fff;background-color:#68b631}.onetrust-pc-dark-filter{background:rgba(0,0,0,.5);z-index:2147483646;width:100%;height:100%;overflow:hidden;position:fixed;top:0;bottom:0;left:0}@keyframes onetrust-fade-in{0%{opacity:0}100%{opacity:1}}.ot-cookie-label{text-decoration:underline}@media only screen and (min-width: 426px)and (max-width: 896px)and (orientation: landscape){#onetrust-pc-sdk p{font-size:.75em}}#onetrust-banner-sdk .banner-option-input:focus+label{outline:1px solid #000;outline-style:auto}.category-vendors-list-handler+a:focus,.category-vendors-list-handler+a:focus-visible{outline:2px solid #000}#onetrust-pc-sdk .ot-userid-title{margin-top:10px}#onetrust-pc-sdk .ot-userid-title&gt;span,#onetrust-pc-sdk .ot-userid-timestamp&gt;span{font-weight:700}#onetrust-pc-sdk .ot-userid-desc{font-style:italic}#onetrust-pc-sdk .ot-host-desc a{pointer-events:initial}#onetrust-pc-sdk .ot-ven-hdr&gt;p a{position:relative;z-index:2;pointer-events:initial}#onetrust-pc-sdk .ot-vnd-serv .ot-vnd-item .ot-vnd-info a,#onetrust-pc-sdk .ot-vs-list .ot-vnd-item .ot-vnd-info a{margin-right:auto}#onetrust-pc-sdk .ot-pc-footer-logo img{width:136px;height:16px}#onetrust-pc-sdk .ot-pur-vdr-count{font-weight:400;font-size:.7rem;padding-top:3px;display:block}#onetrust-banner-sdk .ot-optout-signal,#onetrust-pc-sdk .ot-optout-signal{border:1px solid #32ae88;border-radius:3px;padding:5px;margin-bottom:10px;background-color:#f9fffa;font-size:.85rem;line-height:2}#onetrust-banner-sdk .ot-optout-signal .ot-optout-icon,#onetrust-pc-sdk .ot-optout-signal .ot-optout-icon{display:inline;margin-right:5px}#onetrust-banner-sdk .ot-optout-signal svg,#onetrust-pc-sdk .ot-optout-signal svg{height:20px;width:30px;transform:scale(0.5)}#onetrust-banner-sdk .ot-optout-signal svg path,#onetrust-pc-sdk .ot-optout-signal svg path{fill:#32ae88}#onetrust-consent-sdk .ot-general-modal{overflow:hidden;position:fixed;margin:0 auto;top:50%;left:50%;width:40%;padding:1.5rem;max-width:575px;min-width:575px;z-index:2147483647;border-radius:2.5px;transform:translate(-50%, -50%)}#onetrust-consent-sdk .ot-signature-health-group{margin-top:1rem;padding-left:1.25rem;padding-right:1.25rem;margin-bottom:.625rem;width:calc(100% - 2.5rem)}#onetrust-consent-sdk .ot-signature-health-group .ot-signature-health-form{gap:.5rem}#onetrust-consent-sdk .ot-signature-health .ot-signature-health-form{width:70%;gap:.35rem}#onetrust-consent-sdk .ot-signature-health .ot-signature-input{height:38px;padding:6px 10px;background-color:#fff;border:1px solid #d1d1d1;border-radius:4px;box-shadow:none;box-sizing:border-box}#onetrust-consent-sdk .ot-signature-health .ot-signature-subtitle{font-size:1.125rem}#onetrust-consent-sdk .ot-signature-health .ot-signature-group-title{font-size:1.125rem;font-weight:bold}#onetrust-consent-sdk .ot-signature-health,#onetrust-consent-sdk .ot-signature-health-group{display:flex;flex-direction:column;gap:1rem}#onetrust-consent-sdk .ot-signature-health .ot-signature-cont,#onetrust-consent-sdk .ot-signature-health-group .ot-signature-cont{display:flex;flex-direction:column;gap:.25rem}#onetrust-consent-sdk .ot-signature-health .ot-signarure-paragraph,#onetrust-consent-sdk .ot-signature-health-group .ot-signarure-paragraph{margin:0;line-height:20px;font-size:max(14px,.875rem)}#onetrust-consent-sdk .ot-signature-health .ot-health-signature-error,#onetrust-consent-sdk .ot-signature-health-group .ot-health-signature-error{color:#4d4d4d;font-size:min(12px,.75rem)}#onetrust-consent-sdk .ot-signature-health .ot-signature-buttons-cont,#onetrust-consent-sdk .ot-signature-health-group .ot-signature-buttons-cont{margin-top:max(.75rem,2%);gap:1rem;display:flex;justify-content:flex-end}#onetrust-consent-sdk .ot-signature-health .ot-signature-button,#onetrust-consent-sdk .ot-signature-health-group .ot-signature-button{flex:1;height:auto;color:#fff;cursor:pointer;line-height:1.2;min-width:125px;font-weight:600;font-size:.813em;border-radius:2px;padding:12px 10px;white-space:normal;word-wrap:break-word;word-break:break-word;background-color:#68b631;border:2px solid #68b631}#onetrust-consent-sdk .ot-signature-health .ot-signature-button.reject,#onetrust-consent-sdk .ot-signature-health-group .ot-signature-button.reject{background-color:#fff}#onetrust-consent-sdk .ot-input-field-cont{display:flex;flex-direction:column;gap:.5rem}#onetrust-consent-sdk .ot-input-field-cont .ot-signature-input{width:65%}#onetrust-consent-sdk .ot-signature-health-form{display:flex;flex-direction:column}#onetrust-consent-sdk .ot-signature-health-form .ot-signature-label{margin-bottom:0;line-height:20px;font-size:max(14px,.875rem)}@media only screen and (max-width: 600px){#onetrust-consent-sdk .ot-general-modal{min-width:100%}#onetrust-consent-sdk .ot-signature-health .ot-signature-health-form{width:100%}#onetrust-consent-sdk .ot-input-field-cont .ot-signature-input{width:100%}}#onetrust-banner-sdk,#onetrust-pc-sdk,#ot-sdk-cookie-policy,#ot-sync-ntfy{font-size:16px}#onetrust-banner-sdk *,#onetrust-banner-sdk ::after,#onetrust-banner-sdk ::before,#onetrust-pc-sdk *,#onetrust-pc-sdk ::after,#onetrust-pc-sdk ::before,#ot-sdk-cookie-policy *,#ot-sdk-cookie-policy ::after,#ot-sdk-cookie-policy ::before,#ot-sync-ntfy *,#ot-sync-ntfy ::after,#ot-sync-ntfy ::before{-webkit-box-sizing:content-box;-moz-box-sizing:content-box;box-sizing:content-box}#onetrust-banner-sdk div,#onetrust-banner-sdk span,#onetrust-banner-sdk h1,#onetrust-banner-sdk h2,#onetrust-banner-sdk h3,#onetrust-banner-sdk h4,#onetrust-banner-sdk h5,#onetrust-banner-sdk h6,#onetrust-banner-sdk p,#onetrust-banner-sdk img,#onetrust-banner-sdk svg,#onetrust-banner-sdk button,#onetrust-banner-sdk section,#onetrust-banner-sdk a,#onetrust-banner-sdk label,#onetrust-banner-sdk input,#onetrust-banner-sdk ul,#onetrust-banner-sdk li,#onetrust-banner-sdk nav,#onetrust-banner-sdk table,#onetrust-banner-sdk thead,#onetrust-banner-sdk tr,#onetrust-banner-sdk td,#onetrust-banner-sdk tbody,#onetrust-banner-sdk .ot-main-content,#onetrust-banner-sdk .ot-toggle,#onetrust-banner-sdk #ot-content,#onetrust-banner-sdk #ot-pc-content,#onetrust-banner-sdk .checkbox,#onetrust-pc-sdk div,#onetrust-pc-sdk span,#onetrust-pc-sdk h1,#onetrust-pc-sdk h2,#onetrust-pc-sdk h3,#onetrust-pc-sdk h4,#onetrust-pc-sdk h5,#onetrust-pc-sdk h6,#onetrust-pc-sdk p,#onetrust-pc-sdk img,#onetrust-pc-sdk svg,#onetrust-pc-sdk button,#onetrust-pc-sdk section,#onetrust-pc-sdk a,#onetrust-pc-sdk label,#onetrust-pc-sdk input,#onetrust-pc-sdk ul,#onetrust-pc-sdk li,#onetrust-pc-sdk nav,#onetrust-pc-sdk table,#onetrust-pc-sdk thead,#onetrust-pc-sdk tr,#onetrust-pc-sdk td,#onetrust-pc-sdk tbody,#onetrust-pc-sdk .ot-main-content,#onetrust-pc-sdk .ot-toggle,#onetrust-pc-sdk #ot-content,#onetrust-pc-sdk #ot-pc-content,#onetrust-pc-sdk .checkbox,#ot-sdk-cookie-policy div,#ot-sdk-cookie-policy span,#ot-sdk-cookie-policy h1,#ot-sdk-cookie-policy h2,#ot-sdk-cookie-policy h3,#ot-sdk-cookie-policy h4,#ot-sdk-cookie-policy h5,#ot-sdk-cookie-policy h6,#ot-sdk-cookie-policy p,#ot-sdk-cookie-policy img,#ot-sdk-cookie-policy svg,#ot-sdk-cookie-policy button,#ot-sdk-cookie-policy section,#ot-sdk-cookie-policy a,#ot-sdk-cookie-policy label,#ot-sdk-cookie-policy input,#ot-sdk-cookie-policy ul,#ot-sdk-cookie-policy li,#ot-sdk-cookie-policy nav,#ot-sdk-cookie-policy table,#ot-sdk-cookie-policy thead,#ot-sdk-cookie-policy tr,#ot-sdk-cookie-policy td,#ot-sdk-cookie-policy tbody,#ot-sdk-cookie-policy .ot-main-content,#ot-sdk-cookie-policy .ot-toggle,#ot-sdk-cookie-policy #ot-content,#ot-sdk-cookie-policy #ot-pc-content,#ot-sdk-cookie-policy .checkbox,#ot-sync-ntfy div,#ot-sync-ntfy span,#ot-sync-ntfy h1,#ot-sync-ntfy h2,#ot-sync-ntfy h3,#ot-sync-ntfy h4,#ot-sync-ntfy h5,#ot-sync-ntfy h6,#ot-sync-ntfy p,#ot-sync-ntfy img,#ot-sync-ntfy svg,#ot-sync-ntfy button,#ot-sync-ntfy section,#ot-sync-ntfy a,#ot-sync-ntfy label,#ot-sync-ntfy input,#ot-sync-ntfy ul,#ot-sync-ntfy li,#ot-sync-ntfy nav,#ot-sync-ntfy table,#ot-sync-ntfy thead,#ot-sync-ntfy tr,#ot-sync-ntfy td,#ot-sync-ntfy tbody,#ot-sync-ntfy .ot-main-content,#ot-sync-ntfy .ot-toggle,#ot-sync-ntfy #ot-content,#ot-sync-ntfy #ot-pc-content,#ot-sync-ntfy .checkbox{font-family:inherit;font-weight:normal;-webkit-font-smoothing:auto;letter-spacing:normal;line-height:normal;padding:0;margin:0;height:auto;min-height:0;max-height:none;width:auto;min-width:0;max-width:none;border-radius:0;border:none;clear:none;float:none;position:static;bottom:auto;left:auto;right:auto;top:auto;text-align:left;text-decoration:none;text-indent:0;text-shadow:none;text-transform:none;white-space:normal;background:none;overflow:visible;vertical-align:baseline;visibility:visible;z-index:auto;box-shadow:none}#onetrust-banner-sdk label:before,#onetrust-banner-sdk label:after,#onetrust-banner-sdk .checkbox:after,#onetrust-banner-sdk .checkbox:before,#onetrust-pc-sdk label:before,#onetrust-pc-sdk label:after,#onetrust-pc-sdk .checkbox:after,#onetrust-pc-sdk .checkbox:before,#ot-sdk-cookie-policy label:before,#ot-sdk-cookie-policy label:after,#ot-sdk-cookie-policy .checkbox:after,#ot-sdk-cookie-policy .checkbox:before,#ot-sync-ntfy label:before,#ot-sync-ntfy label:after,#ot-sync-ntfy .checkbox:after,#ot-sync-ntfy .checkbox:before{content:\&quot;\&quot;;content:none}#onetrust-banner-sdk .ot-sdk-container,#onetrust-pc-sdk .ot-sdk-container,#ot-sdk-cookie-policy .ot-sdk-container{position:relative;width:100%;max-width:100%;margin:0 auto;padding:0 20px;box-sizing:border-box}#onetrust-banner-sdk .ot-sdk-column,#onetrust-banner-sdk .ot-sdk-columns,#onetrust-pc-sdk .ot-sdk-column,#onetrust-pc-sdk .ot-sdk-columns,#ot-sdk-cookie-policy .ot-sdk-column,#ot-sdk-cookie-policy .ot-sdk-columns{width:100%;float:left;box-sizing:border-box;padding:0;display:initial}@media(min-width: 400px){#onetrust-banner-sdk .ot-sdk-container,#onetrust-pc-sdk .ot-sdk-container,#ot-sdk-cookie-policy .ot-sdk-container{width:90%;padding:0}}@media(min-width: 550px){#onetrust-banner-sdk .ot-sdk-container,#onetrust-pc-sdk .ot-sdk-container,#ot-sdk-cookie-policy .ot-sdk-container{width:100%}#onetrust-banner-sdk .ot-sdk-column,#onetrust-banner-sdk .ot-sdk-columns,#onetrust-pc-sdk .ot-sdk-column,#onetrust-pc-sdk .ot-sdk-columns,#ot-sdk-cookie-policy .ot-sdk-column,#ot-sdk-cookie-policy .ot-sdk-columns{margin-left:4%}#onetrust-banner-sdk .ot-sdk-column:first-child,#onetrust-banner-sdk .ot-sdk-columns:first-child,#onetrust-pc-sdk .ot-sdk-column:first-child,#onetrust-pc-sdk .ot-sdk-columns:first-child,#ot-sdk-cookie-policy .ot-sdk-column:first-child,#ot-sdk-cookie-policy .ot-sdk-columns:first-child{margin-left:0}#onetrust-banner-sdk .ot-sdk-two.ot-sdk-columns,#onetrust-pc-sdk .ot-sdk-two.ot-sdk-columns,#ot-sdk-cookie-policy .ot-sdk-two.ot-sdk-columns{width:13.3333333333%}#onetrust-banner-sdk .ot-sdk-three.ot-sdk-columns,#onetrust-pc-sdk .ot-sdk-three.ot-sdk-columns,#ot-sdk-cookie-policy .ot-sdk-three.ot-sdk-columns{width:22%}#onetrust-banner-sdk .ot-sdk-four.ot-sdk-columns,#onetrust-pc-sdk .ot-sdk-four.ot-sdk-columns,#ot-sdk-cookie-policy .ot-sdk-four.ot-sdk-columns{width:30.6666666667%}#onetrust-banner-sdk .ot-sdk-eight.ot-sdk-columns,#onetrust-pc-sdk .ot-sdk-eight.ot-sdk-columns,#ot-sdk-cookie-policy .ot-sdk-eight.ot-sdk-columns{width:65.3333333333%}#onetrust-banner-sdk .ot-sdk-nine.ot-sdk-columns,#onetrust-pc-sdk .ot-sdk-nine.ot-sdk-columns,#ot-sdk-cookie-policy .ot-sdk-nine.ot-sdk-columns{width:74%}#onetrust-banner-sdk .ot-sdk-ten.ot-sdk-columns,#onetrust-pc-sdk .ot-sdk-ten.ot-sdk-columns,#ot-sdk-cookie-policy .ot-sdk-ten.ot-sdk-columns{width:82.6666666667%}#onetrust-banner-sdk .ot-sdk-eleven.ot-sdk-columns,#onetrust-pc-sdk .ot-sdk-eleven.ot-sdk-columns,#ot-sdk-cookie-policy .ot-sdk-eleven.ot-sdk-columns{width:91.3333333333%}#onetrust-banner-sdk .ot-sdk-twelve.ot-sdk-columns,#onetrust-pc-sdk .ot-sdk-twelve.ot-sdk-columns,#ot-sdk-cookie-policy .ot-sdk-twelve.ot-sdk-columns{width:100%;margin-left:0}}#onetrust-banner-sdk h1,#onetrust-banner-sdk h2,#onetrust-banner-sdk h3,#onetrust-banner-sdk h4,#onetrust-banner-sdk h5,#onetrust-banner-sdk h6,#onetrust-pc-sdk h1,#onetrust-pc-sdk h2,#onetrust-pc-sdk h3,#onetrust-pc-sdk h4,#onetrust-pc-sdk h5,#onetrust-pc-sdk h6,#ot-sdk-cookie-policy h1,#ot-sdk-cookie-policy h2,#ot-sdk-cookie-policy h3,#ot-sdk-cookie-policy h4,#ot-sdk-cookie-policy h5,#ot-sdk-cookie-policy h6{margin-top:0;font-weight:600;font-family:inherit}#onetrust-banner-sdk h1,#onetrust-pc-sdk h1,#ot-sdk-cookie-policy h1{font-size:1.5rem;line-height:1.2}#onetrust-banner-sdk h2,#onetrust-pc-sdk h2,#ot-sdk-cookie-policy h2{font-size:1.5rem;line-height:1.25}#onetrust-banner-sdk h3,#onetrust-pc-sdk h3,#ot-sdk-cookie-policy h3{font-size:1.5rem;line-height:1.3}#onetrust-banner-sdk h4,#onetrust-pc-sdk h4,#ot-sdk-cookie-policy h4{font-size:1.5rem;line-height:1.35}#onetrust-banner-sdk h5,#onetrust-pc-sdk h5,#ot-sdk-cookie-policy h5{font-size:1.5rem;line-height:1.5}#onetrust-banner-sdk h6,#onetrust-pc-sdk h6,#ot-sdk-cookie-policy h6{font-size:1.5rem;line-height:1.6}@media(min-width: 550px){#onetrust-banner-sdk h1,#onetrust-pc-sdk h1,#ot-sdk-cookie-policy h1{font-size:1.5rem}#onetrust-banner-sdk h2,#onetrust-pc-sdk h2,#ot-sdk-cookie-policy h2{font-size:1.5rem}#onetrust-banner-sdk h3,#onetrust-pc-sdk h3,#ot-sdk-cookie-policy h3{font-size:1.5rem}#onetrust-banner-sdk h4,#onetrust-pc-sdk h4,#ot-sdk-cookie-policy h4{font-size:1.5rem}#onetrust-banner-sdk h5,#onetrust-pc-sdk h5,#ot-sdk-cookie-policy h5{font-size:1.5rem}#onetrust-banner-sdk h6,#onetrust-pc-sdk h6,#ot-sdk-cookie-policy h6{font-size:1.5rem}}#onetrust-banner-sdk p,#onetrust-pc-sdk p,#ot-sdk-cookie-policy p{margin:0 0 1em 0;font-family:inherit;line-height:normal}#onetrust-banner-sdk a,#onetrust-pc-sdk a,#ot-sdk-cookie-policy a{color:#565656;text-decoration:underline}#onetrust-banner-sdk a:hover,#onetrust-pc-sdk a:hover,#ot-sdk-cookie-policy a:hover{color:#565656;text-decoration:none}#onetrust-banner-sdk .ot-sdk-button,#onetrust-banner-sdk button,#onetrust-pc-sdk .ot-sdk-button,#onetrust-pc-sdk button,#ot-sdk-cookie-policy .ot-sdk-button,#ot-sdk-cookie-policy button{margin-bottom:1rem;font-family:inherit}#onetrust-banner-sdk .ot-sdk-button,#onetrust-banner-sdk button,#onetrust-pc-sdk .ot-sdk-button,#onetrust-pc-sdk button,#ot-sdk-cookie-policy .ot-sdk-button,#ot-sdk-cookie-policy button{display:inline-block;height:38px;padding:0 30px;color:#555;text-align:center;font-size:.9em;font-weight:400;line-height:38px;letter-spacing:.01em;text-decoration:none;white-space:nowrap;background-color:rgba(0,0,0,0);border-radius:2px;border:1px solid #bbb;cursor:pointer;box-sizing:border-box}#onetrust-banner-sdk .ot-sdk-button:hover,#onetrust-banner-sdk :not(.ot-leg-btn-container)&gt;button:not(.ot-link-btn):hover,#onetrust-banner-sdk :not(.ot-leg-btn-container)&gt;button:not(.ot-link-btn):focus,#onetrust-pc-sdk .ot-sdk-button:hover,#onetrust-pc-sdk :not(.ot-leg-btn-container)&gt;button:not(.ot-link-btn):hover,#onetrust-pc-sdk :not(.ot-leg-btn-container)&gt;button:not(.ot-link-btn):focus,#ot-sdk-cookie-policy .ot-sdk-button:hover,#ot-sdk-cookie-policy :not(.ot-leg-btn-container)&gt;button:not(.ot-link-btn):hover,#ot-sdk-cookie-policy :not(.ot-leg-btn-container)&gt;button:not(.ot-link-btn):focus{color:#333;border-color:#888;opacity:.7}#onetrust-banner-sdk .ot-sdk-button:focus,#onetrust-banner-sdk :not(.ot-leg-btn-container)&gt;button:focus,#onetrust-pc-sdk .ot-sdk-button:focus,#onetrust-pc-sdk :not(.ot-leg-btn-container)&gt;button:focus,#ot-sdk-cookie-policy .ot-sdk-button:focus,#ot-sdk-cookie-policy :not(.ot-leg-btn-container)&gt;button:focus{outline:2px solid #000}#onetrust-banner-sdk .ot-sdk-button.ot-sdk-button-primary,#onetrust-banner-sdk button.ot-sdk-button-primary,#onetrust-banner-sdk input[type=submit].ot-sdk-button-primary,#onetrust-banner-sdk input[type=reset].ot-sdk-button-primary,#onetrust-banner-sdk input[type=button].ot-sdk-button-primary,#onetrust-pc-sdk .ot-sdk-button.ot-sdk-button-primary,#onetrust-pc-sdk button.ot-sdk-button-primary,#onetrust-pc-sdk input[type=submit].ot-sdk-button-primary,#onetrust-pc-sdk input[type=reset].ot-sdk-button-primary,#onetrust-pc-sdk input[type=button].ot-sdk-button-primary,#ot-sdk-cookie-policy .ot-sdk-button.ot-sdk-button-primary,#ot-sdk-cookie-policy button.ot-sdk-button-primary,#ot-sdk-cookie-policy input[type=submit].ot-sdk-button-primary,#ot-sdk-cookie-policy input[type=reset].ot-sdk-button-primary,#ot-sdk-cookie-policy input[type=button].ot-sdk-button-primary{color:#fff;background-color:#33c3f0;border-color:#33c3f0}#onetrust-banner-sdk .ot-sdk-button.ot-sdk-button-primary:hover,#onetrust-banner-sdk button.ot-sdk-button-primary:hover,#onetrust-banner-sdk input[type=submit].ot-sdk-button-primary:hover,#onetrust-banner-sdk input[type=reset].ot-sdk-button-primary:hover,#onetrust-banner-sdk input[type=button].ot-sdk-button-primary:hover,#onetrust-banner-sdk .ot-sdk-button.ot-sdk-button-primary:focus,#onetrust-banner-sdk button.ot-sdk-button-primary:focus,#onetrust-banner-sdk input[type=submit].ot-sdk-button-primary:focus,#onetrust-banner-sdk input[type=reset].ot-sdk-button-primary:focus,#onetrust-banner-sdk input[type=button].ot-sdk-button-primary:focus,#onetrust-pc-sdk .ot-sdk-button.ot-sdk-button-primary:hover,#onetrust-pc-sdk button.ot-sdk-button-primary:hover,#onetrust-pc-sdk input[type=submit].ot-sdk-button-primary:hover,#onetrust-pc-sdk input[type=reset].ot-sdk-button-primary:hover,#onetrust-pc-sdk input[type=button].ot-sdk-button-primary:hover,#onetrust-pc-sdk .ot-sdk-button.ot-sdk-button-primary:focus,#onetrust-pc-sdk button.ot-sdk-button-primary:focus,#onetrust-pc-sdk input[type=submit].ot-sdk-button-primary:focus,#onetrust-pc-sdk input[type=reset].ot-sdk-button-primary:focus,#onetrust-pc-sdk input[type=button].ot-sdk-button-primary:focus,#ot-sdk-cookie-policy .ot-sdk-button.ot-sdk-button-primary:hover,#ot-sdk-cookie-policy button.ot-sdk-button-primary:hover,#ot-sdk-cookie-policy input[type=submit].ot-sdk-button-primary:hover,#ot-sdk-cookie-policy input[type=reset].ot-sdk-button-primary:hover,#ot-sdk-cookie-policy input[type=button].ot-sdk-button-primary:hover,#ot-sdk-cookie-policy .ot-sdk-button.ot-sdk-button-primary:focus,#ot-sdk-cookie-policy button.ot-sdk-button-primary:focus,#ot-sdk-cookie-policy input[type=submit].ot-sdk-button-primary:focus,#ot-sdk-cookie-policy input[type=reset].ot-sdk-button-primary:focus,#ot-sdk-cookie-policy input[type=button].ot-sdk-button-primary:focus{color:#fff;background-color:#1eaedb;border-color:#1eaedb}#onetrust-banner-sdk input[type=text],#onetrust-pc-sdk input[type=text],#ot-sdk-cookie-policy input[type=text]{height:38px;padding:6px 10px;background-color:#fff;border:1px solid #d1d1d1;border-radius:4px;box-shadow:none;box-sizing:border-box}#onetrust-banner-sdk input[type=text],#onetrust-pc-sdk input[type=text],#ot-sdk-cookie-policy input[type=text]{-webkit-appearance:none;-moz-appearance:none;appearance:none}#onetrust-banner-sdk input[type=text]:focus,#onetrust-pc-sdk input[type=text]:focus,#ot-sdk-cookie-policy input[type=text]:focus{border:1px solid #000;outline:0}#onetrust-banner-sdk label,#onetrust-pc-sdk label,#ot-sdk-cookie-policy label{display:block;margin-bottom:.5rem;font-weight:600}#onetrust-banner-sdk input[type=checkbox],#onetrust-pc-sdk input[type=checkbox],#ot-sdk-cookie-policy input[type=checkbox]{display:inline}#onetrust-banner-sdk ul,#onetrust-pc-sdk ul,#ot-sdk-cookie-policy ul{list-style:circle inside}#onetrust-banner-sdk ul,#onetrust-pc-sdk ul,#ot-sdk-cookie-policy ul{padding-left:0;margin-top:0}#onetrust-banner-sdk ul ul,#onetrust-pc-sdk ul ul,#ot-sdk-cookie-policy ul ul{margin:1.5rem 0 1.5rem 3rem;font-size:90%}#onetrust-banner-sdk li,#onetrust-pc-sdk li,#ot-sdk-cookie-policy li{margin-bottom:1rem}#onetrust-banner-sdk th,#onetrust-banner-sdk td,#onetrust-pc-sdk th,#onetrust-pc-sdk td,#ot-sdk-cookie-policy th,#ot-sdk-cookie-policy td{padding:12px 15px;text-align:left;border-bottom:1px solid #e1e1e1}#onetrust-banner-sdk button,#onetrust-pc-sdk button,#ot-sdk-cookie-policy button{margin-bottom:1rem;font-family:inherit}#onetrust-banner-sdk .ot-sdk-container:after,#onetrust-banner-sdk .ot-sdk-row:after,#onetrust-pc-sdk .ot-sdk-container:after,#onetrust-pc-sdk .ot-sdk-row:after,#ot-sdk-cookie-policy .ot-sdk-container:after,#ot-sdk-cookie-policy .ot-sdk-row:after{content:\&quot;\&quot;;display:table;clear:both}#onetrust-banner-sdk .ot-sdk-row,#onetrust-pc-sdk .ot-sdk-row,#ot-sdk-cookie-policy .ot-sdk-row{margin:0;max-width:none;display:block}#onetrust-banner-sdk{box-shadow:0 0 18px rgba(0,0,0,.2)}#onetrust-banner-sdk.otFlat{position:fixed;z-index:2147483645;bottom:0;right:0;left:0;background-color:#fff;max-height:90%;overflow-x:hidden;overflow-y:auto}#onetrust-banner-sdk.otFlat.top{top:0px;bottom:auto}#onetrust-banner-sdk.otRelFont{font-size:1rem}#onetrust-banner-sdk&gt;.ot-sdk-container{overflow:hidden}#onetrust-banner-sdk::-webkit-scrollbar{width:11px}#onetrust-banner-sdk::-webkit-scrollbar-thumb{border-radius:10px;background:#c1c1c1}#onetrust-banner-sdk{scrollbar-arrow-color:#c1c1c1;scrollbar-darkshadow-color:#c1c1c1;scrollbar-face-color:#c1c1c1;scrollbar-shadow-color:#c1c1c1}#onetrust-banner-sdk #onetrust-policy{margin:1.25em 0 .625em 2em;overflow:hidden}#onetrust-banner-sdk #onetrust-policy .ot-gv-list-handler{float:left;font-size:.82em;padding:0;margin-bottom:0;border:0;line-height:normal;height:auto;width:auto}#onetrust-banner-sdk #onetrust-policy-title{font-size:1.2em;line-height:1.3;margin-bottom:10px}#onetrust-banner-sdk #onetrust-policy-text{clear:both;text-align:left;font-size:.88em;line-height:1.4}#onetrust-banner-sdk #onetrust-policy-text *{font-size:inherit;line-height:inherit}#onetrust-banner-sdk #onetrust-policy-text a{font-weight:bold;margin-left:5px}#onetrust-banner-sdk #onetrust-policy-title,#onetrust-banner-sdk #onetrust-policy-text{color:dimgray;float:left}#onetrust-banner-sdk #onetrust-button-group-parent{min-height:1px;text-align:center}#onetrust-banner-sdk #onetrust-button-group{display:inline-block}#onetrust-banner-sdk #onetrust-accept-btn-handler,#onetrust-banner-sdk #onetrust-reject-all-handler,#onetrust-banner-sdk #onetrust-pc-btn-handler{background-color:#68b631;color:#fff;border-color:#68b631;margin-right:1em;min-width:125px;height:auto;white-space:normal;word-break:break-word;word-wrap:break-word;padding:12px 10px;line-height:1.2;font-size:.813em;font-weight:600}#onetrust-banner-sdk #onetrust-pc-btn-handler.cookie-setting-link{background-color:#fff;border:none;color:#68b631;text-decoration:underline;padding-left:0;padding-right:0}#onetrust-banner-sdk .onetrust-close-btn-ui{width:44px;height:44px;background-size:12px;border:none;position:relative;margin:auto;padding:0}#onetrust-banner-sdk .banner_logo{display:none}#onetrust-banner-sdk.ot-bnr-w-logo .ot-bnr-logo{position:absolute;top:50%;transform:translateY(-50%);left:0px}#onetrust-banner-sdk.ot-bnr-w-logo #onetrust-policy{margin-left:65px}#onetrust-banner-sdk .ot-b-addl-desc{clear:both;float:left;display:block}#onetrust-banner-sdk #banner-options{float:left;display:table;margin-right:0;margin-left:1em;width:calc(100% - 1em)}#onetrust-banner-sdk .banner-option-input{cursor:pointer;width:auto;height:auto;border:none;padding:0;padding-right:3px;margin:0 0 10px;font-size:.82em;line-height:1.4}#onetrust-banner-sdk .banner-option-input *{pointer-events:none;font-size:inherit;line-height:inherit}#onetrust-banner-sdk .banner-option-input[aria-expanded=true]~.banner-option-details{display:block;height:auto}#onetrust-banner-sdk .banner-option-input[aria-expanded=true] .ot-arrow-container{transform:rotate(90deg)}#onetrust-banner-sdk .banner-option{margin-bottom:12px;margin-left:0;border:none;float:left;padding:0}#onetrust-banner-sdk .banner-option:first-child{padding-left:2px}#onetrust-banner-sdk .banner-option:not(:first-child){padding:0;border:none}#onetrust-banner-sdk .banner-option-header{cursor:pointer;display:inline-block}#onetrust-banner-sdk .banner-option-header :first-child{color:dimgray;font-weight:bold;float:left}#onetrust-banner-sdk .banner-option-header .ot-arrow-container{display:inline-block;border-top:6px solid rgba(0,0,0,0);border-bottom:6px solid rgba(0,0,0,0);border-left:6px solid dimgray;margin-left:10px;vertical-align:middle}#onetrust-banner-sdk .banner-option-details{display:none;font-size:.83em;line-height:1.5;padding:10px 0px 5px 10px;margin-right:10px;height:0px}#onetrust-banner-sdk .banner-option-details *{font-size:inherit;line-height:inherit;color:dimgray}#onetrust-banner-sdk .ot-arrow-container,#onetrust-banner-sdk .banner-option-details{transition:all 300ms ease-in 0s;-webkit-transition:all 300ms ease-in 0s;-moz-transition:all 300ms ease-in 0s;-o-transition:all 300ms ease-in 0s}#onetrust-banner-sdk .ot-dpd-container{float:left}#onetrust-banner-sdk .ot-dpd-title{margin-bottom:10px}#onetrust-banner-sdk .ot-dpd-title,#onetrust-banner-sdk .ot-dpd-desc{font-size:.88em;line-height:1.4;color:dimgray}#onetrust-banner-sdk .ot-dpd-title *,#onetrust-banner-sdk .ot-dpd-desc *{font-size:inherit;line-height:inherit}#onetrust-banner-sdk.ot-iab-2 #onetrust-policy-text *{margin-bottom:0}#onetrust-banner-sdk.ot-iab-2 .onetrust-vendors-list-handler{display:block;margin-left:0;margin-top:5px;clear:both;margin-bottom:0;padding:0;border:0;height:auto;width:auto}#onetrust-banner-sdk.ot-iab-2 #onetrust-button-group button{display:block}#onetrust-banner-sdk.ot-close-btn-link{padding-top:25px}#onetrust-banner-sdk.ot-close-btn-link #onetrust-close-btn-container{top:15px;transform:none;right:15px}#onetrust-banner-sdk.ot-close-btn-link #onetrust-close-btn-container button{padding:0;white-space:pre-wrap;border:none;height:auto;line-height:1.5;text-decoration:underline;font-size:.69em}#onetrust-banner-sdk #onetrust-policy-text,#onetrust-banner-sdk .ot-dpd-desc,#onetrust-banner-sdk .ot-b-addl-desc{font-size:.813em;line-height:1.5}#onetrust-banner-sdk .ot-dpd-desc{margin-bottom:10px}#onetrust-banner-sdk .ot-dpd-desc&gt;.ot-b-addl-desc{margin-top:10px;margin-bottom:10px;font-size:1em}@media only screen and (max-width: 425px){#onetrust-banner-sdk #onetrust-close-btn-container{position:absolute;top:6px;right:2px}#onetrust-banner-sdk #onetrust-policy{margin-left:0;margin-top:3em}#onetrust-banner-sdk #onetrust-button-group{display:block}#onetrust-banner-sdk #onetrust-accept-btn-handler,#onetrust-banner-sdk #onetrust-reject-all-handler,#onetrust-banner-sdk #onetrust-pc-btn-handler{width:100%}#onetrust-banner-sdk .onetrust-close-btn-ui{top:auto;transform:none}#onetrust-banner-sdk #onetrust-policy-title{display:inline;float:none}#onetrust-banner-sdk #banner-options{margin:0;padding:0;width:100%}}@media only screen and (min-width: 426px)and (max-width: 896px){#onetrust-banner-sdk #onetrust-close-btn-container{position:absolute;top:0;right:0}#onetrust-banner-sdk #onetrust-policy{margin-left:1em;margin-right:1em}#onetrust-banner-sdk .onetrust-close-btn-ui{top:10px;right:10px}#onetrust-banner-sdk:not(.ot-iab-2) #onetrust-group-container{width:95%}#onetrust-banner-sdk.ot-iab-2 #onetrust-group-container{width:100%}#onetrust-banner-sdk.ot-bnr-w-logo #onetrust-button-group-parent{padding-left:50px}#onetrust-banner-sdk #onetrust-button-group-parent{width:100%;position:relative;margin-left:0}#onetrust-banner-sdk #onetrust-button-group button{display:inline-block}#onetrust-banner-sdk #onetrust-button-group{margin-right:0;text-align:center}#onetrust-banner-sdk .has-reject-all-button #onetrust-pc-btn-handler{float:left}#onetrust-banner-sdk .has-reject-all-button #onetrust-reject-all-handler,#onetrust-banner-sdk .has-reject-all-button #onetrust-accept-btn-handler{float:right}#onetrust-banner-sdk .has-reject-all-button #onetrust-button-group{width:calc(100% - 2em);margin-right:0}#onetrust-banner-sdk .has-reject-all-button #onetrust-pc-btn-handler.cookie-setting-link{padding-left:0px;text-align:left}#onetrust-banner-sdk.ot-buttons-fw .ot-sdk-three button{width:100%;text-align:center}#onetrust-banner-sdk.ot-buttons-fw #onetrust-button-group-parent button{float:none}#onetrust-banner-sdk.ot-buttons-fw #onetrust-pc-btn-handler.cookie-setting-link{text-align:center}}@media only screen and (min-width: 550px){#onetrust-banner-sdk .banner-option:not(:first-child){border-left:1px solid #d8d8d8;padding-left:25px}}@media only screen and (min-width: 425px)and (max-width: 550px){#onetrust-banner-sdk.ot-iab-2 #onetrust-button-group,#onetrust-banner-sdk.ot-iab-2 #onetrust-policy,#onetrust-banner-sdk.ot-iab-2 .banner-option{width:100%}#onetrust-banner-sdk.ot-iab-2 #onetrust-button-group #onetrust-accept-btn-handler,#onetrust-banner-sdk.ot-iab-2 #onetrust-button-group #onetrust-reject-all-handler,#onetrust-banner-sdk.ot-iab-2 #onetrust-button-group #onetrust-pc-btn-handler{width:100%}#onetrust-banner-sdk.ot-iab-2 #onetrust-button-group #onetrust-accept-btn-handler,#onetrust-banner-sdk.ot-iab-2 #onetrust-button-group #onetrust-reject-all-handler{float:left}}@media only screen and (min-width: 769px){#onetrust-banner-sdk #onetrust-button-group{margin-right:30%}#onetrust-banner-sdk #banner-options{margin-left:2em;margin-right:5em;margin-bottom:1.25em;width:calc(100% - 7em)}}@media only screen and (min-width: 897px)and (max-width: 1023px){#onetrust-banner-sdk.vertical-align-content #onetrust-button-group-parent{position:absolute;top:50%;left:75%;transform:translateY(-50%)}#onetrust-banner-sdk #onetrust-close-btn-container{top:50%;margin:auto;transform:translate(-50%, -50%);position:absolute;padding:0;right:0}#onetrust-banner-sdk #onetrust-close-btn-container button{position:relative;margin:0;right:-22px;top:2px}}@media only screen and (min-width: 1024px){#onetrust-banner-sdk #onetrust-close-btn-container{top:50%;margin:auto;transform:translate(-50%, -50%);position:absolute;right:0}#onetrust-banner-sdk #onetrust-close-btn-container button{right:-12px}#onetrust-banner-sdk #onetrust-policy{margin-left:2em}#onetrust-banner-sdk.vertical-align-content #onetrust-button-group-parent{position:absolute;top:50%;left:60%;transform:translateY(-50%)}#onetrust-banner-sdk .ot-optout-signal{width:50%}#onetrust-banner-sdk.ot-iab-2 #onetrust-policy-title{width:50%}#onetrust-banner-sdk.ot-iab-2 #onetrust-policy-text,#onetrust-banner-sdk.ot-iab-2 :not(.ot-dpd-desc)&gt;.ot-b-addl-desc{margin-bottom:1em;width:50%;border-right:1px solid #d8d8d8;padding-right:1rem}#onetrust-banner-sdk.ot-iab-2 #onetrust-policy-text{margin-bottom:0;padding-bottom:1em}#onetrust-banner-sdk.ot-iab-2 :not(.ot-dpd-desc)&gt;.ot-b-addl-desc{margin-bottom:0;padding-bottom:1em}#onetrust-banner-sdk.ot-iab-2 .ot-dpd-container{width:45%;padding-left:1rem;display:inline-block;float:none}#onetrust-banner-sdk.ot-iab-2 .ot-dpd-title{line-height:1.7}#onetrust-banner-sdk.ot-iab-2 #onetrust-button-group-parent{left:auto;right:4%;margin-left:0}#onetrust-banner-sdk.ot-iab-2 #onetrust-button-group button{display:block}#onetrust-banner-sdk:not(.ot-iab-2) #onetrust-button-group-parent{margin:auto;width:30%}#onetrust-banner-sdk:not(.ot-iab-2) #onetrust-group-container{width:60%}#onetrust-banner-sdk #onetrust-button-group{margin-right:auto}#onetrust-banner-sdk #onetrust-accept-btn-handler,#onetrust-banner-sdk #onetrust-reject-all-handler,#onetrust-banner-sdk #onetrust-pc-btn-handler{margin-top:1em}}@media only screen and (min-width: 890px){#onetrust-banner-sdk.ot-buttons-fw:not(.ot-iab-2) #onetrust-button-group-parent{padding-left:3%;padding-right:4%;margin-left:0}#onetrust-banner-sdk.ot-buttons-fw:not(.ot-iab-2) #onetrust-button-group{margin-right:0;margin-top:1.25em;width:100%}#onetrust-banner-sdk.ot-buttons-fw:not(.ot-iab-2) #onetrust-button-group button{width:100%;margin-bottom:5px;margin-top:5px}#onetrust-banner-sdk.ot-buttons-fw:not(.ot-iab-2) #onetrust-button-group button:last-of-type{margin-bottom:20px}}@media only screen and (min-width: 1280px){#onetrust-banner-sdk:not(.ot-iab-2) #onetrust-group-container{width:55%}#onetrust-banner-sdk:not(.ot-iab-2) #onetrust-button-group-parent{width:44%;padding-left:2%;padding-right:2%}#onetrust-banner-sdk:not(.ot-iab-2).vertical-align-content #onetrust-button-group-parent{position:absolute;left:55%}}\n        #onetrust-consent-sdk #onetrust-banner-sdk {background-color: #FFFFFF;}\n            #onetrust-consent-sdk #onetrust-policy-title,\n                    #onetrust-consent-sdk #onetrust-policy-text,\n                    #onetrust-consent-sdk .ot-b-addl-desc,\n                    #onetrust-consent-sdk .ot-dpd-desc,\n                    #onetrust-consent-sdk .ot-dpd-title,\n                    #onetrust-consent-sdk #onetrust-policy-text *:not(.onetrust-vendors-list-handler),\n                    #onetrust-consent-sdk .ot-dpd-desc *:not(.onetrust-vendors-list-handler),\n                    #onetrust-consent-sdk #onetrust-banner-sdk #banner-options *,\n                    #onetrust-banner-sdk .ot-cat-header,\n                    #onetrust-banner-sdk .ot-optout-signal\n                    {\n                        color: #35393D;\n                    }\n            #onetrust-consent-sdk #onetrust-banner-sdk .banner-option-details {\n                    background-color: #E9E9E9;}\n             #onetrust-consent-sdk #onetrust-banner-sdk a[href],\n                    #onetrust-consent-sdk #onetrust-banner-sdk a[href] font,\n                    #onetrust-consent-sdk #onetrust-banner-sdk .ot-link-btn\n                        {\n                            color: #06f;\n                        }#onetrust-consent-sdk #onetrust-accept-btn-handler,\n                         #onetrust-banner-sdk #onetrust-reject-all-handler {\n                            background-color: #06f;border-color: #06f;\n                color: #FFFFFF;\n            }\n            #onetrust-consent-sdk #onetrust-banner-sdk *:focus,\n            #onetrust-consent-sdk #onetrust-banner-sdk:focus {\n               outline-color: #000000;\n               outline-width: 1px;\n            }\n            #onetrust-consent-sdk #onetrust-pc-btn-handler,\n            #onetrust-consent-sdk #onetrust-pc-btn-handler.cookie-setting-link {\n                color: #06f; border-color: #06f;\n                background-color:\n                #FFFFFF;\n            }#onetrust-pc-sdk .ot-pc-footer-logo a{   \n    display: none !important;\n}#onetrust-pc-sdk.otPcCenter{overflow:hidden;position:fixed;margin:0 auto;top:5%;right:0;left:0;width:40%;max-width:575px;min-width:575px;border-radius:2.5px;z-index:2147483647;background-color:#fff;-webkit-box-shadow:0px 2px 10px -3px #999;-moz-box-shadow:0px 2px 10px -3px #999;box-shadow:0px 2px 10px -3px #999}#onetrust-pc-sdk.otPcCenter[dir=rtl]{right:0;left:0}#onetrust-pc-sdk.otRelFont{font-size:1rem}#onetrust-pc-sdk .ot-optout-signal{margin-top:.625rem}#onetrust-pc-sdk #ot-addtl-venlst .ot-arw-cntr,#onetrust-pc-sdk #ot-addtl-venlst .ot-plus-minus,#onetrust-pc-sdk .ot-hide-tgl{visibility:hidden}#onetrust-pc-sdk #ot-addtl-venlst .ot-arw-cntr *,#onetrust-pc-sdk #ot-addtl-venlst .ot-plus-minus *,#onetrust-pc-sdk .ot-hide-tgl *{visibility:hidden}#onetrust-pc-sdk #ot-gn-venlst .ot-ven-item .ot-acc-hdr{min-height:40px}#onetrust-pc-sdk .ot-pc-header{height:39px;padding:10px 0 10px 30px;border-bottom:1px solid #e9e9e9}#onetrust-pc-sdk #ot-pc-title,#onetrust-pc-sdk #ot-category-title,#onetrust-pc-sdk .ot-cat-header,#onetrust-pc-sdk #ot-lst-title,#onetrust-pc-sdk .ot-ven-hdr .ot-ven-name,#onetrust-pc-sdk .ot-always-active{font-weight:bold;color:dimgray}#onetrust-pc-sdk .ot-always-active-group .ot-cat-header{width:55%;font-weight:700}#onetrust-pc-sdk .ot-cat-item p{clear:both;float:left;margin-top:10px;margin-bottom:5px;line-height:1.5;font-size:.812em;color:dimgray}#onetrust-pc-sdk .ot-close-icon{height:44px;width:44px;background-size:10px}#onetrust-pc-sdk #ot-pc-title{float:left;font-size:1em;line-height:1.5;margin-bottom:10px;margin-top:10px;width:100%}#onetrust-pc-sdk #accept-recommended-btn-handler{margin-right:10px;margin-bottom:25px;outline-offset:-1px}#onetrust-pc-sdk #ot-pc-desc{clear:both;width:100%;font-size:.812em;line-height:1.5;margin-bottom:25px}#onetrust-pc-sdk #ot-pc-desc a{margin-left:5px}#onetrust-pc-sdk #ot-pc-desc *{font-size:inherit;line-height:inherit}#onetrust-pc-sdk #ot-pc-desc ul li{padding:10px 0px}#onetrust-pc-sdk a{color:#656565;cursor:pointer}#onetrust-pc-sdk a:hover{color:#3860be}#onetrust-pc-sdk label{margin-bottom:0}#onetrust-pc-sdk #vdr-lst-dsc{font-size:.812em;line-height:1.5;padding:10px 15px 5px 15px}#onetrust-pc-sdk button{max-width:394px;padding:12px 30px;line-height:1;word-break:break-word;word-wrap:break-word;white-space:normal;font-weight:bold;height:auto}#onetrust-pc-sdk .ot-link-btn{padding:0;margin-bottom:0;border:0;font-weight:normal;line-height:normal;width:auto;height:auto}#onetrust-pc-sdk #ot-pc-content{position:absolute;overflow-y:scroll;padding-left:0px;padding-right:30px;top:60px;bottom:110px;margin:1px 3px 0 30px;width:calc(100% - 63px)}#onetrust-pc-sdk .ot-vs-list .ot-always-active,#onetrust-pc-sdk .ot-cat-grp .ot-always-active{float:right;clear:none;color:#3860be;margin:0;font-size:.813em;line-height:1.3}#onetrust-pc-sdk .ot-pc-scrollbar::-webkit-scrollbar-track{margin-right:20px}#onetrust-pc-sdk .ot-pc-scrollbar::-webkit-scrollbar{width:11px}#onetrust-pc-sdk .ot-pc-scrollbar::-webkit-scrollbar-thumb{border-radius:10px;background:#d8d8d8}#onetrust-pc-sdk input[type=checkbox]:focus+.ot-acc-hdr{outline:#000 1px solid}#onetrust-pc-sdk .ot-pc-scrollbar{scrollbar-arrow-color:#d8d8d8;scrollbar-darkshadow-color:#d8d8d8;scrollbar-face-color:#d8d8d8;scrollbar-shadow-color:#d8d8d8}#onetrust-pc-sdk .save-preference-btn-handler{margin-right:20px}#onetrust-pc-sdk .ot-pc-refuse-all-handler{margin-right:10px}#onetrust-pc-sdk #ot-pc-desc .privacy-notice-link{margin-left:0;margin-right:8px}#onetrust-pc-sdk #ot-pc-desc .ot-imprint-handler{margin-left:0;margin-right:8px}#onetrust-pc-sdk .ot-subgrp-cntr{display:inline-block;clear:both;width:100%;padding-top:15px}#onetrust-pc-sdk .ot-switch+.ot-subgrp-cntr{padding-top:10px}#onetrust-pc-sdk ul.ot-subgrps{margin:0;font-size:initial}#onetrust-pc-sdk ul.ot-subgrps li p,#onetrust-pc-sdk ul.ot-subgrps li h5{font-size:.813em;line-height:1.4;color:dimgray}#onetrust-pc-sdk ul.ot-subgrps .ot-switch{min-height:auto}#onetrust-pc-sdk ul.ot-subgrps .ot-switch-nob{top:0}#onetrust-pc-sdk ul.ot-subgrps .ot-acc-hdr{display:inline-block;width:100%}#onetrust-pc-sdk ul.ot-subgrps .ot-acc-txt{margin:0}#onetrust-pc-sdk ul.ot-subgrps li{padding:0;border:none}#onetrust-pc-sdk ul.ot-subgrps li h5{position:relative;top:5px;font-weight:bold;margin-bottom:0;float:left}#onetrust-pc-sdk li.ot-subgrp{margin-left:20px;overflow:auto}#onetrust-pc-sdk li.ot-subgrp&gt;h5{width:calc(100% - 100px)}#onetrust-pc-sdk .ot-cat-item p&gt;ul,#onetrust-pc-sdk li.ot-subgrp p&gt;ul{margin:0px;list-style:disc;margin-left:15px;font-size:inherit}#onetrust-pc-sdk .ot-cat-item p&gt;ul li,#onetrust-pc-sdk li.ot-subgrp p&gt;ul li{font-size:inherit;padding-top:10px;padding-left:0px;padding-right:0px;border:none}#onetrust-pc-sdk .ot-cat-item p&gt;ul li:last-child,#onetrust-pc-sdk li.ot-subgrp p&gt;ul li:last-child{padding-bottom:10px}#onetrust-pc-sdk .ot-pc-logo{height:40px;width:120px}#onetrust-pc-sdk .ot-pc-footer{position:absolute;bottom:0px;width:100%;max-height:160px;border-top:1px solid #d8d8d8}#onetrust-pc-sdk.ot-ftr-stacked .ot-pc-refuse-all-handler{margin-bottom:0px}#onetrust-pc-sdk.ot-ftr-stacked #ot-pc-content{bottom:160px}#onetrust-pc-sdk.ot-ftr-stacked .ot-pc-footer button{width:100%;max-width:none}#onetrust-pc-sdk.ot-ftr-stacked .ot-btn-container{margin:0 30px;width:calc(100% - 60px);padding-right:0}#onetrust-pc-sdk .ot-pc-footer-logo{height:30px;width:100%;text-align:right;background:#f4f4f4}#onetrust-pc-sdk .ot-pc-footer-logo a{display:inline-block;margin-top:5px;margin-right:10px}#onetrust-pc-sdk[dir=rtl] .ot-pc-footer-logo{direction:rtl}#onetrust-pc-sdk[dir=rtl] .ot-pc-footer-logo a{margin-right:25px}#onetrust-pc-sdk .ot-tgl{float:right;position:relative;z-index:1}#onetrust-pc-sdk .ot-tgl input:checked+.ot-switch .ot-switch-nob{background-color:#468254;border:1px solid #fff}#onetrust-pc-sdk .ot-tgl input:checked+.ot-switch .ot-switch-nob:before{-webkit-transform:translateX(20px);-ms-transform:translateX(20px);transform:translateX(20px);background-color:#fff;border-color:#fff}#onetrust-pc-sdk .ot-tgl input:focus+.ot-switch{outline:#000 solid 1px}#onetrust-pc-sdk .ot-switch{position:relative;display:inline-block;width:45px;height:25px}#onetrust-pc-sdk .ot-switch-nob{position:absolute;cursor:pointer;top:0;left:0;right:0;bottom:0;background-color:#767676;border:1px solid #ddd;transition:all .2s ease-in 0s;-moz-transition:all .2s ease-in 0s;-o-transition:all .2s ease-in 0s;-webkit-transition:all .2s ease-in 0s;border-radius:20px}#onetrust-pc-sdk .ot-switch-nob:before{position:absolute;content:\&quot;\&quot;;height:18px;width:18px;bottom:3px;left:3px;background-color:#fff;-webkit-transition:.4s;transition:.4s;border-radius:20px}#onetrust-pc-sdk .ot-chkbox input:checked~label::before{background-color:#3860be}#onetrust-pc-sdk .ot-chkbox input+label::after{content:none;color:#fff}#onetrust-pc-sdk .ot-chkbox input:checked+label::after{content:\&quot;\&quot;}#onetrust-pc-sdk .ot-chkbox input:focus+label::before{outline-style:solid;outline-width:2px;outline-style:auto}#onetrust-pc-sdk .ot-chkbox label{position:relative;display:inline-block;padding-left:30px;cursor:pointer;font-weight:500}#onetrust-pc-sdk .ot-chkbox label::before,#onetrust-pc-sdk .ot-chkbox label::after{position:absolute;content:\&quot;\&quot;;display:inline-block;border-radius:3px}#onetrust-pc-sdk .ot-chkbox label::before{height:18px;width:18px;border:1px solid #3860be;left:0px;top:auto}#onetrust-pc-sdk .ot-chkbox label::after{height:5px;width:9px;border-left:3px solid;border-bottom:3px solid;transform:rotate(-45deg);-o-transform:rotate(-45deg);-ms-transform:rotate(-45deg);-webkit-transform:rotate(-45deg);left:4px;top:5px}#onetrust-pc-sdk .ot-label-txt{display:none}#onetrust-pc-sdk .ot-chkbox input,#onetrust-pc-sdk .ot-tgl input{position:absolute;opacity:0;width:0;height:0}#onetrust-pc-sdk .ot-arw-cntr{float:right;position:relative;pointer-events:none}#onetrust-pc-sdk .ot-arw-cntr .ot-arw{width:16px;height:16px;margin-left:5px;color:dimgray;display:inline-block;vertical-align:middle;-webkit-transition:all 150ms ease-in 0s;-moz-transition:all 150ms ease-in 0s;-o-transition:all 150ms ease-in 0s;transition:all 150ms ease-in 0s}#onetrust-pc-sdk input:checked~.ot-acc-hdr .ot-arw,#onetrust-pc-sdk button[aria-expanded=true]~.ot-acc-hdr .ot-arw-cntr svg{transform:rotate(90deg);-o-transform:rotate(90deg);-ms-transform:rotate(90deg);-webkit-transform:rotate(90deg)}#onetrust-pc-sdk input[type=checkbox]:focus+.ot-acc-hdr{outline:#000 1px solid}#onetrust-pc-sdk .ot-tgl-cntr,#onetrust-pc-sdk .ot-arw-cntr{display:inline-block}#onetrust-pc-sdk .ot-tgl-cntr{width:45px;float:right;margin-top:2px}#onetrust-pc-sdk #ot-lst-cnt .ot-tgl-cntr{margin-top:10px}#onetrust-pc-sdk .ot-always-active-subgroup{width:auto;padding-left:0px !important;top:3px;position:relative}#onetrust-pc-sdk .ot-label-status{padding-left:5px;font-size:.75em;display:none}#onetrust-pc-sdk .ot-arw-cntr{margin-top:-1px}#onetrust-pc-sdk .ot-arw-cntr svg{-webkit-transition:all 300ms ease-in 0s;-moz-transition:all 300ms ease-in 0s;-o-transition:all 300ms ease-in 0s;transition:all 300ms ease-in 0s;height:10px;width:10px}#onetrust-pc-sdk input:checked~.ot-acc-hdr .ot-arw{transform:rotate(90deg);-o-transform:rotate(90deg);-ms-transform:rotate(90deg);-webkit-transform:rotate(90deg)}#onetrust-pc-sdk .ot-arw{width:10px;margin-left:15px;transition:all 300ms ease-in 0s;-webkit-transition:all 300ms ease-in 0s;-moz-transition:all 300ms ease-in 0s;-o-transition:all 300ms ease-in 0s}#onetrust-pc-sdk .ot-vlst-cntr{margin-bottom:0}#onetrust-pc-sdk .ot-hlst-cntr{margin-top:5px;display:inline-block;width:100%}#onetrust-pc-sdk .category-vendors-list-handler,#onetrust-pc-sdk .category-vendors-list-handler+a,#onetrust-pc-sdk .category-host-list-handler{clear:both;color:#3860be;margin-left:0;font-size:.813em;text-decoration:none;float:left;overflow:hidden}#onetrust-pc-sdk .category-vendors-list-handler:hover,#onetrust-pc-sdk .category-vendors-list-handler+a:hover,#onetrust-pc-sdk .category-host-list-handler:hover{text-decoration-line:underline}#onetrust-pc-sdk .category-vendors-list-handler+a{clear:none}#onetrust-pc-sdk .ot-vlst-cntr .ot-ext-lnk,#onetrust-pc-sdk .ot-ven-hdr .ot-ext-lnk{display:inline-block;height:13px;width:13px;background-repeat:no-repeat;margin-left:1px;margin-top:6px;cursor:pointer}#onetrust-pc-sdk .ot-ven-hdr .ot-ext-lnk{margin-bottom:-1px}#onetrust-pc-sdk .back-btn-handler{font-size:1em;text-decoration:none}#onetrust-pc-sdk .back-btn-handler:hover{opacity:.6}#onetrust-pc-sdk #ot-lst-title h3{display:inline-block;word-break:break-word;word-wrap:break-word;margin-bottom:0;color:#656565;font-size:1em;font-weight:bold;margin-left:15px}#onetrust-pc-sdk #ot-lst-title{margin:10px 0 10px 0px;font-size:1em;text-align:left}#onetrust-pc-sdk #ot-pc-hdr{margin:0 0 0 30px;height:auto;width:auto}#onetrust-pc-sdk #ot-pc-hdr input::placeholder{color:#d4d4d4;font-style:italic}#onetrust-pc-sdk #vendor-search-handler{height:31px;width:100%;border-radius:50px;font-size:.8em;padding-right:35px;padding-left:15px;float:left;margin-left:15px}#onetrust-pc-sdk .ot-ven-name{display:block;width:auto;padding-right:5px}#onetrust-pc-sdk #ot-lst-cnt{overflow-y:auto;margin-left:20px;margin-right:7px;width:calc(100% - 27px);max-height:calc(100% - 80px);height:100%;transform:translate3d(0, 0, 0)}#onetrust-pc-sdk #ot-pc-lst{width:100%;bottom:100px;position:absolute;top:60px}#onetrust-pc-sdk #ot-pc-lst:not(.ot-enbl-chr) .ot-tgl-cntr .ot-arw-cntr,#onetrust-pc-sdk #ot-pc-lst:not(.ot-enbl-chr) .ot-tgl-cntr .ot-arw-cntr *{visibility:hidden}#onetrust-pc-sdk #ot-pc-lst .ot-tgl-cntr{right:12px;position:absolute}#onetrust-pc-sdk #ot-pc-lst .ot-arw-cntr{float:right;position:relative}#onetrust-pc-sdk #ot-pc-lst .ot-arw{margin-left:10px}#onetrust-pc-sdk #ot-pc-lst .ot-acc-hdr{overflow:hidden;cursor:pointer}#onetrust-pc-sdk .ot-vlst-cntr{overflow:hidden}#onetrust-pc-sdk #ot-sel-blk{overflow:hidden;width:100%;position:sticky;position:-webkit-sticky;top:0;z-index:3}#onetrust-pc-sdk #ot-back-arw{height:12px;width:12px}#onetrust-pc-sdk .ot-lst-subhdr{width:100%;display:inline-block}#onetrust-pc-sdk .ot-search-cntr{float:left;width:78%;position:relative}#onetrust-pc-sdk .ot-search-cntr&gt;svg{width:30px;height:30px;position:absolute;float:left;right:-15px}#onetrust-pc-sdk .ot-fltr-cntr{float:right;right:50px;position:relative}#onetrust-pc-sdk #filter-btn-handler{background-color:#3860be;border-radius:17px;display:inline-block;position:relative;width:32px;height:32px;-moz-transition:.1s ease;-o-transition:.1s ease;-webkit-transition:1s ease;transition:.1s ease;padding:0;margin:0}#onetrust-pc-sdk #filter-btn-handler:hover{background-color:#3860be}#onetrust-pc-sdk #filter-btn-handler svg{width:12px;height:12px;margin:3px 10px 0 10px;display:block;position:static;right:auto;top:auto}#onetrust-pc-sdk .ot-ven-link,#onetrust-pc-sdk .ot-ven-legclaim-link{color:#3860be;text-decoration:none;font-weight:100;display:inline-block;padding-top:10px;transform:translate(0, 1%);-o-transform:translate(0, 1%);-ms-transform:translate(0, 1%);-webkit-transform:translate(0, 1%);position:relative;z-index:2}#onetrust-pc-sdk .ot-ven-link *,#onetrust-pc-sdk .ot-ven-legclaim-link *{font-size:inherit}#onetrust-pc-sdk .ot-ven-link:hover,#onetrust-pc-sdk .ot-ven-legclaim-link:hover{text-decoration:underline}#onetrust-pc-sdk .ot-ven-hdr{width:calc(100% - 160px);height:auto;float:left;word-break:break-word;word-wrap:break-word;vertical-align:middle;padding-bottom:3px}#onetrust-pc-sdk .ot-ven-link,#onetrust-pc-sdk .ot-ven-legclaim-link{letter-spacing:.03em;font-size:.75em;font-weight:400}#onetrust-pc-sdk .ot-ven-dets{border-radius:2px;background-color:#f8f8f8}#onetrust-pc-sdk .ot-ven-dets li:first-child p:first-child{border-top:none}#onetrust-pc-sdk .ot-ven-dets .ot-ven-disc:not(:first-child){border-top:1px solid #ddd !important}#onetrust-pc-sdk .ot-ven-dets .ot-ven-disc:nth-child(n+3) p{display:inline-block}#onetrust-pc-sdk .ot-ven-dets .ot-ven-disc:nth-child(n+3) p:nth-of-type(odd){width:30%}#onetrust-pc-sdk .ot-ven-dets .ot-ven-disc:nth-child(n+3) p:nth-of-type(even){width:50%;word-break:break-word;word-wrap:break-word}#onetrust-pc-sdk .ot-ven-dets .ot-ven-disc p,#onetrust-pc-sdk .ot-ven-dets .ot-ven-disc h4{padding-top:5px;padding-bottom:5px;display:block}#onetrust-pc-sdk .ot-ven-dets .ot-ven-disc h4{display:inline-block}#onetrust-pc-sdk .ot-ven-dets .ot-ven-disc p:nth-last-child(-n+1){padding-bottom:10px}#onetrust-pc-sdk .ot-ven-dets .ot-ven-disc p:nth-child(-n+2):not(.disc-pur){padding-top:10px}#onetrust-pc-sdk .ot-ven-dets .ot-ven-disc .disc-pur-cont{display:inline}#onetrust-pc-sdk .ot-ven-dets .ot-ven-disc .disc-pur{position:relative;width:50% !important;word-break:break-word;word-wrap:break-word;left:calc(30% + 17px)}#onetrust-pc-sdk .ot-ven-dets .ot-ven-disc .disc-pur:nth-child(-n+1){position:static}#onetrust-pc-sdk .ot-ven-dets p,#onetrust-pc-sdk .ot-ven-dets h4,#onetrust-pc-sdk .ot-ven-dets span{font-size:.69em;text-align:left;vertical-align:middle;word-break:break-word;word-wrap:break-word;margin:0;padding-bottom:10px;padding-left:15px;color:#2e3644}#onetrust-pc-sdk .ot-ven-dets h4{padding-top:5px}#onetrust-pc-sdk .ot-ven-dets span{color:dimgray;padding:0;vertical-align:baseline}#onetrust-pc-sdk .ot-ven-dets .ot-ven-pur h4{border-top:1px solid #e9e9e9;border-bottom:1px solid #e9e9e9;padding-bottom:5px;margin-bottom:5px;font-weight:bold}#onetrust-pc-sdk #ot-host-lst .ot-sel-all{float:right;position:relative;margin-right:42px;top:10px}#onetrust-pc-sdk #ot-host-lst .ot-sel-all input[type=checkbox]{width:auto;height:auto}#onetrust-pc-sdk #ot-host-lst .ot-sel-all label{height:20px;width:20px;padding-left:0px}#onetrust-pc-sdk #ot-host-lst .ot-acc-txt{overflow:hidden;width:95%}#onetrust-pc-sdk .ot-host-hdr{position:relative;z-index:1;pointer-events:none;width:calc(100% - 125px);float:left}#onetrust-pc-sdk .ot-host-name,#onetrust-pc-sdk .ot-host-desc{display:inline-block;width:90%}#onetrust-pc-sdk .ot-host-name{pointer-events:none}#onetrust-pc-sdk .ot-host-hdr&gt;a{text-decoration:underline;font-size:.82em;position:relative;z-index:2;float:left;margin-bottom:5px;pointer-events:initial}#onetrust-pc-sdk .ot-host-name+a{margin-top:5px}#onetrust-pc-sdk .ot-host-name,#onetrust-pc-sdk .ot-host-name a,#onetrust-pc-sdk .ot-host-desc,#onetrust-pc-sdk .ot-host-info{color:dimgray;word-break:break-word;word-wrap:break-word}#onetrust-pc-sdk .ot-host-name,#onetrust-pc-sdk .ot-host-name a{font-weight:bold;font-size:.82em;line-height:1.3}#onetrust-pc-sdk .ot-host-name a{font-size:1em}#onetrust-pc-sdk .ot-host-expand{margin-top:3px;margin-bottom:3px;clear:both;display:block;color:#3860be;font-size:.72em;font-weight:normal}#onetrust-pc-sdk .ot-host-expand *{font-size:inherit}#onetrust-pc-sdk .ot-host-desc,#onetrust-pc-sdk .ot-host-info{font-size:.688em;line-height:1.4;font-weight:normal}#onetrust-pc-sdk .ot-host-desc{margin-top:10px}#onetrust-pc-sdk .ot-host-opt{margin:0;font-size:inherit;display:inline-block;width:100%}#onetrust-pc-sdk .ot-host-opt li&gt;div div{font-size:.8em;padding:5px 0}#onetrust-pc-sdk .ot-host-opt li&gt;div div:nth-child(1){width:30%;float:left}#onetrust-pc-sdk .ot-host-opt li&gt;div div:nth-child(2){width:70%;float:left;word-break:break-word;word-wrap:break-word}#onetrust-pc-sdk .ot-host-info{border:none;display:inline-block;width:calc(100% - 10px);padding:10px;margin-bottom:10px;background-color:#f8f8f8}#onetrust-pc-sdk .ot-host-info&gt;div{overflow:auto}#onetrust-pc-sdk #no-results{text-align:center;margin-top:30px}#onetrust-pc-sdk #no-results p{font-size:1em;color:#2e3644;word-break:break-word;word-wrap:break-word}#onetrust-pc-sdk #no-results p span{font-weight:bold}#onetrust-pc-sdk #ot-fltr-modal{width:100%;height:auto;display:none;-moz-transition:.2s ease;-o-transition:.2s ease;-webkit-transition:2s ease;transition:.2s ease;overflow:hidden;opacity:1;right:0}#onetrust-pc-sdk #ot-fltr-modal .ot-label-txt{display:inline-block;font-size:.85em;color:dimgray}#onetrust-pc-sdk #ot-fltr-cnt{z-index:2147483646;background-color:#fff;position:absolute;height:90%;max-height:300px;width:325px;left:210px;margin-top:10px;margin-bottom:20px;padding-right:10px;border-radius:3px;-webkit-box-shadow:0px 0px 12px 2px #c7c5c7;-moz-box-shadow:0px 0px 12px 2px #c7c5c7;box-shadow:0px 0px 12px 2px #c7c5c7}#onetrust-pc-sdk .ot-fltr-scrlcnt{overflow-y:auto;overflow-x:hidden;clear:both;max-height:calc(100% - 60px)}#onetrust-pc-sdk #ot-anchor{border:12px solid rgba(0,0,0,0);display:none;position:absolute;z-index:2147483647;right:55px;top:75px;transform:rotate(45deg);-o-transform:rotate(45deg);-ms-transform:rotate(45deg);-webkit-transform:rotate(45deg);background-color:#fff;-webkit-box-shadow:-3px -3px 5px -2px #c7c5c7;-moz-box-shadow:-3px -3px 5px -2px #c7c5c7;box-shadow:-3px -3px 5px -2px #c7c5c7}#onetrust-pc-sdk .ot-fltr-btns{margin-left:15px}#onetrust-pc-sdk #filter-apply-handler{margin-right:15px}#onetrust-pc-sdk .ot-fltr-opt{margin-bottom:25px;margin-left:15px;width:75%;position:relative}#onetrust-pc-sdk .ot-fltr-opt p{display:inline-block;margin:0;font-size:.9em;color:#2e3644}#onetrust-pc-sdk .ot-chkbox label span{font-size:.85em;color:dimgray}#onetrust-pc-sdk .ot-chkbox input[type=checkbox]+label::after{content:none;color:#fff}#onetrust-pc-sdk .ot-chkbox input[type=checkbox]:checked+label::after{content:\&quot;\&quot;}#onetrust-pc-sdk .ot-chkbox input[type=checkbox]:focus+label::before{outline-style:solid;outline-width:2px;outline-style:auto}#onetrust-pc-sdk #ot-selall-vencntr,#onetrust-pc-sdk #ot-selall-adtlvencntr,#onetrust-pc-sdk #ot-selall-hostcntr,#onetrust-pc-sdk #ot-selall-licntr,#onetrust-pc-sdk #ot-selall-gnvencntr{right:15px;position:relative;width:20px;height:20px;float:right}#onetrust-pc-sdk #ot-selall-vencntr label,#onetrust-pc-sdk #ot-selall-adtlvencntr label,#onetrust-pc-sdk #ot-selall-hostcntr label,#onetrust-pc-sdk #ot-selall-licntr label,#onetrust-pc-sdk #ot-selall-gnvencntr label{float:left;padding-left:0}#onetrust-pc-sdk #ot-ven-lst:first-child{border-top:1px solid #e2e2e2}#onetrust-pc-sdk ul{list-style:none;padding:0}#onetrust-pc-sdk ul li{position:relative;margin:0;padding:15px 15px 15px 10px;border-bottom:1px solid #e2e2e2}#onetrust-pc-sdk ul li h3{font-size:.75em;color:#656565;margin:0;display:inline-block;width:70%;height:auto;word-break:break-word;word-wrap:break-word}#onetrust-pc-sdk ul li p{margin:0;font-size:.7em}#onetrust-pc-sdk ul li input[type=checkbox]{position:absolute;cursor:pointer;width:100%;height:100%;opacity:0;margin:0;top:0;left:0}#onetrust-pc-sdk .ot-cat-item&gt;button:focus,#onetrust-pc-sdk .ot-acc-cntr&gt;button:focus,#onetrust-pc-sdk li&gt;button:focus{outline:#000 solid 2px}#onetrust-pc-sdk .ot-cat-item&gt;button,#onetrust-pc-sdk .ot-acc-cntr&gt;button,#onetrust-pc-sdk li&gt;button{position:absolute;cursor:pointer;width:100%;height:100%;margin:0;top:0;left:0;z-index:1;max-width:none;border:none}#onetrust-pc-sdk .ot-cat-item&gt;button[aria-expanded=false]~.ot-acc-txt,#onetrust-pc-sdk .ot-acc-cntr&gt;button[aria-expanded=false]~.ot-acc-txt,#onetrust-pc-sdk li&gt;button[aria-expanded=false]~.ot-acc-txt{margin-top:0;max-height:0;opacity:0;overflow:hidden;width:100%;transition:.25s ease-out;display:none}#onetrust-pc-sdk .ot-cat-item&gt;button[aria-expanded=true]~.ot-acc-txt,#onetrust-pc-sdk .ot-acc-cntr&gt;button[aria-expanded=true]~.ot-acc-txt,#onetrust-pc-sdk li&gt;button[aria-expanded=true]~.ot-acc-txt{transition:.1s ease-in;margin-top:10px;width:100%;overflow:auto;display:block}#onetrust-pc-sdk .ot-cat-item&gt;button[aria-expanded=true]~.ot-acc-grpcntr,#onetrust-pc-sdk .ot-acc-cntr&gt;button[aria-expanded=true]~.ot-acc-grpcntr,#onetrust-pc-sdk li&gt;button[aria-expanded=true]~.ot-acc-grpcntr{width:auto;margin-top:0px;padding-bottom:10px}#onetrust-pc-sdk .ot-host-item&gt;button:focus,#onetrust-pc-sdk .ot-ven-item&gt;button:focus{outline:0;border:2px solid #000}#onetrust-pc-sdk .ot-hide-acc&gt;button{pointer-events:none}#onetrust-pc-sdk .ot-hide-acc .ot-plus-minus&gt;*,#onetrust-pc-sdk .ot-hide-acc .ot-arw-cntr&gt;*{visibility:hidden}#onetrust-pc-sdk .ot-hide-acc .ot-acc-hdr{min-height:30px}#onetrust-pc-sdk.ot-addtl-vendors #ot-lst-cnt:not(.ot-host-cnt){padding-right:10px;width:calc(100% - 37px);margin-top:10px;max-height:calc(100% - 90px)}#onetrust-pc-sdk.ot-addtl-vendors #ot-lst-cnt:not(.ot-host-cnt) #ot-sel-blk{background-color:#f9f9fc;border:1px solid #e2e2e2;width:calc(100% - 2px);padding-bottom:5px;padding-top:5px}#onetrust-pc-sdk.ot-addtl-vendors #ot-lst-cnt:not(.ot-host-cnt) #ot-sel-blk.ot-vnd-list-cnt{border:unset;background-color:unset}#onetrust-pc-sdk.ot-addtl-vendors #ot-lst-cnt:not(.ot-host-cnt) #ot-sel-blk.ot-vnd-list-cnt .ot-sel-all-hdr{display:none}#onetrust-pc-sdk.ot-addtl-vendors #ot-lst-cnt:not(.ot-host-cnt) #ot-sel-blk.ot-vnd-list-cnt .ot-sel-all{padding-right:.5rem}#onetrust-pc-sdk.ot-addtl-vendors #ot-lst-cnt:not(.ot-host-cnt) #ot-sel-blk.ot-vnd-list-cnt .ot-sel-all .ot-chkbox{right:0}#onetrust-pc-sdk.ot-addtl-vendors #ot-lst-cnt:not(.ot-host-cnt) .ot-sel-all{padding-right:34px}#onetrust-pc-sdk.ot-addtl-vendors #ot-lst-cnt:not(.ot-host-cnt) .ot-sel-all-chkbox{width:auto}#onetrust-pc-sdk.ot-addtl-vendors #ot-lst-cnt:not(.ot-host-cnt) ul li{border:1px solid #e2e2e2;margin-bottom:10px}#onetrust-pc-sdk.ot-addtl-vendors #ot-lst-cnt:not(.ot-host-cnt) .ot-acc-cntr&gt;.ot-acc-hdr{padding:10px 0 10px 15px}#onetrust-pc-sdk.ot-addtl-vendors .ot-sel-all-chkbox{float:right}#onetrust-pc-sdk.ot-addtl-vendors .ot-plus-minus~.ot-sel-all-chkbox{right:34px}#onetrust-pc-sdk.ot-addtl-vendors #ot-ven-lst:first-child{border-top:none}#onetrust-pc-sdk .ot-acc-cntr{position:relative;border-left:1px solid #e2e2e2;border-right:1px solid #e2e2e2;border-bottom:1px solid #e2e2e2}#onetrust-pc-sdk .ot-acc-cntr input{z-index:1}#onetrust-pc-sdk .ot-acc-cntr&gt;.ot-acc-hdr{background-color:#f9f9fc;padding:5px 0 5px 15px;width:auto}#onetrust-pc-sdk .ot-acc-cntr&gt;.ot-acc-hdr .ot-plus-minus{vertical-align:middle;top:auto}#onetrust-pc-sdk .ot-acc-cntr&gt;.ot-acc-hdr .ot-arw-cntr{right:10px}#onetrust-pc-sdk .ot-acc-cntr&gt;.ot-acc-hdr input{z-index:2}#onetrust-pc-sdk .ot-acc-cntr.ot-add-tech .ot-acc-hdr{padding:10px 0 10px 15px}#onetrust-pc-sdk .ot-acc-cntr&gt;input[type=checkbox]:checked~.ot-acc-hdr{border-bottom:1px solid #e2e2e2}#onetrust-pc-sdk .ot-acc-cntr&gt;.ot-acc-txt{padding-left:10px;padding-right:10px}#onetrust-pc-sdk .ot-acc-cntr button[aria-expanded=true]~.ot-acc-txt{width:auto}#onetrust-pc-sdk .ot-acc-cntr .ot-addtl-venbox{display:none}#onetrust-pc-sdk .ot-vlst-cntr{margin-bottom:0;width:100%}#onetrust-pc-sdk .ot-vensec-title{font-size:.813em;vertical-align:middle;display:inline-block}#onetrust-pc-sdk .category-vendors-list-handler,#onetrust-pc-sdk .category-vendors-list-handler+a{margin-left:0;margin-top:10px}#onetrust-pc-sdk #ot-selall-vencntr.line-through label::after,#onetrust-pc-sdk #ot-selall-adtlvencntr.line-through label::after,#onetrust-pc-sdk #ot-selall-licntr.line-through label::after,#onetrust-pc-sdk #ot-selall-hostcntr.line-through label::after,#onetrust-pc-sdk #ot-selall-gnvencntr.line-through label::after{height:auto;border-left:0;transform:none;-o-transform:none;-ms-transform:none;-webkit-transform:none;left:5px;top:9px}#onetrust-pc-sdk #ot-category-title{float:left;padding-bottom:10px;font-size:1em;width:100%}#onetrust-pc-sdk .ot-cat-grp{margin-top:10px}#onetrust-pc-sdk .ot-cat-item{line-height:1.1;margin-top:10px;display:inline-block;width:100%}#onetrust-pc-sdk .ot-btn-container{text-align:right}#onetrust-pc-sdk .ot-btn-container button{display:inline-block;font-size:.75em;letter-spacing:.08em;margin-top:19px}#onetrust-pc-sdk #close-pc-btn-handler.ot-close-icon{position:absolute;top:10px;right:0;z-index:1;padding:0;background-color:rgba(0,0,0,0);border:none}#onetrust-pc-sdk #close-pc-btn-handler.ot-close-icon svg{display:block;height:10px;width:10px}#onetrust-pc-sdk #clear-filters-handler{margin-top:20px;margin-bottom:10px;float:right;max-width:200px;text-decoration:none;color:#3860be;font-size:.9em;font-weight:bold;background-color:rgba(0,0,0,0);border-color:rgba(0,0,0,0);padding:1px}#onetrust-pc-sdk #clear-filters-handler:hover{color:#2285f7}#onetrust-pc-sdk #clear-filters-handler:focus{outline:#000 solid 1px}#onetrust-pc-sdk .ot-enbl-chr h4~.ot-tgl,#onetrust-pc-sdk .ot-enbl-chr h4~.ot-always-active{right:45px}#onetrust-pc-sdk .ot-enbl-chr h4~.ot-tgl+.ot-tgl{right:120px}#onetrust-pc-sdk .ot-enbl-chr .ot-pli-hdr.ot-leg-border-color span:first-child{width:90px}#onetrust-pc-sdk .ot-enbl-chr li.ot-subgrp&gt;h5+.ot-tgl-cntr{padding-right:25px}#onetrust-pc-sdk .ot-plus-minus{width:20px;height:20px;font-size:1.5em;position:relative;display:inline-block;margin-right:5px;top:3px}#onetrust-pc-sdk .ot-plus-minus span{position:absolute;background:#27455c;border-radius:1px}#onetrust-pc-sdk .ot-plus-minus span:first-of-type{top:25%;bottom:25%;width:10%;left:45%}#onetrust-pc-sdk .ot-plus-minus span:last-of-type{left:25%;right:25%;height:10%;top:45%}#onetrust-pc-sdk button[aria-expanded=true]~.ot-acc-hdr .ot-arw,#onetrust-pc-sdk button[aria-expanded=true]~.ot-acc-hdr .ot-plus-minus span:first-of-type,#onetrust-pc-sdk button[aria-expanded=true]~.ot-acc-hdr .ot-plus-minus span:last-of-type{transform:rotate(90deg)}#onetrust-pc-sdk button[aria-expanded=true]~.ot-acc-hdr .ot-plus-minus span:last-of-type{left:50%;right:50%}#onetrust-pc-sdk #ot-selall-vencntr label,#onetrust-pc-sdk #ot-selall-adtlvencntr label,#onetrust-pc-sdk #ot-selall-hostcntr label,#onetrust-pc-sdk #ot-selall-licntr label{position:relative;display:inline-block;width:20px;height:20px}#onetrust-pc-sdk .ot-host-item .ot-plus-minus,#onetrust-pc-sdk .ot-ven-item .ot-plus-minus{float:left;margin-right:8px;top:10px}#onetrust-pc-sdk .ot-ven-item ul{list-style:none inside;font-size:100%;margin:0}#onetrust-pc-sdk .ot-ven-item ul li{margin:0 !important;padding:0;border:none !important}#onetrust-pc-sdk .ot-pli-hdr{color:#77808e;overflow:hidden;padding-top:7.5px;padding-bottom:7.5px;width:calc(100% - 2px);border-top-left-radius:3px;border-top-right-radius:3px}#onetrust-pc-sdk .ot-pli-hdr span:first-child{top:50%;transform:translateY(50%);max-width:90px}#onetrust-pc-sdk .ot-pli-hdr span:last-child{padding-right:10px;max-width:95px;text-align:center}#onetrust-pc-sdk .ot-li-title{float:right;font-size:.813em}#onetrust-pc-sdk .ot-pli-hdr.ot-leg-border-color{background-color:#f4f4f4;border:1px solid #d8d8d8}#onetrust-pc-sdk .ot-pli-hdr.ot-leg-border-color span:first-child{text-align:left;width:70px}#onetrust-pc-sdk li.ot-subgrp&gt;h5,#onetrust-pc-sdk .ot-cat-header{width:calc(100% - 130px)}#onetrust-pc-sdk li.ot-subgrp&gt;h5+.ot-tgl-cntr{padding-left:13px}#onetrust-pc-sdk .ot-acc-grpcntr .ot-acc-grpdesc{margin-bottom:5px}#onetrust-pc-sdk .ot-acc-grpcntr .ot-subgrp-cntr{border-top:1px solid #d8d8d8}#onetrust-pc-sdk .ot-acc-grpcntr .ot-vlst-cntr+.ot-subgrp-cntr{border-top:none}#onetrust-pc-sdk .ot-acc-hdr .ot-arw-cntr+.ot-tgl-cntr,#onetrust-pc-sdk .ot-acc-txt h4+.ot-tgl-cntr{padding-left:13px}#onetrust-pc-sdk .ot-pli-hdr~.ot-cat-item .ot-subgrp&gt;h5,#onetrust-pc-sdk .ot-pli-hdr~.ot-cat-item .ot-cat-header{width:calc(100% - 145px)}#onetrust-pc-sdk .ot-pli-hdr~.ot-cat-item h5+.ot-tgl-cntr,#onetrust-pc-sdk .ot-pli-hdr~.ot-cat-item .ot-cat-header+.ot-tgl{padding-left:28px}#onetrust-pc-sdk .ot-sel-all-hdr,#onetrust-pc-sdk .ot-sel-all-chkbox{display:inline-block;width:100%;position:relative}#onetrust-pc-sdk .ot-sel-all-chkbox{z-index:1}#onetrust-pc-sdk .ot-sel-all{margin:0;position:relative;padding-right:23px;float:right}#onetrust-pc-sdk .ot-consent-hdr,#onetrust-pc-sdk .ot-li-hdr{float:right;font-size:.812em;line-height:normal;text-align:center;word-break:break-word;word-wrap:break-word}#onetrust-pc-sdk .ot-li-hdr{max-width:100px;padding-right:10px}#onetrust-pc-sdk .ot-consent-hdr{max-width:55px}#onetrust-pc-sdk #ot-selall-licntr{display:block;width:21px;height:auto;float:right;position:relative;right:80px}#onetrust-pc-sdk #ot-selall-licntr label{position:absolute}#onetrust-pc-sdk .ot-ven-ctgl{margin-left:66px}#onetrust-pc-sdk .ot-ven-litgl+.ot-arw-cntr{margin-left:81px}#onetrust-pc-sdk .ot-enbl-chr .ot-host-cnt .ot-tgl-cntr{width:auto}#onetrust-pc-sdk #ot-lst-cnt:not(.ot-host-cnt) .ot-tgl-cntr{width:auto;top:auto;height:20px}#onetrust-pc-sdk #ot-lst-cnt .ot-chkbox{position:relative;display:inline-block;width:20px;height:20px}#onetrust-pc-sdk #ot-lst-cnt .ot-chkbox label{position:absolute;padding:0;width:20px;height:20px}#onetrust-pc-sdk #ot-lst-cnt .ot-vnd-info-cntr{border:1px solid #d8d8d8;padding:.75rem 2rem;padding-bottom:0;width:auto;margin-top:.5rem}#onetrust-pc-sdk .ot-acc-grpdesc+.ot-leg-btn-container{padding-left:20px;padding-right:20px;width:calc(100% - 40px);margin-bottom:5px}#onetrust-pc-sdk .ot-subgrp .ot-leg-btn-container{margin-bottom:5px}#onetrust-pc-sdk #ot-ven-lst .ot-leg-btn-container{margin-top:10px}#onetrust-pc-sdk .ot-leg-btn-container{display:inline-block;width:100%;margin-bottom:10px}#onetrust-pc-sdk .ot-leg-btn-container button{height:auto;padding:6.5px 8px;margin-bottom:0;letter-spacing:0;font-size:.75em;line-height:normal}#onetrust-pc-sdk .ot-leg-btn-container svg{display:none;height:14px;width:14px;padding-right:5px;vertical-align:sub}#onetrust-pc-sdk .ot-active-leg-btn{cursor:default;pointer-events:none}#onetrust-pc-sdk .ot-active-leg-btn svg{display:inline-block}#onetrust-pc-sdk .ot-remove-objection-handler{text-decoration:underline;padding:0;font-size:.75em;font-weight:600;line-height:1;padding-left:10px}#onetrust-pc-sdk .ot-obj-leg-btn-handler span{font-weight:bold;text-align:center;font-size:inherit;line-height:1.5}#onetrust-pc-sdk.ot-close-btn-link #close-pc-btn-handler{border:none;height:auto;line-height:1.5;text-decoration:underline;font-size:.69em;background:none;right:15px;top:15px;width:auto;font-weight:normal}#onetrust-pc-sdk .ot-pgph-link{font-size:.813em !important;margin-top:5px;position:relative}#onetrust-pc-sdk .ot-pgph-link.ot-pgph-link-subgroup{margin-bottom:1rem}#onetrust-pc-sdk .ot-pgph-contr{margin:0 2.5rem}#onetrust-pc-sdk .ot-pgph-title{font-size:1.18rem;margin-bottom:2rem}#onetrust-pc-sdk .ot-pgph-desc{font-size:1rem;font-weight:400;margin-bottom:2rem;line-height:1.5rem}#onetrust-pc-sdk .ot-pgph-desc:not(:last-child):after{content:\&quot;\&quot;;width:96%;display:block;margin:0 auto;padding-bottom:2rem;border-bottom:1px solid #e9e9e9}#onetrust-pc-sdk .ot-cat-header{float:left;font-weight:600;font-size:.875em;line-height:1.5;max-width:90%;vertical-align:middle}#onetrust-pc-sdk .ot-vnd-item&gt;button:focus{outline:#000 solid 2px}#onetrust-pc-sdk .ot-vnd-item&gt;button{position:absolute;cursor:pointer;width:100%;height:100%;margin:0;top:0;left:0;z-index:1;max-width:none;border:none}#onetrust-pc-sdk .ot-vnd-item&gt;button[aria-expanded=false]~.ot-acc-txt{margin-top:0;max-height:0;opacity:0;overflow:hidden;width:100%;transition:.25s ease-out;display:none}#onetrust-pc-sdk .ot-vnd-item&gt;button[aria-expanded=true]~.ot-acc-txt{transition:.1s ease-in;margin-top:10px;width:100%;overflow:auto;display:block}#onetrust-pc-sdk .ot-vnd-item&gt;button[aria-expanded=true]~.ot-acc-grpcntr{width:auto;margin-top:0px;padding-bottom:10px}#onetrust-pc-sdk .ot-accordion-layout.ot-cat-item{position:relative;border-radius:2px;margin:0;padding:0;border:1px solid #d8d8d8;border-top:none;width:calc(100% - 2px);float:left}#onetrust-pc-sdk .ot-accordion-layout.ot-cat-item:first-of-type{margin-top:10px;border-top:1px solid #d8d8d8}#onetrust-pc-sdk .ot-accordion-layout .ot-acc-grpdesc{padding-left:20px;padding-right:20px;width:calc(100% - 40px);font-size:.812em;margin-bottom:10px;margin-top:15px}#onetrust-pc-sdk .ot-accordion-layout .ot-acc-grpdesc&gt;ul{padding-top:10px}#onetrust-pc-sdk .ot-accordion-layout .ot-acc-grpdesc&gt;ul li{padding-top:0;line-height:1.5;padding-bottom:10px}#onetrust-pc-sdk .ot-accordion-layout div+.ot-acc-grpdesc{margin-top:5px}#onetrust-pc-sdk .ot-accordion-layout .ot-vlst-cntr:first-child{margin-top:10px}#onetrust-pc-sdk .ot-accordion-layout .ot-vlst-cntr:last-child,#onetrust-pc-sdk .ot-accordion-layout .ot-hlst-cntr:last-child{margin-bottom:5px}#onetrust-pc-sdk .ot-accordion-layout .ot-acc-hdr{padding-top:11.5px;padding-bottom:11.5px;padding-left:20px;padding-right:20px;width:calc(100% - 40px);display:inline-block}#onetrust-pc-sdk .ot-accordion-layout .ot-acc-txt{width:100%;padding:0}#onetrust-pc-sdk .ot-accordion-layout .ot-subgrp-cntr{padding-left:20px;padding-right:15px;padding-bottom:0;width:calc(100% - 35px)}#onetrust-pc-sdk .ot-accordion-layout .ot-subgrp{padding-right:5px}#onetrust-pc-sdk .ot-accordion-layout .ot-acc-grpcntr{z-index:1;position:relative}#onetrust-pc-sdk .ot-accordion-layout .ot-cat-header+.ot-arw-cntr{position:absolute;top:50%;transform:translateY(-50%);right:20px;margin-top:-2px}#onetrust-pc-sdk .ot-accordion-layout .ot-cat-header+.ot-arw-cntr .ot-arw{width:15px;height:20px;margin-left:5px;color:dimgray}#onetrust-pc-sdk .ot-accordion-layout .ot-cat-header{float:none;color:#2e3644;margin:0;display:inline-block;height:auto;word-wrap:break-word;min-height:inherit}#onetrust-pc-sdk .ot-accordion-layout .ot-vlst-cntr,#onetrust-pc-sdk .ot-accordion-layout .ot-hlst-cntr{padding-left:20px;width:calc(100% - 20px);display:inline-block;margin-top:0;padding-bottom:2px}#onetrust-pc-sdk .ot-accordion-layout .ot-acc-hdr{position:relative;min-height:25px}#onetrust-pc-sdk .ot-accordion-layout h4~.ot-tgl,#onetrust-pc-sdk .ot-accordion-layout h4~.ot-always-active{position:absolute;top:50%;transform:translateY(-50%);right:20px}#onetrust-pc-sdk .ot-accordion-layout h4~.ot-tgl+.ot-tgl{right:95px}#onetrust-pc-sdk .ot-accordion-layout .category-vendors-list-handler,#onetrust-pc-sdk .ot-accordion-layout .category-vendors-list-handler+a{margin-top:5px}#onetrust-pc-sdk #ot-lst-cnt{margin-top:1rem;max-height:calc(100% - 96px)}#onetrust-pc-sdk #ot-lst-cnt .ot-vnd-info-cntr{border:1px solid #d8d8d8;padding:.75rem 2rem;padding-bottom:0;width:auto;margin-top:.5rem}#onetrust-pc-sdk #ot-lst-cnt .ot-vnd-info{margin-bottom:1rem;padding-left:.75rem;padding-right:.75rem;display:flex;flex-direction:column}#onetrust-pc-sdk #ot-lst-cnt .ot-vnd-info[data-vnd-info-key*=DPOEmail]{border-top:1px solid #d8d8d8;padding-top:1rem}#onetrust-pc-sdk #ot-lst-cnt .ot-vnd-info[data-vnd-info-key*=DPOLink]{border-bottom:1px solid #d8d8d8;padding-bottom:1rem}#onetrust-pc-sdk #ot-lst-cnt .ot-vnd-info .ot-vnd-lbl{font-weight:bold;font-size:.85em;margin-bottom:.5rem}#onetrust-pc-sdk #ot-lst-cnt .ot-vnd-info .ot-vnd-cnt{margin-left:.5rem;font-weight:500;font-size:.85rem}#onetrust-pc-sdk .ot-vs-list,#onetrust-pc-sdk .ot-vnd-serv{width:auto;padding:1rem 1.25rem;padding-bottom:0}#onetrust-pc-sdk .ot-vs-list .ot-vnd-serv-hdr-cntr,#onetrust-pc-sdk .ot-vnd-serv .ot-vnd-serv-hdr-cntr{padding-bottom:.75rem;border-bottom:1px solid #d8d8d8}#onetrust-pc-sdk .ot-vs-list .ot-vnd-serv-hdr-cntr .ot-vnd-serv-hdr,#onetrust-pc-sdk .ot-vnd-serv .ot-vnd-serv-hdr-cntr .ot-vnd-serv-hdr{font-weight:600;font-size:.95em;line-height:2;margin-left:.5rem}#onetrust-pc-sdk .ot-vs-list .ot-vnd-item,#onetrust-pc-sdk .ot-vnd-serv .ot-vnd-item{border:none;margin:0;padding:0}#onetrust-pc-sdk .ot-vs-list .ot-vnd-item button,#onetrust-pc-sdk .ot-vnd-serv .ot-vnd-item button{outline:none;border-bottom:1px solid #d8d8d8}#onetrust-pc-sdk .ot-vs-list .ot-vnd-item button[aria-expanded=true],#onetrust-pc-sdk .ot-vnd-serv .ot-vnd-item button[aria-expanded=true]{border-bottom:none}#onetrust-pc-sdk .ot-vs-list .ot-vnd-item:first-child,#onetrust-pc-sdk .ot-vnd-serv .ot-vnd-item:first-child{margin-top:.25rem;border-top:unset}#onetrust-pc-sdk .ot-vs-list .ot-vnd-item:last-child,#onetrust-pc-sdk .ot-vnd-serv .ot-vnd-item:last-child{margin-bottom:.5rem}#onetrust-pc-sdk .ot-vs-list .ot-vnd-item:last-child button,#onetrust-pc-sdk .ot-vnd-serv .ot-vnd-item:last-child button{border-bottom:none}#onetrust-pc-sdk .ot-vs-list .ot-vnd-item .ot-vnd-info-cntr,#onetrust-pc-sdk .ot-vnd-serv .ot-vnd-item .ot-vnd-info-cntr{border:1px solid #d8d8d8;padding:.75rem 1.75rem;padding-bottom:0;width:auto;margin-top:.5rem}#onetrust-pc-sdk .ot-vs-list .ot-vnd-item .ot-vnd-info,#onetrust-pc-sdk .ot-vnd-serv .ot-vnd-item .ot-vnd-info{margin-bottom:1rem;padding-left:.75rem;padding-right:.75rem;display:flex;flex-direction:column}#onetrust-pc-sdk .ot-vs-list .ot-vnd-item .ot-vnd-info[data-vnd-info-key*=DPOEmail],#onetrust-pc-sdk .ot-vnd-serv .ot-vnd-item .ot-vnd-info[data-vnd-info-key*=DPOEmail]{border-top:1px solid #d8d8d8;padding-top:1rem}#onetrust-pc-sdk .ot-vs-list .ot-vnd-item .ot-vnd-info[data-vnd-info-key*=DPOLink],#onetrust-pc-sdk .ot-vnd-serv .ot-vnd-item .ot-vnd-info[data-vnd-info-key*=DPOLink]{border-bottom:1px solid #d8d8d8;padding-bottom:1rem}#onetrust-pc-sdk .ot-vs-list .ot-vnd-item .ot-vnd-info .ot-vnd-lbl,#onetrust-pc-sdk .ot-vnd-serv .ot-vnd-item .ot-vnd-info .ot-vnd-lbl{font-weight:bold;font-size:.85em;margin-bottom:.5rem}#onetrust-pc-sdk .ot-vs-list .ot-vnd-item .ot-vnd-info .ot-vnd-cnt,#onetrust-pc-sdk .ot-vnd-serv .ot-vnd-item .ot-vnd-info .ot-vnd-cnt{margin-left:.5rem;font-weight:500;font-size:.85rem}#onetrust-pc-sdk .ot-vs-list.ot-vnd-subgrp-cnt,#onetrust-pc-sdk .ot-vnd-serv.ot-vnd-subgrp-cnt{padding-left:40px}#onetrust-pc-sdk .ot-vs-list.ot-vnd-subgrp-cnt .ot-vnd-serv-hdr-cntr .ot-vnd-serv-hdr,#onetrust-pc-sdk .ot-vnd-serv.ot-vnd-subgrp-cnt .ot-vnd-serv-hdr-cntr .ot-vnd-serv-hdr{font-size:.8em}#onetrust-pc-sdk .ot-vs-list.ot-vnd-subgrp-cnt .ot-cat-header,#onetrust-pc-sdk .ot-vnd-serv.ot-vnd-subgrp-cnt .ot-cat-header{font-size:.8em}#onetrust-pc-sdk .ot-subgrp-cntr .ot-vnd-serv{margin-bottom:1rem;padding:1rem .95rem}#onetrust-pc-sdk .ot-subgrp-cntr .ot-vnd-serv .ot-vnd-serv-hdr-cntr{padding-bottom:.75rem;border-bottom:1px solid #d8d8d8}#onetrust-pc-sdk .ot-subgrp-cntr .ot-vnd-serv .ot-vnd-serv-hdr-cntr .ot-vnd-serv-hdr{font-weight:700;font-size:.8em;line-height:20px;margin-left:.82rem}#onetrust-pc-sdk .ot-subgrp-cntr .ot-cat-header{font-weight:700;font-size:.8em;line-height:20px}#onetrust-pc-sdk .ot-subgrp-cntr ul.ot-subgrps .ot-vnd-serv .ot-vnd-lst-cont .ot-accordion-layout .ot-acc-hdr div.ot-chkbox{margin-left:.82rem}#onetrust-pc-sdk .ot-vs-config .ot-acc-hdr,#onetrust-pc-sdk ul.ot-subgrps .ot-acc-hdr,#onetrust-pc-sdk .ot-subgrp-cntr ul.ot-subgrps .ot-acc-hdr,#onetrust-pc-sdk .ot-vs-list .ot-vnd-item .ot-acc-hdr,#onetrust-pc-sdk .ot-vnd-serv .ot-vnd-item .ot-acc-hdr,#onetrust-pc-sdk #ot-pc-lst .ot-vs-list .ot-vnd-item .ot-acc-hdr,#onetrust-pc-sdk .ot-accordion-layout.ot-checkbox-consent .ot-acc-hdr{padding:.7rem 0;margin:0;display:flex;width:100%;align-items:center;justify-content:space-between}#onetrust-pc-sdk .ot-vs-config .ot-acc-hdr div:first-child,#onetrust-pc-sdk ul.ot-subgrps .ot-acc-hdr div:first-child,#onetrust-pc-sdk .ot-subgrp-cntr ul.ot-subgrps .ot-acc-hdr div:first-child,#onetrust-pc-sdk .ot-vs-list .ot-vnd-item .ot-acc-hdr div:first-child,#onetrust-pc-sdk .ot-vnd-serv .ot-vnd-item .ot-acc-hdr div:first-child,#onetrust-pc-sdk #ot-pc-lst .ot-vs-list .ot-vnd-item .ot-acc-hdr div:first-child,#onetrust-pc-sdk .ot-accordion-layout.ot-checkbox-consent .ot-acc-hdr div:first-child{margin-left:.5rem}#onetrust-pc-sdk .ot-vs-config .ot-acc-hdr div:last-child,#onetrust-pc-sdk ul.ot-subgrps .ot-acc-hdr div:last-child,#onetrust-pc-sdk .ot-subgrp-cntr ul.ot-subgrps .ot-acc-hdr div:last-child,#onetrust-pc-sdk .ot-vs-list .ot-vnd-item .ot-acc-hdr div:last-child,#onetrust-pc-sdk .ot-vnd-serv .ot-vnd-item .ot-acc-hdr div:last-child,#onetrust-pc-sdk #ot-pc-lst .ot-vs-list .ot-vnd-item .ot-acc-hdr div:last-child,#onetrust-pc-sdk .ot-accordion-layout.ot-checkbox-consent .ot-acc-hdr div:last-child{margin-right:.5rem;margin-left:.5rem}#onetrust-pc-sdk .ot-vs-config .ot-acc-hdr .ot-always-active,#onetrust-pc-sdk ul.ot-subgrps .ot-acc-hdr .ot-always-active,#onetrust-pc-sdk .ot-subgrp-cntr ul.ot-subgrps .ot-acc-hdr .ot-always-active,#onetrust-pc-sdk .ot-vs-list .ot-vnd-item .ot-acc-hdr .ot-always-active,#onetrust-pc-sdk .ot-vnd-serv .ot-vnd-item .ot-acc-hdr .ot-always-active,#onetrust-pc-sdk #ot-pc-lst .ot-vs-list .ot-vnd-item .ot-acc-hdr .ot-always-active,#onetrust-pc-sdk .ot-accordion-layout.ot-checkbox-consent .ot-acc-hdr .ot-always-active{position:relative;right:unset;top:unset;transform:unset}#onetrust-pc-sdk .ot-vs-config .ot-acc-hdr .ot-plus-minus,#onetrust-pc-sdk ul.ot-subgrps .ot-acc-hdr .ot-plus-minus,#onetrust-pc-sdk .ot-subgrp-cntr ul.ot-subgrps .ot-acc-hdr .ot-plus-minus,#onetrust-pc-sdk .ot-vs-list .ot-vnd-item .ot-acc-hdr .ot-plus-minus,#onetrust-pc-sdk .ot-vnd-serv .ot-vnd-item .ot-acc-hdr .ot-plus-minus,#onetrust-pc-sdk #ot-pc-lst .ot-vs-list .ot-vnd-item .ot-acc-hdr .ot-plus-minus,#onetrust-pc-sdk .ot-accordion-layout.ot-checkbox-consent .ot-acc-hdr .ot-plus-minus{top:0}#onetrust-pc-sdk .ot-vs-config .ot-acc-hdr .ot-arw-cntr,#onetrust-pc-sdk ul.ot-subgrps .ot-acc-hdr .ot-arw-cntr,#onetrust-pc-sdk .ot-subgrp-cntr ul.ot-subgrps .ot-acc-hdr .ot-arw-cntr,#onetrust-pc-sdk .ot-vs-list .ot-vnd-item .ot-acc-hdr .ot-arw-cntr,#onetrust-pc-sdk .ot-vnd-serv .ot-vnd-item .ot-acc-hdr .ot-arw-cntr,#onetrust-pc-sdk #ot-pc-lst .ot-vs-list .ot-vnd-item .ot-acc-hdr .ot-arw-cntr,#onetrust-pc-sdk .ot-accordion-layout.ot-checkbox-consent .ot-acc-hdr .ot-arw-cntr{float:none;top:unset;right:unset;transform:unset;margin-top:-2px;position:relative}#onetrust-pc-sdk .ot-vs-config .ot-acc-hdr .ot-cat-header,#onetrust-pc-sdk ul.ot-subgrps .ot-acc-hdr .ot-cat-header,#onetrust-pc-sdk .ot-subgrp-cntr ul.ot-subgrps .ot-acc-hdr .ot-cat-header,#onetrust-pc-sdk .ot-vs-list .ot-vnd-item .ot-acc-hdr .ot-cat-header,#onetrust-pc-sdk .ot-vnd-serv .ot-vnd-item .ot-acc-hdr .ot-cat-header,#onetrust-pc-sdk #ot-pc-lst .ot-vs-list .ot-vnd-item .ot-acc-hdr .ot-cat-header,#onetrust-pc-sdk .ot-accordion-layout.ot-checkbox-consent .ot-acc-hdr .ot-cat-header{flex:1;margin:0 .5rem}#onetrust-pc-sdk .ot-vs-config .ot-acc-hdr .ot-tgl,#onetrust-pc-sdk ul.ot-subgrps .ot-acc-hdr .ot-tgl,#onetrust-pc-sdk .ot-subgrp-cntr ul.ot-subgrps .ot-acc-hdr .ot-tgl,#onetrust-pc-sdk .ot-vs-list .ot-vnd-item .ot-acc-hdr .ot-tgl,#onetrust-pc-sdk .ot-vnd-serv .ot-vnd-item .ot-acc-hdr .ot-tgl,#onetrust-pc-sdk #ot-pc-lst .ot-vs-list .ot-vnd-item .ot-acc-hdr .ot-tgl,#onetrust-pc-sdk .ot-accordion-layout.ot-checkbox-consent .ot-acc-hdr .ot-tgl{position:relative;transform:none;right:0;top:0;float:none}#onetrust-pc-sdk .ot-vs-config .ot-acc-hdr .ot-chkbox,#onetrust-pc-sdk ul.ot-subgrps .ot-acc-hdr .ot-chkbox,#onetrust-pc-sdk .ot-subgrp-cntr ul.ot-subgrps .ot-acc-hdr .ot-chkbox,#onetrust-pc-sdk .ot-vs-list .ot-vnd-item .ot-acc-hdr .ot-chkbox,#onetrust-pc-sdk .ot-vnd-serv .ot-vnd-item .ot-acc-hdr .ot-chkbox,#onetrust-pc-sdk #ot-pc-lst .ot-vs-list .ot-vnd-item .ot-acc-hdr .ot-chkbox,#onetrust-pc-sdk .ot-accordion-layout.ot-checkbox-consent .ot-acc-hdr .ot-chkbox{position:relative;margin:0 .5rem}#onetrust-pc-sdk .ot-vs-config .ot-acc-hdr .ot-chkbox label,#onetrust-pc-sdk ul.ot-subgrps .ot-acc-hdr .ot-chkbox label,#onetrust-pc-sdk .ot-subgrp-cntr ul.ot-subgrps .ot-acc-hdr .ot-chkbox label,#onetrust-pc-sdk .ot-vs-list .ot-vnd-item .ot-acc-hdr .ot-chkbox label,#onetrust-pc-sdk .ot-vnd-serv .ot-vnd-item .ot-acc-hdr .ot-chkbox label,#onetrust-pc-sdk #ot-pc-lst .ot-vs-list .ot-vnd-item .ot-acc-hdr .ot-chkbox label,#onetrust-pc-sdk .ot-accordion-layout.ot-checkbox-consent .ot-acc-hdr .ot-chkbox label{padding:0}#onetrust-pc-sdk .ot-vs-config .ot-acc-hdr .ot-chkbox label::before,#onetrust-pc-sdk ul.ot-subgrps .ot-acc-hdr .ot-chkbox label::before,#onetrust-pc-sdk .ot-subgrp-cntr ul.ot-subgrps .ot-acc-hdr .ot-chkbox label::before,#onetrust-pc-sdk .ot-vs-list .ot-vnd-item .ot-acc-hdr .ot-chkbox label::before,#onetrust-pc-sdk .ot-vnd-serv .ot-vnd-item .ot-acc-hdr .ot-chkbox label::before,#onetrust-pc-sdk #ot-pc-lst .ot-vs-list .ot-vnd-item .ot-acc-hdr .ot-chkbox label::before,#onetrust-pc-sdk .ot-accordion-layout.ot-checkbox-consent .ot-acc-hdr .ot-chkbox label::before{position:relative}#onetrust-pc-sdk .ot-vs-config .ot-acc-hdr .ot-chkbox input,#onetrust-pc-sdk ul.ot-subgrps .ot-acc-hdr .ot-chkbox input,#onetrust-pc-sdk .ot-subgrp-cntr ul.ot-subgrps .ot-acc-hdr .ot-chkbox input,#onetrust-pc-sdk .ot-vs-list .ot-vnd-item .ot-acc-hdr .ot-chkbox input,#onetrust-pc-sdk .ot-vnd-serv .ot-vnd-item .ot-acc-hdr .ot-chkbox input,#onetrust-pc-sdk #ot-pc-lst .ot-vs-list .ot-vnd-item .ot-acc-hdr .ot-chkbox input,#onetrust-pc-sdk .ot-accordion-layout.ot-checkbox-consent .ot-acc-hdr .ot-chkbox input{position:absolute;cursor:pointer;width:100%;height:100%;opacity:0;margin:0;top:0;left:0;z-index:1}#onetrust-pc-sdk .ot-subgrp-cntr ul.ot-subgrps li.ot-subgrp .ot-acc-hdr h5.ot-cat-header,#onetrust-pc-sdk .ot-subgrp-cntr ul.ot-subgrps li.ot-subgrp .ot-acc-hdr h4.ot-cat-header{margin:0}#onetrust-pc-sdk .ot-vs-config .ot-subgrp-cntr ul.ot-subgrps li.ot-subgrp h5{top:0;line-height:20px}#onetrust-pc-sdk .ot-vs-list{display:flex;flex-direction:column;padding:0;margin:.5rem 4px}#onetrust-pc-sdk .ot-vs-selc-all{display:flex;padding:0;float:unset;align-items:center;justify-content:flex-start}#onetrust-pc-sdk .ot-vs-selc-all.ot-toggle-conf{justify-content:flex-end}#onetrust-pc-sdk .ot-vs-selc-all.ot-toggle-conf.ot-caret-conf .ot-sel-all-chkbox{margin-right:48px}#onetrust-pc-sdk .ot-vs-selc-all.ot-toggle-conf .ot-sel-all-chkbox{margin:0;padding:0;margin-right:14px;justify-content:flex-end}#onetrust-pc-sdk .ot-vs-selc-all.ot-toggle-conf #ot-selall-vencntr.ot-chkbox,#onetrust-pc-sdk .ot-vs-selc-all.ot-toggle-conf #ot-selall-vencntr.ot-tgl{display:inline-block;right:unset;width:auto;height:auto;float:none}#onetrust-pc-sdk .ot-vs-selc-all.ot-toggle-conf #ot-selall-vencntr label{width:45px;height:25px}#onetrust-pc-sdk .ot-vs-selc-all .ot-sel-all-chkbox{margin-right:11px;margin-left:.75rem;display:flex;align-items:center}#onetrust-pc-sdk .ot-vs-selc-all .sel-all-hdr{margin:0 1.25rem;font-size:.812em;line-height:normal;text-align:center;word-break:break-word;word-wrap:break-word}#onetrust-pc-sdk .ot-vnd-list-cnt #ot-selall-vencntr.ot-chkbox{float:unset;right:0}#onetrust-pc-sdk[dir=rtl] #ot-back-arw,#onetrust-pc-sdk[dir=rtl] input~.ot-acc-hdr .ot-arw{transform:rotate(180deg);-o-transform:rotate(180deg);-ms-transform:rotate(180deg);-webkit-transform:rotate(180deg)}#onetrust-pc-sdk[dir=rtl] input:checked~.ot-acc-hdr .ot-arw{transform:rotate(270deg);-o-transform:rotate(270deg);-ms-transform:rotate(270deg);-webkit-transform:rotate(270deg)}#onetrust-pc-sdk[dir=rtl] .ot-chkbox label::after{transform:rotate(45deg);-webkit-transform:rotate(45deg);-o-transform:rotate(45deg);-ms-transform:rotate(45deg);border-left:0;border-right:3px solid}#onetrust-pc-sdk[dir=rtl] .ot-search-cntr&gt;svg{right:0}@media only screen and (max-width: 600px){#onetrust-pc-sdk.otPcCenter{left:0;min-width:100%;height:100%;top:0;border-radius:0}#onetrust-pc-sdk #ot-pc-content,#onetrust-pc-sdk.ot-ftr-stacked .ot-btn-container{margin:1px 3px 0 10px;padding-right:10px;width:calc(100% - 23px)}#onetrust-pc-sdk .ot-btn-container button{max-width:none;letter-spacing:.01em}#onetrust-pc-sdk #close-pc-btn-handler{top:10px;right:17px}#onetrust-pc-sdk p{font-size:.7em}#onetrust-pc-sdk #ot-pc-hdr{margin:10px 10px 0 5px;width:calc(100% - 15px)}#onetrust-pc-sdk .vendor-search-handler{font-size:1em}#onetrust-pc-sdk #ot-back-arw{margin-left:12px}#onetrust-pc-sdk #ot-lst-cnt{margin:0;padding:0 5px 0 10px;min-width:95%}#onetrust-pc-sdk .switch+p{max-width:80%}#onetrust-pc-sdk .ot-ftr-stacked button{width:100%}#onetrust-pc-sdk #ot-fltr-cnt{max-width:320px;width:90%;border-top-right-radius:0;border-bottom-right-radius:0;margin:0;margin-left:15px;left:auto;right:40px;top:85px}#onetrust-pc-sdk .ot-fltr-opt{margin-left:25px;margin-bottom:10px}#onetrust-pc-sdk .ot-pc-refuse-all-handler{margin-bottom:0}#onetrust-pc-sdk #ot-fltr-cnt{right:40px}}@media only screen and (max-width: 476px){#onetrust-pc-sdk .ot-fltr-cntr,#onetrust-pc-sdk #ot-fltr-cnt{right:10px}#onetrust-pc-sdk #ot-anchor{right:25px}#onetrust-pc-sdk button{width:100%}#onetrust-pc-sdk:not(.ot-addtl-vendors) #ot-pc-lst:not(.ot-enbl-chr) .ot-sel-all{padding-right:9px}#onetrust-pc-sdk:not(.ot-addtl-vendors) #ot-pc-lst:not(.ot-enbl-chr) .ot-tgl-cntr{right:0}}@media only screen and (max-width: 896px)and (max-height: 425px)and (orientation: landscape){#onetrust-pc-sdk.otPcCenter{left:0;top:0;min-width:100%;height:100%;border-radius:0}#onetrust-pc-sdk .ot-pc-header{height:auto;min-height:20px}#onetrust-pc-sdk .ot-pc-header .ot-pc-logo{max-height:30px}#onetrust-pc-sdk .ot-pc-footer{max-height:60px;overflow-y:auto}#onetrust-pc-sdk #ot-pc-content,#onetrust-pc-sdk #ot-pc-lst{bottom:70px}#onetrust-pc-sdk.ot-ftr-stacked #ot-pc-content{bottom:70px}#onetrust-pc-sdk #ot-anchor{left:initial;right:50px}#onetrust-pc-sdk #ot-lst-title{margin-top:12px}#onetrust-pc-sdk #ot-lst-title *{font-size:inherit}#onetrust-pc-sdk #ot-pc-hdr input{margin-right:0;padding-right:45px}#onetrust-pc-sdk .switch+p{max-width:85%}#onetrust-pc-sdk #ot-sel-blk{position:static}#onetrust-pc-sdk #ot-pc-lst{overflow:auto}#onetrust-pc-sdk #ot-lst-cnt{max-height:none;overflow:initial}#onetrust-pc-sdk #ot-lst-cnt.no-results{height:auto}#onetrust-pc-sdk input{font-size:1em !important}#onetrust-pc-sdk p{font-size:.6em}#onetrust-pc-sdk #ot-fltr-modal{width:100%;top:0}#onetrust-pc-sdk ul li p,#onetrust-pc-sdk .category-vendors-list-handler,#onetrust-pc-sdk .category-vendors-list-handler+a,#onetrust-pc-sdk .category-host-list-handler{font-size:.6em}#onetrust-pc-sdk.ot-shw-fltr #ot-anchor{display:none !important}#onetrust-pc-sdk.ot-shw-fltr #ot-pc-lst{height:100% !important;overflow:hidden;top:0px}#onetrust-pc-sdk.ot-shw-fltr #ot-fltr-cnt{margin:0;height:100%;max-height:none;padding:10px;top:0;width:calc(100% - 20px);position:absolute;right:0;left:0;max-width:none}#onetrust-pc-sdk.ot-shw-fltr .ot-fltr-scrlcnt{max-height:calc(100% - 65px)}}\n            #onetrust-consent-sdk #onetrust-pc-sdk,\n                #onetrust-consent-sdk #ot-search-cntr,\n                #onetrust-consent-sdk #onetrust-pc-sdk .ot-switch.ot-toggle,\n                #onetrust-consent-sdk #onetrust-pc-sdk ot-grp-hdr1 .checkbox,\n                #onetrust-consent-sdk #onetrust-pc-sdk #ot-pc-title:after\n                ,#onetrust-consent-sdk #onetrust-pc-sdk #ot-sel-blk,\n                        #onetrust-consent-sdk #onetrust-pc-sdk #ot-fltr-cnt,\n                        #onetrust-consent-sdk #onetrust-pc-sdk #ot-anchor {\n                    background-color: #FFFFFF;\n                }\n               \n            #onetrust-consent-sdk #onetrust-pc-sdk h3,\n                #onetrust-consent-sdk #onetrust-pc-sdk h4,\n                #onetrust-consent-sdk #onetrust-pc-sdk h5,\n                #onetrust-consent-sdk #onetrust-pc-sdk h6,\n                #onetrust-consent-sdk #onetrust-pc-sdk p,\n                #onetrust-consent-sdk #onetrust-pc-sdk #ot-ven-lst .ot-ven-opts p,\n                #onetrust-consent-sdk #onetrust-pc-sdk #ot-pc-desc,\n                #onetrust-consent-sdk #onetrust-pc-sdk #ot-pc-title,\n                #onetrust-consent-sdk #onetrust-pc-sdk .ot-li-title,\n                #onetrust-consent-sdk #onetrust-pc-sdk .ot-sel-all-hdr span,\n                #onetrust-consent-sdk #onetrust-pc-sdk #ot-host-lst .ot-host-info,\n                #onetrust-consent-sdk #onetrust-pc-sdk #ot-fltr-modal #modal-header,\n                #onetrust-consent-sdk #onetrust-pc-sdk .ot-checkbox label span,\n                #onetrust-consent-sdk #onetrust-pc-sdk #ot-pc-lst #ot-sel-blk p,\n                #onetrust-consent-sdk #onetrust-pc-sdk #ot-pc-lst #ot-lst-title h3,\n                #onetrust-consent-sdk #onetrust-pc-sdk #ot-pc-lst .back-btn-handler p,\n                #onetrust-consent-sdk #onetrust-pc-sdk #ot-pc-lst .ot-ven-name,\n                #onetrust-consent-sdk #onetrust-pc-sdk #ot-pc-lst #ot-ven-lst .consent-category,\n                #onetrust-consent-sdk #onetrust-pc-sdk .ot-leg-btn-container .ot-inactive-leg-btn,\n                #onetrust-consent-sdk #onetrust-pc-sdk .ot-label-status,\n                #onetrust-consent-sdk #onetrust-pc-sdk .ot-chkbox label span,\n                #onetrust-consent-sdk #onetrust-pc-sdk #clear-filters-handler,\n                #onetrust-consent-sdk #onetrust-pc-sdk .ot-optout-signal\n                {\n                    color: #35393D;\n                }\n             #onetrust-consent-sdk #onetrust-pc-sdk .privacy-notice-link,\n                    #onetrust-consent-sdk #onetrust-pc-sdk .ot-pgph-link,\n                    #onetrust-consent-sdk #onetrust-pc-sdk .category-vendors-list-handler,\n                    #onetrust-consent-sdk #onetrust-pc-sdk .category-vendors-list-handler + a,\n                    #onetrust-consent-sdk #onetrust-pc-sdk .category-host-list-handler,\n                    #onetrust-consent-sdk #onetrust-pc-sdk .ot-ven-link,\n                    #onetrust-consent-sdk #onetrust-pc-sdk .ot-ven-legclaim-link,\n                    #onetrust-consent-sdk #onetrust-pc-sdk #ot-host-lst .ot-host-name a,\n                    #onetrust-consent-sdk #onetrust-pc-sdk #ot-host-lst .ot-acc-hdr .ot-host-expand,\n                    #onetrust-consent-sdk #onetrust-pc-sdk #ot-host-lst .ot-host-info a,\n                    #onetrust-consent-sdk #onetrust-pc-sdk #ot-pc-content #ot-pc-desc .ot-link-btn,\n                    #onetrust-consent-sdk #onetrust-pc-sdk .ot-vnd-serv .ot-vnd-item .ot-vnd-info a,\n                    #onetrust-consent-sdk #onetrust-pc-sdk #ot-lst-cnt .ot-vnd-info a\n                    {\n                        color: #06f;\n                    }\n            #onetrust-consent-sdk #onetrust-pc-sdk .category-vendors-list-handler:hover { text-decoration: underline;}\n            #onetrust-consent-sdk #onetrust-pc-sdk .ot-acc-grpcntr.ot-acc-txt,\n            #onetrust-consent-sdk #onetrust-pc-sdk .ot-acc-txt .ot-subgrp-tgl .ot-switch.ot-toggle\n             {\n                background-color: #E9E9E9;\n            }\n             #onetrust-consent-sdk #onetrust-pc-sdk #ot-host-lst .ot-host-info,\n                    #onetrust-consent-sdk #onetrust-pc-sdk .ot-acc-txt .ot-ven-dets\n                            {\n                                background-color: #E9E9E9;\n                            }\n        #onetrust-consent-sdk #onetrust-pc-sdk\n            button:not(#clear-filters-handler):not(.ot-close-icon):not(#filter-btn-handler):not(.ot-remove-objection-handler):not(.ot-obj-leg-btn-handler):not([aria-expanded]):not(.ot-link-btn),\n            #onetrust-consent-sdk #onetrust-pc-sdk .ot-leg-btn-container .ot-active-leg-btn {\n                background-color: #06f;border-color: #06f;\n                color: #FFFFFF;\n            }\n            #onetrust-consent-sdk #onetrust-pc-sdk .ot-active-menu {\n                border-color: #06f;\n            }\n            \n            #onetrust-consent-sdk #onetrust-pc-sdk .ot-leg-btn-container .ot-remove-objection-handler{\n                background-color: transparent;\n                border: 1px solid transparent;\n            }\n            #onetrust-consent-sdk #onetrust-pc-sdk .ot-leg-btn-container .ot-inactive-leg-btn {\n                background-color: #FFFFFF;\n                color: #78808E; border-color: #78808E;\n            }\n            #onetrust-consent-sdk #onetrust-pc-sdk .ot-tgl input:focus + .ot-switch, .ot-switch .ot-switch-nob, .ot-switch .ot-switch-nob:before,\n            #onetrust-pc-sdk .ot-checkbox input[type=\&quot;checkbox\&quot;]:focus + label::before,\n            #onetrust-pc-sdk .ot-chkbox input[type=\&quot;checkbox\&quot;]:focus + label::before {\n                outline-color: #000000;\n                outline-width: 1px;\n            }\n            #onetrust-pc-sdk .ot-host-item &gt; button:focus, #onetrust-pc-sdk .ot-ven-item &gt; button:focus {\n                border: 1px solid #000000;\n            }\n            #onetrust-consent-sdk #onetrust-pc-sdk *:focus,\n            #onetrust-consent-sdk #onetrust-pc-sdk .ot-vlst-cntr &gt; a:focus {\n               outline: 1px solid #000000;\n            }#onetrust-pc-sdk .ot-vlst-cntr .ot-ext-lnk,  #onetrust-pc-sdk .ot-ven-hdr .ot-ext-lnk{\n                    background-image: url(&apos;https://cdn.cookielaw.org/logos/static/ot_external_link.svg&apos;);\n                }\n            #onetrust-banner-sdk {\n  font-size: 16px !important;\n}\n#onetrust-pc-sdk .ot-tgl input:checked + .ot-switch .ot-switch-nob {\n  background-color: #06f !important;\n}\n.ot-sdk-cookie-policy{font-family:inherit;font-size:16px}.ot-sdk-cookie-policy.otRelFont{font-size:1rem}.ot-sdk-cookie-policy h3,.ot-sdk-cookie-policy h4,.ot-sdk-cookie-policy h6,.ot-sdk-cookie-policy p,.ot-sdk-cookie-policy li,.ot-sdk-cookie-policy a,.ot-sdk-cookie-policy th,.ot-sdk-cookie-policy #cookie-policy-description,.ot-sdk-cookie-policy .ot-sdk-cookie-policy-group,.ot-sdk-cookie-policy #cookie-policy-title{color:dimgray}.ot-sdk-cookie-policy #cookie-policy-description{margin-bottom:1em}.ot-sdk-cookie-policy h4{font-size:1.2em}.ot-sdk-cookie-policy h6{font-size:1em;margin-top:2em}.ot-sdk-cookie-policy th{min-width:75px}.ot-sdk-cookie-policy a,.ot-sdk-cookie-policy a:hover{background:#fff}.ot-sdk-cookie-policy thead{background-color:#f6f6f4;font-weight:bold}.ot-sdk-cookie-policy .ot-mobile-border{display:none}.ot-sdk-cookie-policy section{margin-bottom:2em}.ot-sdk-cookie-policy table{border-collapse:inherit}#ot-sdk-cookie-policy-v2.ot-sdk-cookie-policy{font-family:inherit;font-size:1rem}#ot-sdk-cookie-policy-v2.ot-sdk-cookie-policy h3,#ot-sdk-cookie-policy-v2.ot-sdk-cookie-policy h4,#ot-sdk-cookie-policy-v2.ot-sdk-cookie-policy h6,#ot-sdk-cookie-policy-v2.ot-sdk-cookie-policy p,#ot-sdk-cookie-policy-v2.ot-sdk-cookie-policy li,#ot-sdk-cookie-policy-v2.ot-sdk-cookie-policy a,#ot-sdk-cookie-policy-v2.ot-sdk-cookie-policy th,#ot-sdk-cookie-policy-v2.ot-sdk-cookie-policy #cookie-policy-description,#ot-sdk-cookie-policy-v2.ot-sdk-cookie-policy .ot-sdk-cookie-policy-group,#ot-sdk-cookie-policy-v2.ot-sdk-cookie-policy #cookie-policy-title{color:dimgray}#ot-sdk-cookie-policy-v2.ot-sdk-cookie-policy #cookie-policy-description{margin-bottom:1em}#ot-sdk-cookie-policy-v2.ot-sdk-cookie-policy .ot-sdk-subgroup{margin-left:1.5em}#ot-sdk-cookie-policy-v2.ot-sdk-cookie-policy #cookie-policy-description,#ot-sdk-cookie-policy-v2.ot-sdk-cookie-policy .ot-sdk-cookie-policy-group-desc,#ot-sdk-cookie-policy-v2.ot-sdk-cookie-policy .ot-table-header,#ot-sdk-cookie-policy-v2.ot-sdk-cookie-policy a,#ot-sdk-cookie-policy-v2.ot-sdk-cookie-policy span,#ot-sdk-cookie-policy-v2.ot-sdk-cookie-policy td{font-size:.9em}#ot-sdk-cookie-policy-v2.ot-sdk-cookie-policy td span,#ot-sdk-cookie-policy-v2.ot-sdk-cookie-policy td a{font-size:inherit}#ot-sdk-cookie-policy-v2.ot-sdk-cookie-policy .ot-sdk-cookie-policy-group{font-size:1em;margin-bottom:.6em}#ot-sdk-cookie-policy-v2.ot-sdk-cookie-policy .ot-sdk-cookie-policy-title{margin-bottom:1.2em}#ot-sdk-cookie-policy-v2.ot-sdk-cookie-policy&gt;section{margin-bottom:1em}#ot-sdk-cookie-policy-v2.ot-sdk-cookie-policy th{min-width:75px}#ot-sdk-cookie-policy-v2.ot-sdk-cookie-policy a,#ot-sdk-cookie-policy-v2.ot-sdk-cookie-policy a:hover{background:#fff}#ot-sdk-cookie-policy-v2.ot-sdk-cookie-policy thead{background-color:#f6f6f4;font-weight:bold}#ot-sdk-cookie-policy-v2.ot-sdk-cookie-policy .ot-mobile-border{display:none}#ot-sdk-cookie-policy-v2.ot-sdk-cookie-policy section{margin-bottom:2em}#ot-sdk-cookie-policy-v2.ot-sdk-cookie-policy .ot-sdk-subgroup ul li{list-style:disc;margin-left:1.5em}#ot-sdk-cookie-policy-v2.ot-sdk-cookie-policy .ot-sdk-subgroup ul li h4{display:inline-block}#ot-sdk-cookie-policy-v2.ot-sdk-cookie-policy table{border-collapse:inherit;margin:auto;border:1px solid #d7d7d7;border-radius:5px;border-spacing:initial;width:100%;overflow:hidden}#ot-sdk-cookie-policy-v2.ot-sdk-cookie-policy table th,#ot-sdk-cookie-policy-v2.ot-sdk-cookie-policy table td{border-bottom:1px solid #d7d7d7;border-right:1px solid #d7d7d7}#ot-sdk-cookie-policy-v2.ot-sdk-cookie-policy table tr:last-child td{border-bottom:0px}#ot-sdk-cookie-policy-v2.ot-sdk-cookie-policy table tr th:last-child,#ot-sdk-cookie-policy-v2.ot-sdk-cookie-policy table tr td:last-child{border-right:0px}#ot-sdk-cookie-policy-v2.ot-sdk-cookie-policy table .ot-host,#ot-sdk-cookie-policy-v2.ot-sdk-cookie-policy table .ot-cookies-type{width:25%}.ot-sdk-cookie-policy[dir=rtl]{text-align:left}#ot-sdk-cookie-policy h3{font-size:1.5em}@media only screen and (max-width: 530px){.ot-sdk-cookie-policy:not(#ot-sdk-cookie-policy-v2) table,.ot-sdk-cookie-policy:not(#ot-sdk-cookie-policy-v2) thead,.ot-sdk-cookie-policy:not(#ot-sdk-cookie-policy-v2) tbody,.ot-sdk-cookie-policy:not(#ot-sdk-cookie-policy-v2) th,.ot-sdk-cookie-policy:not(#ot-sdk-cookie-policy-v2) td,.ot-sdk-cookie-policy:not(#ot-sdk-cookie-policy-v2) tr{display:block}.ot-sdk-cookie-policy:not(#ot-sdk-cookie-policy-v2) thead tr{position:absolute;top:-9999px;left:-9999px}.ot-sdk-cookie-policy:not(#ot-sdk-cookie-policy-v2) tr{margin:0 0 1em 0}.ot-sdk-cookie-policy:not(#ot-sdk-cookie-policy-v2) tr:nth-child(odd),.ot-sdk-cookie-policy:not(#ot-sdk-cookie-policy-v2) tr:nth-child(odd) a{background:#f6f6f4}.ot-sdk-cookie-policy:not(#ot-sdk-cookie-policy-v2) td{border:none;border-bottom:1px solid #eee;position:relative;padding-left:50%}.ot-sdk-cookie-policy:not(#ot-sdk-cookie-policy-v2) td:before{position:absolute;height:100%;left:6px;width:40%;padding-right:10px}.ot-sdk-cookie-policy:not(#ot-sdk-cookie-policy-v2) .ot-mobile-border{display:inline-block;background-color:#e4e4e4;position:absolute;height:100%;top:0;left:45%;width:2px}.ot-sdk-cookie-policy:not(#ot-sdk-cookie-policy-v2) td:before{content:attr(data-label);font-weight:bold}.ot-sdk-cookie-policy:not(#ot-sdk-cookie-policy-v2) li{word-break:break-word;word-wrap:break-word}#ot-sdk-cookie-policy-v2.ot-sdk-cookie-policy table{overflow:hidden}#ot-sdk-cookie-policy-v2.ot-sdk-cookie-policy table td{border:none;border-bottom:1px solid #d7d7d7}#ot-sdk-cookie-policy-v2.ot-sdk-cookie-policy table,#ot-sdk-cookie-policy-v2.ot-sdk-cookie-policy thead,#ot-sdk-cookie-policy-v2.ot-sdk-cookie-policy tbody,#ot-sdk-cookie-policy-v2.ot-sdk-cookie-policy th,#ot-sdk-cookie-policy-v2.ot-sdk-cookie-policy td,#ot-sdk-cookie-policy-v2.ot-sdk-cookie-policy tr{display:block}#ot-sdk-cookie-policy-v2.ot-sdk-cookie-policy table .ot-host,#ot-sdk-cookie-policy-v2.ot-sdk-cookie-policy table .ot-cookies-type{width:auto}#ot-sdk-cookie-policy-v2.ot-sdk-cookie-policy tr{margin:0 0 1em 0}#ot-sdk-cookie-policy-v2.ot-sdk-cookie-policy td:before{height:100%;width:40%;padding-right:10px}#ot-sdk-cookie-policy-v2.ot-sdk-cookie-policy td:before{content:attr(data-label);font-weight:bold}#ot-sdk-cookie-policy-v2.ot-sdk-cookie-policy li{word-break:break-word;word-wrap:break-word}#ot-sdk-cookie-policy-v2.ot-sdk-cookie-policy thead tr{position:absolute;top:-9999px;left:-9999px;z-index:-9999}#ot-sdk-cookie-policy-v2.ot-sdk-cookie-policy table tr:last-child td{border-bottom:1px solid #d7d7d7;border-right:0px}#ot-sdk-cookie-policy-v2.ot-sdk-cookie-policy table tr:last-child td:last-child{border-bottom:0px}}\n                \n                    #ot-sdk-cookie-policy-v2.ot-sdk-cookie-policy h5,\n                    #ot-sdk-cookie-policy-v2.ot-sdk-cookie-policy h6,\n                    #ot-sdk-cookie-policy-v2.ot-sdk-cookie-policy li,\n                    #ot-sdk-cookie-policy-v2.ot-sdk-cookie-policy p,\n                    #ot-sdk-cookie-policy-v2.ot-sdk-cookie-policy a,\n                    #ot-sdk-cookie-policy-v2.ot-sdk-cookie-policy span,\n                    #ot-sdk-cookie-policy-v2.ot-sdk-cookie-policy td,\n                    #ot-sdk-cookie-policy-v2.ot-sdk-cookie-policy #cookie-policy-description {\n                        color: #696969;\n                    }\n                    #ot-sdk-cookie-policy-v2.ot-sdk-cookie-policy th {\n                        color: #696969;\n                    }\n                    #ot-sdk-cookie-policy-v2.ot-sdk-cookie-policy .ot-sdk-cookie-policy-group {\n                        color: #696969;\n                    }\n                    \n                    #ot-sdk-cookie-policy-v2.ot-sdk-cookie-policy #cookie-policy-title {\n                            color: #696969;\n                        }\n                    \n            \n                    #ot-sdk-cookie-policy-v2.ot-sdk-cookie-policy table th {\n                            background-color: #F8F8F8;\n                        }\n                    \n            #onetrust-banner-sdk { font-size:16px !important; }.ot-floating-button__front{background-image:url(&apos;https://cdn.cookielaw.org/logos/static/ot_persistent_cookie.png&apos;)}&quot;,40,3,39,[196],&quot;id=_6si-shortening&quot;,&quot;/* This stylesheet is created by 6sense */\n            .mktoForm .mktoFormRow:has(._6si_sff_filled) {\n                display: none;\n            }\n            .mktoForm .mktoFormRow ._6si_sff_filled {\n                display: none;\n            }\n            .hs-form .hs-form-field:has(._6si_sff_filled) {\n                display: none;\n            }\n            .hs-form .hs-form-field ._6si_sff_filled {\n                display: none;\n            }\n            form.form .form-field:not(.error):has(._6si_sff_filled) {\n                display: none;\n            }\n            form.form .form-field:not(.error) ._6si_sff_filled {\n                display: none;\n            }\n            .elq-form .row:has(._6si_sff_filled) {\n                display: none;\n            }\n            .elq-form .row ._6si_sff_filled {\n                display: none;\n            }\n            .elq-form .field-wrapper:has(._6si_sff_filled) {\n                display: none;\n            }\n            .elq-form .field-wrapper ._6si_sff_filled {\n                display: none;\n            }&quot;,41,5,[19,29],42,5,41,[19],&quot;\n            &quot;,43,5,42,[19],&quot;\n&quot;,44,5,43,&quot;NOSCRIPT&quot;,45,5,44,[19,217],46,5,45,[19,217],47,5,46,[19],&quot;            \n\n&quot;,48,5,47,&quot;DIV&quot;,&quot;id=samlSpinner&quot;,&quot;class=uk-hidden&quot;,49,5,48,[19,217],50,5,49,&quot;HEADER&quot;,&quot;id=header&quot;,&quot;class=new-bu-header &quot;,&quot;style=display: block;&quot;,51,5,50,[19],&quot;\n                        &quot;,52,5,51,&quot;SECTION&quot;,&quot;id=bu-skeleton&quot;,&quot;class=skeleton bu-skeleton search-skeleton&quot;,&quot;style=display: none;&quot;,53,5,52,[19,29],54,5,53,[238],&quot;id=dashboard&quot;,[251],55,5,54,[19],&quot;\n\n    &quot;,56,5,55,[19],&quot;\n\n            &quot;,57,5,56,[238],&quot;id=unsupported-browser&quot;,&quot;class=success-full uk-hidden&quot;,58,5,57,[19],&quot;\n\n        &quot;,59,5,58,&quot;FOOTER&quot;,&quot;class=footer  &quot;,&quot;id=footer&quot;,[251],60,5,59,[19],&quot;\n        \n\n                 &quot;,61,5,60,[19],&quot;\n                                        &quot;,62,5,61,[19],&quot;\n                &quot;,63,5,62,[19,256],64,5,63,[19,63],65,5,64,[19,29],66,5,65,[238],&quot;id=buildId&quot;,[240],67,5,66,[19],&quot;\n    \n    \n\n&quot;,68,5,67,[238],&quot;style=display: none; visibility: hidden;&quot;,69,5,68,[238,344],70,5,69,[19,217],71,5,70,[19,217],72,5,71,[238],&quot;id=onetrust-consent-sdk&quot;,73,15,[19],&quot;            Open Enterprise Server | Application Delivery Marketplace | OpenText\n    &quot;,74,48,[19],&quot;\n  &quot;,75,48,74,[238],&quot;class=ux-spinner-outer&quot;,76,48,75,[19,217],77,50,[19],&quot;\n\t&quot;,78,50,77,[238],&quot;class=uk-container uk-container-center uk-visible-large&quot;,79,50,78,[19,382],80,50,79,[238],&quot;class=uk-hidden-large&quot;,81,50,80,[19],&quot;\n\n\t\n\t\t\t\t\t\t&quot;,82,50,81,[238],&quot;id=sign-in-dropdown2&quot;,&quot;data-uk-dropdown={mode:&apos;click&apos;, boundary: &apos;body&apos;}&quot;,83,50,82,[19,382],84,50,83,[19,217],85,52,[19,20],86,52,85,[238],&quot;class=skeleton__navbar&quot;,87,52,86,[19,20],88,52,87,[238],&quot;class=category-container&quot;,89,52,88,[19,217],90,54,[238],91,57,[19,316],92,57,91,[238],&quot;class=uk-container uk-container-center uk-height-1-1&quot;,93,57,92,[19,212],94,59,[19,20],95,59,94,[238],&quot;class=uk-container uk-container-center uk-clearfix&quot;,96,59,95,[19,278],97,59,96,[238],&quot;id=accessManagerModal&quot;,&quot;class=uk-modal notifications-modal&quot;,98,59,97,[19,20],99,59,98,[238],&quot;id=legacyManagerModal&quot;,[469],100,59,99,[19],&quot;\n\n&quot;,101,66,[19],&quot; ▪▪▪▪▪▪▪-▪▪▪-▫▫▫▫-▫-▫-▫▫▫▫ | Mon Jun ▫▫ ▫▫:▫▫:▫▫ PDT ▫▫▫▫ &quot;,102,68,[19,217],103,68,102,[19,217],104,68,103,[19],&quot;\n\n\n\n&quot;,105,68,104,[19],&quot;\n\n\n&quot;,106,69,[19,217],107,69,106,[196],&quot;type=text/css&quot;,&quot;#onetrust-pc-sdk #ot-pc-title {\n     font-size: 1em !important;\n     margin-bottom: 10px !important;\n     margin-top: 10px !important;\n   }\n  \n   #onetrust-pc-sdk #ot-category-title {\n     font-size: 1em !important;\n   }\n  \n   #onetrust-pc-sdk .ot-cat-header {\n     float: left !important;\n     font-weight: 600 !important;\n     font-size: .875em !important;  \n   }\n  \n  #onetrust-pc-sdk .ot-accordion-layout .ot-acc-grpdesc {\n     font-size: .812em !important;\n     margin-bottom: 10px !important;\n     margin-top: 15px !important; \n  }\n  \n  #onetrust-pc-sdk .ot-cat-item&gt;button[aria-expanded=true]~.ot-acc-txt, #onetrust-pc-sdk .ot-acc-cntr&gt;button[aria-expanded=true]~.ot-acc-txt, #onetrust-pc-sdk li&gt;button[aria-expanded=true]~.ot-acc-txt {\n      margin-top: 10px !important;\n      width: 100% !important;\n  }&quot;,108,72,[238],&quot;class=onetrust-pc-dark-filter ot-hide ot-fade-in&quot;,109,72,108,[238],&quot;id=onetrust-pc-sdk&quot;,&quot;class=otPcCenter ot-hide ot-fade-in ot-sdk-not-webkit otRelFont&quot;,[10],&quot;aria-label=Preference center&quot;,&quot;role=region&quot;,110,75,[19,382],111,75,110,[238],&quot;class=ux-spinner-container&quot;,112,75,111,[19,369],113,78,[19],&quot;\n\t\t&quot;,114,78,113,[238],&quot;class=uk-grid&quot;,115,78,114,[19,382],116,80,[19],&quot;\n\t    &quot;,117,80,116,&quot;NAV&quot;,&quot;id=m-header&quot;,&quot;class=uk-navbar&quot;,118,80,117,[19],&quot;\n\n\t    \t    &quot;,119,80,118,[560],&quot;id=m-search&quot;,[562,263],120,80,119,[19],&quot;\n\n\t    &quot;,121,80,120,[560],&quot;id=m-menu&quot;,&quot;class=uk-navbar appdelivery&quot;,[263],122,80,121,[19,382],123,82,[19],&quot;\n\t\t\t\t\t\t\t&quot;,124,82,123,[238],&quot;id=sign-in-dd2&quot;,&quot;class=uk-dropdown sign-in&quot;,125,82,124,[19,382],126,86,[19,29],127,86,126,[238],&quot;class=uk-container uk-container-center&quot;,128,86,127,[19,20],129,88,[19,29],130,88,129,[238,611],131,88,130,[19,20],132,90,[238],&quot;class=uk-hidden-large search-accordion sidebar&quot;,133,90,132,[238],&quot;class=category-container appdelivery&quot;,134,90,133,[238],&quot;id=notificationsModal1&quot;,[469],135,90,134,[238],&quot;id=notificationsModal2&quot;,[469],136,90,135,[238],&quot;id=productModal&quot;,[469],137,92,[19,72],138,92,137,[238],&quot;class=uk-vertical-align uk-height-1-1&quot;,139,92,138,[19,316],140,95,[19,29],141,95,140,&quot;A&quot;,&quot;href=/marketplace/appdelivery&quot;,142,95,141,[19,29],143,95,142,[238],&quot;class=footer-links appdelivery&quot;,144,95,143,[19,543],145,95,144,[238],&quot;class=footer-copy&quot;,146,95,145,[19,20],147,97,[19,29],148,97,147,[238],&quot;class=uk-modal-dialog&quot;,149,97,148,[19,20],150,99,[19,29],151,99,150,[238,703],152,99,151,[19,20],153,109,[238],&quot;role=alertdialog&quot;,&quot;aria-modal=true&quot;,&quot;aria-describedby=ot-pc-desc&quot;,&quot;style=height: 100%;&quot;,&quot;aria-label=Privacy Preference Center&quot;,154,109,153,&quot;IFRAME&quot;,&quot;class=ot-text-resize&quot;,&quot;sandbox=allow-same-origin&quot;,&quot;style=position: absolute; top: -50000px; width: 100em;&quot;,&quot;aria-hidden=true&quot;,&quot;*O=true&quot;,155,111,[19],&quot;\n  \t\t&quot;,156,111,155,[238],&quot;class=ux-spinner ux-spinner-left&quot;,157,111,156,[19],&quot;\n   \t\t&quot;,158,111,157,[238],&quot;class=ux-spinner ux-spinner-right&quot;,159,111,158,[19,382],160,114,[19],&quot;\n\t\t\t&quot;,161,114,160,[238],&quot;class=uk-width-large-3-10 uk-width-xlarge-4-10&quot;,162,114,161,[19],&quot;\n\n\t\t\t&quot;,163,114,162,[238],&quot;class=uk-width-large-7-10 uk-width-xlarge-6-10 &quot;,164,114,163,[19,543],165,117,[19,762],166,117,165,[238,611],167,117,166,[19,556],168,119,[19],&quot;\n\t        &quot;,169,119,168,[238,611],170,119,169,[19,556],171,121,[19,796],172,121,171,[238,611],173,121,172,[19,556],174,124,[19],&quot;\n\t                            &quot;,175,124,174,&quot;SPAN&quot;,&quot;class=uk-dropdown-close uk-close&quot;,176,124,175,[19],&quot;\n\t\t\t\t\t\t\t\t&quot;,177,124,176,[238],&quot;class=sign-in-form&quot;,178,124,177,[19,543],179,127,[19,212],180,127,179,[238,548],181,127,180,[19,29],182,130,[19,212],183,130,182,[238,548],184,130,183,[19,29],185,132,[238],&quot;class=uk-container&quot;,&quot;data-uk-dropdown={mode: &apos;click&apos;}&quot;,186,133,[238,611],187,134,[238,703],188,135,[238,703],189,136,[238,703],190,138,[19,256],191,138,190,[238],&quot;class=uk-vertical-align-middle&quot;,192,138,191,[19,72],193,141,[19,212],194,141,193,[238],&quot;class=logo-mktp footer appdelivery&quot;,195,141,194,[19,29],196,143,[19,762],197,143,196,&quot;UL&quot;,&quot;class=uk-align-medium-left&quot;,198,143,197,[19,772],199,143,198,[908],&quot;class=uk-align-medium-right&quot;,200,143,199,[19,29],201,145,[19],&quot;Copyright © ▫▫▫▫ Open Text Corporation. All rights reserved.&quot;,202,148,[19,212],203,148,202,[672],&quot;id=accessManagerClose&quot;,&quot;class=uk-modal-close uk-close&quot;,&quot;aria-label=Close Modal&quot;,204,148,203,[19,283],205,148,204,&quot;H4&quot;,206,148,205,[19,212],207,148,206,&quot;P&quot;,208,148,207,[19,212],209,148,208,[238],&quot;class=modal-actions&quot;,210,148,209,[19,29],211,151,[19,212],212,151,211,[672,934,935,936],213,151,212,[19,212],214,151,213,&quot;H2&quot;,215,151,214,[19,212],216,151,215,&quot;FORM&quot;,&quot;action=/login&quot;,&quot;method=post&quot;,&quot;class=uk-form uk-form-stacked&quot;,217,151,216,[19,212],218,151,217,&quot;BR&quot;,219,151,218,[19,212],220,151,219,[672],&quot;href=https://login.saas.microfocus.com/msg/actions/showForgotMyPassword.action&quot;,221,151,220,[19,212],222,151,221,[999],223,151,222,[19,212],224,151,223,[672],&quot;href=https://login.software.microfocus.com/msg/actions/showLogin&quot;,225,151,224,[19,29],226,153,[238],&quot;class=ot-pc-header&quot;,227,153,226,[238],&quot;id=ot-pc-content&quot;,&quot;class=ot-pc-scrollbar&quot;,228,153,227,[260],&quot;id=ot-pc-lst&quot;,&quot;class=ot-hide ot-hosts-ui ot-pc-scrollbar&quot;,229,153,228,[238],&quot;class=ot-pc-footer ot-pc-scrollbar&quot;,230,153,229,[823],&quot;class=ot-scrn-rdr&quot;,&quot;aria-atomic=true&quot;,&quot;aria-live=polite&quot;,231,161,[19],&quot;\n\t\t\t\t&quot;,232,161,231,[238],&quot;class=logo-blk&quot;,&quot;style=&quot;,233,161,232,[19,762],234,163,[19],&quot;\n                \t\t\t\t\t&quot;,235,163,234,[908],&quot;class=primary-links appdelivery&quot;,236,163,235,[19],&quot;\n\t\t\t\t\n\t\t\t\t&quot;,237,163,236,[908],&quot;class=secondary-links&quot;,238,163,237,[19],&quot;\n\n\t\t\t    &quot;,239,163,238,[560],&quot;id=search&quot;,[562],240,163,239,[19,772],241,166,[19,1061],242,166,241,[19,1061],243,166,242,[238],&quot;class=navbar-content&quot;,244,166,243,[19,762],245,169,[19],&quot;\n\t            &quot;,246,169,245,[238],&quot;class=search-blk&quot;,247,169,246,[19,796],248,172,[19,1125],249,172,248,[908],250,172,249,[19,796],251,177,[19],&quot;\n                                    &quot;,252,177,251,[980],253,177,252,[19],&quot;\n\t\t\t\t\t\t\t\t\t&quot;,254,177,253,[952],&quot;id=username-label&quot;,255,177,254,[19,1158],256,177,255,[238,991],&quot;style=margin-bottom: 5px&quot;,257,177,256,[19,1158],258,177,257,[238,991],&quot;style=margin-bottom: 5px; display: none&quot;,&quot;id=pwdLoginDiv3&quot;,259,177,258,[19,1158],260,177,259,[238],&quot;id=loginerror-mobile&quot;,&quot;class=field-error&quot;,261,177,260,[19,1158],262,177,261,[999],263,177,262,[19,1158],264,177,263,[238],&quot;class=uk-form-row uk-text-center header-submit-btn&quot;,265,177,264,[19,1158],266,177,265,[238,1209],267,177,266,[19],&quot;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t&quot;,268,177,267,[238],&quot;class=uk-form-row uk-form-stacked uk-text-center&quot;,&quot;id=iamloginDiv&quot;,269,177,268,[19,1158],270,177,269,[238],&quot;id=loading-mobile&quot;,[263],271,177,270,[19],&quot;\n\n                \t\t\t\t&quot;,272,177,271,[988],&quot;id=smartLoginForm&quot;,&quot;action=/marketplace/smartlogin&quot;,[990,991],273,177,272,[19,1061],274,177,273,[238],&quot;class=sign-in-row&quot;,275,177,274,[19,593],276,180,[19,212],277,180,276,[238],&quot;class=skeleton__nav-item uk-width-large-3-10 uk-width-xlarge-4-10&quot;,278,180,277,[19],&quot;\n        \n            &quot;,279,180,278,[238],&quot;class=skeleton__nav-box uk-width-large-7-10 uk-width-xlarge-6-10&quot;,280,180,279,[19,29],281,183,[19,316],282,183,281,[238],&quot;class=uk-width-large-1-4 search-menu&quot;,283,183,282,[19,316],284,183,283,[238],&quot;class=uk-width-large-3-4&quot;,285,183,284,[19,212],286,185,[238],&quot;class=uk-accordion-title&quot;,287,185,286,[908],&quot;class=search-filter uk-dropdown uk-list uk-dropdown-close&quot;,288,186,[238,548],289,187,[672],&quot;id=notificationsClose&quot;,[935],290,187,289,[980],&quot;class=uk-text-left&quot;,291,187,290,[952],292,187,291,[238,961],293,188,[672,1322,935],294,188,293,[980,1328],295,188,294,[952],296,188,295,[238,961],297,189,[672,1322,935],298,189,297,[980,1328],299,189,298,[952],300,189,299,[988],&quot;class=uk-form&quot;,301,191,[19,58],302,191,301,[238],&quot;class=page-title&quot;,303,191,302,[19,58],304,191,303,[952],305,191,304,[19,256],306,194,[19],&quot;\n                AppDelivery &quot;,307,194,306,[823],308,194,307,[19,212],309,197,[19,829],310,197,309,&quot;LI&quot;,311,197,310,[19,1061],312,197,311,[1406],313,197,312,[19,1149],314,197,313,[1406],315,197,314,[19,72],316,197,315,[1406],317,197,316,[19],&quot;\n                \t\t\t&quot;,318,199,[19,1061],319,199,318,[1406],320,199,319,[19,1061],321,199,320,[1406],322,199,321,[19,316],323,199,322,[1406],324,199,323,[19,212],325,205,&quot;STRONG&quot;,326,205,325,[19],&quot; You need to migrate your account before you can continue&quot;,327,207,[19],&quot;You are currently using a &quot;,328,207,327,[1465],329,207,328,[19],&quot; type account to access Marketplace. Starting February ▫▫, ▫▫▫▫, Software Passport accounts are no longer supported by Micro Focus. You will need to create a new Access Manager account or migrate your Software Passport account to an Access Manager type account. \n            &quot;,330,207,329,[999],331,207,330,[19,212],332,207,331,[999],333,207,332,[19,212],334,207,333,[1465],335,207,334,[19,212],336,207,335,[999],337,207,336,[19],&quot;\n            Follow the link below to create a new Access Manager account. There will be instructions how to migrate your existing account information to the new Access Manager type account. Once complete, you will be re-directed back to Marketplace where you will be able to login using your new Access Manager account.\n            &quot;,338,209,[19,316],339,209,338,[672],&quot;id=createAccountButton&quot;,&quot;class=uk-button create uk-button-primary&quot;,&quot;href=https://my.microfocus.com/signup?referrer=marketplace&quot;,340,209,339,[19,316],341,209,340,[672],&quot;id=loginWithAM&quot;,[1525],342,209,341,[19],&quot;\n                  &quot;,343,209,342,[672],&quot;id=accessManagerClose2&quot;,&quot;class=uk-vertical-align-middle uk-modal-close&quot;,&quot;onclick={this.handleCloseModal}&quot;,344,209,343,[19,212],345,214,[1465],346,216,[19,316],347,216,346,[238],&quot;classname=uk-form-row&quot;,348,216,347,[19],&quot;\n\n\n            &quot;,349,216,348,&quot;BUTTON&quot;,&quot;type=submit&quot;,&quot;class=uk-button uk-button-primary&quot;,350,216,349,[19,283],351,220,[19],&quot;Forgot password?&quot;,352,224,[19],&quot;Sign\n            in with corporate credentials&quot;,353,226,[238],&quot;class=ot-pc-logo&quot;,&quot;role=img&quot;,&quot;aria-label=Company Logo&quot;,354,226,353,[1572],&quot;id=close-pc-btn-handler&quot;,&quot;class=ot-close-icon&quot;,&quot;aria-label=Close&quot;,&quot;style=background-image: url(\&quot;https://cdn.cookielaw.org/logos/static/ot_close.svg\&quot;);&quot;,355,227,[238],&quot;class=ot-optout-signal ot-hide&quot;,356,227,355,[980],&quot;id=ot-pc-title&quot;,357,227,356,[238],&quot;id=ot-pc-desc&quot;,358,227,357,[1572],&quot;id=accept-recommended-btn-handler&quot;,359,227,358,[260],&quot;class=ot-sdk-row ot-cat-grp&quot;,360,228,[238],&quot;id=ot-pc-hdr&quot;,361,228,360,[260],&quot;id=ot-lst-cnt&quot;,&quot;class=ot-host-cnt ot-pc-scrollbar&quot;,362,229,[238],&quot;class=ot-btn-container&quot;,363,229,362,[238],&quot;class=ot-pc-footer-logo&quot;,364,154,&quot;iframe:HTML&quot;,365,232,[19,72],366,232,365,[672],&quot;class=logo-mf&quot;,&quot;href=https://www.opentext.com/&quot;,&quot;target=&quot;,367,232,366,[19],&quot;\n\t\t\t\t\t\t\t\t\t\t\t&quot;,368,232,367,[672],&quot;class=mktp-logo&quot;,[673],369,232,368,[19,1158],370,235,[19],&quot;\n                \n                \t\t\t\t\t&quot;,371,235,370,[1406],372,235,371,[19],&quot;\n                \n\t\t\t\t\t&quot;,373,235,372,[1406],374,235,373,[19],&quot;\n                    \t\t\t\t\t\t&quot;,375,235,374,[1406],376,235,375,[19,1158],377,237,[19],&quot;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t&quot;,378,237,377,[1406],379,237,378,[19],&quot;\n\t\t\t\t\t&quot;,380,237,379,[1406],381,237,380,[19,1061],382,239,[19],&quot;\n\t\t\t        &quot;,383,239,382,[238,1130],384,239,383,[19],&quot;\n\t\t\t    &quot;,385,243,[19,1714],386,243,385,[238],&quot;class=nav-trigger&quot;,387,243,386,[19,1714],388,243,387,[238],&quot;class=search-trigger&quot;,[251],389,243,388,[19,1714],390,243,389,[238,1066],391,243,390,[19,1061],392,246,[19],&quot;\n\t                &quot;,393,246,392,[238,1130],&quot;novalidate=&quot;,&quot;action=/marketplace/appdelivery/search&quot;,&quot;method=GET&quot;,394,246,393,[19,1125],395,249,[19,1769],396,249,395,[1406],397,249,396,[19,1714],398,249,397,[1406],&quot;id=m-dashboard-all&quot;,&quot;class=edu-show&quot;,399,249,398,[19,1769],400,249,399,[1406],401,249,400,[19],&quot;\n\t                \t                &quot;,402,249,401,[1406,1797],403,249,402,[19,1714],404,249,403,[1406],&quot;id=user-mobile-profile&quot;,&quot;class=uk-hidden edu-show&quot;,405,249,404,[19,1714],406,249,405,[1406],&quot;id=user-mobile-sign-out&quot;,[1824],407,249,406,[19,1769],408,249,407,[1406],&quot;id=guest-mobile-sign-in&quot;,[1797],409,249,408,[19,1769],410,249,409,[1406],&quot;id=guest-mobile-sign-up&quot;,[1797],411,249,410,[19,1125],412,252,[19],&quot;Sign in&quot;,413,254,[19],&quot;Username&quot;,414,256,[19],&quot;\n\t\t\t\t\t\t\t\t\t\t&quot;,415,256,414,[238],&quot;class=uk-width-1-1&quot;,416,256,415,[19,1158],417,258,[19,1870],418,258,417,[952],&quot;id=password-label&quot;,419,258,418,[19,1661],420,258,419,[238,1875],421,258,420,[19,1158],422,260,[19,1158],423,264,[19,1870],424,264,423,&quot;INPUT&quot;,&quot;type=hidden&quot;,&quot;name=_csrf_token&quot;,&quot;value=••••&quot;,425,264,424,[19,1870],426,264,425,[1572],&quot;class=uk-button uk-button-primary uk-width-1-1&quot;,&quot;id=loadSamlIframeBtnId3&quot;,427,264,426,[19,1158],428,266,[19,1870],429,266,428,[1572,1921],&quot;id=submitSmartLoginId3&quot;,&quot;style=display: none&quot;,430,266,429,[19,1158],431,268,[19,1870],432,268,431,[672],&quot;href=/marketplace/ot/login&quot;,433,268,432,[19,1870],434,268,433,[823],&quot;data-uk-tooltip={pos:&apos;bottom-right&apos;, offset: 5}&quot;,&quot;class=hpp-tooltip&quot;,435,268,434,[19,1149],436,270,[19,1661],437,270,436,[238,374],438,270,437,[19,1158],439,272,[19],&quot;\n                                                                                                                                                                                                                                                                    \n                                                                                                                                                                                                                                                                                                            \n                                                                                                    \t\t\t\t\t\t&quot;,440,272,439,[1909],&quot;id=returnUrl3&quot;,[1910],&quot;name=returnUrl&quot;,[1912],441,272,440,[19],&quot;\n                                                                                \t\t\t\t\t&quot;,442,272,441,[238],&quot;class=uk-form-row uk-text-center forgot-password uk-hidden&quot;,443,272,442,[19,1061],444,274,[19],&quot;\n\t\t\t\t\tDon&apos;t have an account? &quot;,445,274,444,[672],&quot;href=/marketplace/appdelivery/signup&quot;,446,274,445,[19,1061],447,277,[19,316],448,277,447,[238,1066],449,277,448,[19,212],450,279,[19,316],451,279,450,[238],&quot;class=s-primary-links&quot;,452,279,451,[19,316],453,279,452,[238],&quot;class=s-secondary-links&quot;,454,279,453,[19,212],455,282,[19,72],456,282,455,[952],&quot;class=title&quot;,457,282,456,[19],&quot;\n                                            &quot;,458,282,457,[952],&quot;class=category-title&quot;,459,282,458,[19,256],460,282,459,[952,2061],461,282,460,[19,256],462,282,461,[952,2061],463,282,462,[19,256],464,282,463,[952,2061],465,282,464,[19,256],466,282,465,[952,2061],467,282,466,[19,256],468,282,467,[952,2061],469,282,468,[19,1149],470,284,[19,72],471,284,470,[952],&quot;class=product-title&quot;,472,284,471,[19,72],473,284,472,[238],&quot;class=skeleton__info_product filter&quot;,474,284,473,[19,72],475,284,474,[238],&quot;class=skeleton__info_product tab&quot;,476,284,475,[19,72],477,284,476,[238],&quot;class=skeleton__products first&quot;,478,284,477,[19,72],479,284,478,[238],&quot;class=skeleton__products&quot;,480,284,479,[19,316],481,286,[19],&quot;Open Enterprise Server&quot;,482,286,481,[19],&quot; &quot;,483,286,482,&quot;I&quot;,&quot;class=icon-down&quot;,484,288,[238],&quot;class=uk-width-large-1-4 &quot;,485,288,484,[238,1302],486,290,[19],&quot;You can now subscribe to updates&quot;,487,291,[19],&quot;You can now receive app and add-on update notifications for your products.&quot;,488,292,[1572],&quot;id=notificationsButton&quot;,[1573],&quot;value=Submit&quot;,[1525],489,292,488,[19],&quot;  &quot;,490,292,489,[672],&quot;id=notificationsClose2&quot;,[885],491,294,[19],&quot;Subscribe to notifications&quot;,492,295,[19],&quot;Please sign in to subscribe to updates and new releases on apps, add-ons and more.&quot;,493,296,[672,2187],&quot;href=/appdelivery/?returnUrl=/marketplace/appdelivery/category/oes&quot;,[1573,2189,1525],494,296,493,[19,2195],495,296,494,[672,2200,885],496,298,[19,2205],497,299,&quot;B&quot;,498,300,[238],499,302,[19],&quot;Your browser is not supported!&quot;,500,304,[19],&quot;Please upgrade to one of the following broswers: Internet Explorer ▫▫ (or greater) or the latest version of Chrome or Firefox&quot;,501,307,[19],&quot;Marketplace&quot;,502,310,[672],&quot;href=/marketplace/appdelivery/category/all&quot;,503,312,[672],&quot;href=/marketplace/appdelivery/contact&quot;,504,314,[672],&quot;href=https://community.microfocus.com/ot-marketplace/&quot;,&quot;target=_blank&quot;,505,316,[672],&quot;href=https://my.microfocus.com&quot;,[2256],506,319,[672],&quot;href=https://www.opentext.com/about/privacy&quot;,[2256],507,321,[672],&quot;href=https://www.microfocus.com/about/legal/#marketplace_terms_of_service&quot;,[2256],508,323,[672],&quot;href=#&quot;,&quot;class=ot-sdk-show-settings&quot;,509,325,[19],&quot;Notice:&quot;,510,328,[19],&quot;Software Passport&quot;,511,334,[19],&quot;How do I migrate to Access Manager?&quot;,512,339,[19],&quot;Create new account&quot;,513,341,[19],&quot;Login with Access Manager&quot;,514,343,[19],&quot;Cancel&quot;,515,345,[19],&quot;MyAccount sign in:&quot;,516,347,[19,72],517,347,516,[238],&quot;classname=uk-grid&quot;,518,347,517,[19,212],519,349,[19,1862],520,353,&quot;IMG&quot;,&quot;src=https://cdn.cookielaw.org/logos/b22adc29-a371-4aaa-a82b-043f0024fdb4/4a759162-9294-48ee-a8f5-36a1052d2bf7/7d5b66ec-4ffd-45f7-80d2-e68fac9b2e03/opentext-logo-cookie.jpeg&quot;,521,355,[238],&quot;class=ot-optout-icon&quot;,522,355,521,[823],523,356,[19],&quot;Privacy Preference Center&quot;,524,357,[19],&quot;When you visit any website, it may store or retrieve information on your browser, mostly in the form of cookies. This information might be about you, your preferences or your device and is mostly used to make the site work as you expect it to. The information does not usually directly identify you, but it can give you a more personalized web experience. Because we respect your right to privacy, you can choose not to allow some types of cookies. Click on the different category headings to find out more and change our default settings. However, blocking some types of cookies may impact your experience of the site and the services we are able to offer.\nBy clicking \&quot;Reject All\&quot;, all cookie categories will be disabled, except for the Strictly necessary cookies.\n            &quot;,525,357,524,[999],526,357,525,[672],&quot;href=https://www.opentext.com/about/cookie-policy&quot;,&quot;class=privacy-notice-link&quot;,&quot;rel=noopener&quot;,[2256],&quot;aria-label=Read our Cookie Policy, opens in a new tab&quot;,527,358,[19],&quot;Accept All&quot;,528,359,&quot;H3&quot;,&quot;id=ot-category-title&quot;,529,359,528,[238],&quot;class=ot-accordion-layout ot-cat-item ot-vs-config&quot;,&quot;data-optanongroupid=C0001&quot;,530,359,529,[238,2365],&quot;data-optanongroupid=C0002&quot;,531,359,530,[238,2365],&quot;data-optanongroupid=C0003&quot;,532,359,531,[238,2365],&quot;data-optanongroupid=C0004&quot;,533,359,532,[238,2365],&quot;data-optanongroupid=C0005&quot;,534,360,[238],&quot;id=ot-lst-title&quot;,535,360,534,[238],&quot;class=ot-lst-subhdr&quot;,536,361,[238],&quot;id=ot-sel-blk&quot;,537,361,536,[238],&quot;class=ot-sdk-row&quot;,538,362,[1572],&quot;class=ot-pc-refuse-all-handler&quot;,539,362,538,[19,2162],540,362,539,[1572],&quot;class=save-preference-btn-handler onetrust-close-btn-handler&quot;,541,363,[672],&quot;href=https://www.onetrust.com/products/cookie-consent/&quot;,[2256],&quot;rel=noopener noreferrer&quot;,&quot;aria-label=Powered by OneTrust Opens in a new Tab&quot;,542,364,[14],&quot;*B=about://blank&quot;,543,364,542,[24],544,366,[19,256],545,366,544,[2322],&quot;src=https://d3075pyijv0bbs.cloudfront.net/opentext_logo.svg&quot;,&quot;loading=lazy&quot;,546,366,545,[19,72],547,368,[19,593],548,368,547,&quot;H1&quot;,&quot;class=logo-mktp appdelivery&quot;,549,368,548,[19],&quot;\n\t\t\t\t\t\t&quot;,550,371,[19,2458],551,371,550,[238],&quot;data-uk-dropdown={mode:&apos;hover&apos;, remaintime: 200}&quot;,552,371,551,[19,1714],553,373,[19,2458],554,373,553,[238],&quot;id=member-db&quot;,[240],555,373,554,[19,2458],556,373,555,[238],&quot;id=guest-db&quot;,[2466],557,373,556,[19],&quot;\t\t\t\t\t\t\n\t\t\t\t\t&quot;,558,375,[672],&quot;href=/marketplace/appdelivery/join&quot;,559,378,[19,2458],560,378,559,[238],561,378,560,[19,1714],562,380,[19,2458],563,380,562,[238],&quot;id=sign-in-dropdown&quot;,&quot;data-uk-dropdown={mode:&apos;click&apos;}&quot;,564,380,563,[19],&quot;\n\n\n\n\n\t\t\t\t\t&quot;,565,383,[19],&quot;\n\t\t\t            &quot;,566,383,565,[238,1130,1774,1775,1776],567,383,566,[19,1726],568,386,[19,2458],569,386,568,[672],&quot;id=nav-icon&quot;,&quot;class=visible-xs visible-sm pull-right uk-float-right&quot;,&quot;href=javascript:void(0)&quot;,&quot;aria-label=Menu&quot;,570,386,569,[19,1714],571,388,[19,2458],572,388,571,&quot;svg:svg&quot;,&quot;version=1.1&quot;,&quot;id=Layer_1&quot;,&quot;xmlns=http://www.w3.org/2000/svg&quot;,&quot;xmlns:xlink=http://www.w3.org/1999/xlink&quot;,&quot;x=0px&quot;,&quot;y=0px&quot;,&quot;viewBox=0 0 21 21&quot;,&quot;enable-background=new 0 0 21 21&quot;,&quot;xml:space=preserve&quot;,&quot;width=20px&quot;,&quot;height=20px&quot;,573,388,572,[19,1714],574,390,[19,2458],575,390,574,[672],&quot;href=/appdelivery&quot;,576,390,575,[19,1714],577,393,[19,2458],578,393,577,&quot;LABEL&quot;,&quot;for=q-mobile&quot;,[240],579,393,578,[19],&quot;\n\t                    &quot;,580,393,579,[1909],&quot;type=text&quot;,&quot;autocomplete=off&quot;,&quot;placeholder=•••••• •••• •• •• ••••••••••&quot;,&quot;value=&quot;,&quot;name=q&quot;,&quot;id=q-mobile&quot;,&quot;ng-model=searchString&quot;,&quot;aria-label=Search Apps or by Product&quot;,581,393,580,[19,2598],582,393,581,[1572,1573],&quot;href=&quot;,[1574],&quot;aria-label=Search&quot;,583,393,582,[19,1769],584,396,[672,2247],&quot;target=_self&quot;,585,398,[19,2458],586,398,585,[238],&quot;id=member-mobile-db&quot;,[240],587,398,586,[19],&quot;\n\t\t                &quot;,588,398,587,[672],&quot;id=guest-mobile-db&quot;,&quot;class=dashboard-login&quot;,[2629],589,398,588,[19],&quot;\n\t\t            &quot;,590,400,[672,2498,2629],591,402,[672,2251,2629],592,404,[672],&quot;href=/marketplace/appdelivery/dashboard/profile&quot;,[2629],593,406,[672],&quot;id=mobile-signout&quot;,[2629],594,408,[19,2458],595,408,594,[672],&quot;id=guest-welcome2&quot;,596,408,595,[19],&quot;\n\n\t                &quot;,597,410,[672,2007,2629],598,415,[19,1661],599,415,598,[19,1661],600,415,599,[1909,2603],&quot;id=username3&quot;,&quot;name=_username3&quot;,[1875],&quot;placeholder=••••••••&quot;,&quot;autofocus=&quot;,&quot;aria-labelledby=username-label&quot;,601,415,600,[19],&quot;\n\n\t\t\t\t\t\t\t\t\t\t\t&quot;,602,415,601,[952,1192],603,415,602,[19,1870],604,418,[19],&quot;Password&quot;,605,420,[19],&quot;\n\t\t\t\t\t\t\t\t\t\t\t\t&quot;,606,420,605,[19,2725],607,420,606,[1909],&quot;type=password&quot;,&quot;id=password3&quot;,&quot;name=_password3&quot;,&quot;class=uk-width-1-1 &quot;,&quot;placeholder=Password&quot;,&quot;style=display: block&quot;,&quot;aria-labelledby=password-label&quot;,608,420,607,[19,2725],609,420,608,[952,1192],610,420,609,[19,1661],611,426,[19],&quot;Next&quot;,612,429,[19],&quot;Sign In&quot;,613,432,[19],&quot;OpenText employee login&quot;,614,434,[2166],&quot;class=icon-tooltip-info&quot;,615,437,[19,2725],616,437,615,[238,535],617,437,616,[19,1661],-618,442,[19,2458],619,442,618,[672],&quot;id=b-forgot-password&quot;,[1008],-620,442,619,[19,1714],621,445,[19],&quot;Sign up here&quot;,622,448,[19,2056],623,448,622,[672],&quot;class=logo&quot;,[1655],624,448,623,[19,256],625,448,624,[672,1666],&quot;href=/&quot;,626,448,625,[19,316],627,451,[19,2056],628,451,627,[238],&quot;class=skeleton__nav-text&quot;,629,451,628,[19,256],630,451,629,[238,2826],631,451,630,[19,256],632,451,631,[238,2826],633,451,632,[19,256],634,451,633,[238],&quot;class=skeleton__nav-text search-bar&quot;,635,451,634,[19,1149],636,453,[19,2056],637,453,636,[238,2826],638,453,637,[19,256],639,453,638,[238,2826],640,453,639,[19,256],641,453,640,[238,2826],642,453,641,[19,1149],643,456,[19],&quot; &quot;,644,458,[19,2886],645,460,[19,2886],646,462,[19,2886],647,464,[19,2886],648,466,[19,2886],649,468,[19,2886],650,471,[19,2886],651,473,[19,256],652,473,651,[238],&quot;class=skeleton__info_product_inner&quot;,653,473,652,[19,72],654,475,[19,256],655,475,654,[238,2915],656,475,655,[19,72],657,477,[19,256],658,477,657,[238],&quot;class=skeleton__product&quot;,659,477,658,[19,256],660,477,659,[238,2938],661,477,660,[19,256],662,477,661,[238,2938],663,477,662,[19,72],664,479,[19,256],665,479,664,[238,2938],666,479,665,[19,256],667,479,666,[238,2938],668,479,667,[19,256],669,479,668,[238,2938],670,479,669,[19,72],671,484,[238],&quot;class=uk-sticky-placeholder&quot;,&quot;style=height: 225.8px; margin: 15px 0px 0px;&quot;,672,485,[238],673,485,672,[238],&quot;class=uk-grid uk-grid-small &quot;,674,485,673,[908],&quot;class=uk-list&quot;,[263],675,485,674,[238],&quot;class=filters-blk&quot;,676,485,675,[260],&quot;id=search_results&quot;,&quot;class=search-results&quot;,677,488,[19],&quot;Yes, I want to subscribe&quot;,678,490,[19],&quot;Not now&quot;,679,493,[19,1862],680,495,[19,2300],681,497,[19],&quot;Select the products in which you would like to receive notifications.&quot;,682,498,[238],&quot;class=uk-grid checkbox-columns&quot;,683,498,682,[999],684,498,683,[238,961],685,502,[19],&quot;Categories&quot;,686,503,[19],&quot;Contact us&quot;,687,504,[19],&quot;Community&quot;,688,505,[19],&quot;My OpenText&quot;,689,506,[19],&quot;Privacy statement&quot;,690,507,[19],&quot;Terms of use&quot;,691,508,[19],&quot;Cookies Preferences&quot;,692,517,[19,256],693,517,692,[238],&quot;classname=uk-width-1-1&quot;,694,517,693,[19,212],695,517,694,[238,3081],696,517,695,[19,212],697,521,[2557,2560],698,526,[19],&quot;Read our Cookie Policy&quot;,699,528,[19],&quot; Manage Consent Preferences&quot;,700,529,[1572],&quot;aria-expanded=false&quot;,&quot;ot-accordion=true&quot;,&quot;aria-controls=ot-desc-id-C0001&quot;,&quot;aria-labelledby=ot-header-id-C0001 ot-status-id-C0001&quot;,701,529,700,[238],&quot;class=ot-acc-hdr ot-always-active-group&quot;,702,529,701,[238],&quot;class=ot-acc-grpcntr ot-acc-txt&quot;,703,530,[1572,3108,3109],&quot;aria-controls=ot-desc-id-C0002&quot;,&quot;aria-labelledby=ot-header-id-C0002&quot;,704,530,703,[238],&quot;class=ot-acc-hdr&quot;,705,530,704,[238,3121],706,531,[1572,3108,3109],&quot;aria-controls=ot-desc-id-C0003&quot;,&quot;aria-labelledby=ot-header-id-C0003&quot;,707,531,706,[238,3131],708,531,707,[238,3121],709,532,[1572,3108,3109],&quot;aria-controls=ot-desc-id-C0004&quot;,&quot;aria-labelledby=ot-header-id-C0004&quot;,710,532,709,[238,3131],711,532,710,[238,3121],712,533,[1572,3108,3109],&quot;aria-controls=ot-desc-id-C0005&quot;,&quot;aria-labelledby=ot-header-id-C0005&quot;,713,533,712,[238,3131],714,533,713,[238,3121],715,534,[1572],&quot;class=ot-link-btn back-btn-handler&quot;,&quot;aria-label=Back&quot;,716,534,715,[2359],717,535,[238],&quot;class=ot-search-cntr&quot;,718,535,717,[238],&quot;class=ot-fltr-cntr&quot;,719,535,718,[238],&quot;id=ot-anchor&quot;,720,535,719,[260],&quot;id=ot-fltr-modal&quot;,721,536,[238],&quot;class=ot-sel-all&quot;,722,537,[238],&quot;class=ot-sdk-column&quot;,723,538,[19],&quot;Reject All&quot;,724,540,[19],&quot;Confirm My Choices&quot;,725,541,[2322],&quot;src=https://cdn.cookielaw.org/logos/static/powered_by_logo.svg&quot;,726,548,[19],&quot;AppDelivery &quot;,727,548,726,[823],728,551,[19,593],729,551,728,[238],&quot;class=dropdown-trigger&quot;,730,551,729,[19,593],731,551,730,[238],&quot;class=uk-dropdown categories-caret uk-visible-large&quot;,732,551,731,[19,593],733,551,732,[238],&quot;class=uk-dropdown categories  uk-visible-large&quot;,734,551,733,[19,2458],735,554,[19,593],736,554,735,[238],&quot;id=admin-db-dd&quot;,[240,2466],737,554,736,[19],&quot;\n\n\t\t\t\t\t\t\t&quot;,738,554,737,[238],&quot;id=developer-db-dd&quot;,[240,2466],739,554,738,[19,3274],740,554,739,[238],&quot;id=approver-db-dd&quot;,[240,2466],741,554,740,[19,3274],742,554,741,[238],&quot;id=user-db-dd&quot;,[2466],743,554,742,[19],&quot;\n\n\t\t\t\t\t\t&quot;,744,556,[19,593],745,556,744,[238,3238],746,556,745,[19,593],747,556,746,[238],&quot;class=uk-dropdown dashboard-caret&quot;,748,556,747,[19,593],749,556,748,[238],&quot;class=uk-dropdown dashboard&quot;,750,556,749,[19,2458],751,558,[19],&quot;For developers&quot;,752,560,[19,593],753,560,752,[672,2251],754,560,753,[19,2458],755,563,[19,593],756,563,755,[672],&quot;id=member-welcome&quot;,[240],&quot;style=visibility:hidden&quot;,757,563,756,[19],&quot;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t&quot;,758,563,757,[672],&quot;id=guest-welcome&quot;,[3359],759,563,758,[19,3364],760,563,759,[238],&quot;id=sign-in-dd&quot;,[599],761,563,760,[19,2458],762,566,[19],&quot;\n                            \t\t\t\t\t\t\t&quot;,763,566,762,[2591],&quot;for=q&quot;,[240],764,566,763,[19],&quot;\n\t\t\t                &quot;,765,566,764,[1909,2603,2605,2606,2607],&quot;id=q&quot;,[2604,2609,2610],766,566,765,[19],&quot;\n\t\t\t\t\t\t\t\t\t\t                &quot;,767,566,766,[1572,1573,2619,1574,2621],768,566,767,[19,2527],769,569,[19,593],770,569,769,[823],771,569,770,[19,593],772,569,771,[823],773,569,772,[19,593],774,569,773,[823],775,569,774,[19,593],776,569,775,[823],777,569,776,[19,2458],778,572,[19,2458],779,572,778,&quot;svg:g&quot;,780,572,779,[19,2458],781,575,[238,2453],782,578,[19],&quot;Search Apps or by Product...&quot;,783,582,[19],&quot;\n\t                        &quot;,784,582,783,[2557,2558,2559,2560,2561,2562,2563,2564,2565,2566,2567,2568],785,582,784,[19,2598],786,584,[19,3049],787,586,[19,593],788,586,787,[672],&quot;id=admin-mobile-db&quot;,[240],&quot;href=/marketplace/appdelivery/dashboard/all-items&quot;,[2629],789,586,788,[19,593],790,586,789,[672],&quot;id=developer-mobile-db&quot;,[240],&quot;href=/marketplace/appdelivery/dashboard/items&quot;,[2629],791,586,790,[19,593],792,586,791,[672],&quot;id=user-mobile-db&quot;,&quot;href=/marketplace/appdelivery/dashboard/free-items&quot;,[2629],793,586,792,[19,2458],794,588,[19],&quot;Dashboard&quot;,795,590,[19,3338],796,591,[19,3053],797,592,[19],&quot;Profile&quot;,798,593,[19],&quot;Sign out&quot;,799,595,[19,1862],800,597,[19],&quot;Sign up&quot;,801,614,[19],&quot;i&quot;,802,616,[19],&quot;\n\t\t\t\t\t\t\t\t\t\t\t\t\t&quot;,803,616,802,[238,744],804,616,803,[19,3557],805,616,804,[238,754],806,616,805,[19,2725],-807,619,[19],&quot;g&quot;,808,623,[19],&quot;\n                                                &quot;,809,623,808,[2322,2440,2441],810,623,809,[19,256],811,625,[19,58],812,625,811,[2452,2453],813,625,812,[19,256],814,628,[19,2886],815,630,[19,2886],816,632,[19,2886],817,634,[19,2886],818,637,[19,2886],819,639,[19,2886],820,641,[19,2886],821,652,[19,58],822,652,821,[238],&quot;class=skeleton__product_info filter&quot;,823,652,822,[19,58],824,652,823,[238,3629],825,652,824,[19,58],826,652,825,[238,3629],827,652,826,[19,58],828,652,827,[238],&quot;class=skeleton__product_info filter browse-all&quot;,829,652,828,[19,256],830,655,[19,58],831,655,830,[238],&quot;class=skeleton__product_info tab&quot;,832,655,831,[19,58],833,655,832,[238,3666],834,655,833,[19,58],835,655,834,[238,3666],836,655,835,[19,58],837,655,836,[238,3666],838,655,837,[19,58],839,655,838,[238,3666],840,655,839,[19,256],841,671,[238],&quot;class=sidebar uk-hidden-small uk-hidden-medium appdelivery&quot;,&quot;data-uk-sticky={top:40, media: 960, boundary: &apos;footer&apos;}&quot;,&quot;style=margin: 0px;&quot;,842,672,[2452],&quot;class=uk-hidden-medium uk-hidden-small search-result-title&quot;,843,672,842,[952],&quot;class=cat-desc&quot;,844,673,[238],&quot;class=filter uk-width-medium-3-10&quot;,[263],845,673,844,[238,3721],846,673,845,[238],&quot;class=uk-width-medium-2-10 filter&quot;,847,673,846,[238],&quot;class=uk-width-medium-3-10 filter&quot;,848,673,847,[238],&quot;class=uk-width-medium-2-3 uk-width-large-1-4 filter&quot;,[263],849,673,848,[238],&quot;class=uk-width-medium-2-10&quot;,850,674,[1406],851,675,[908],&quot;class=uk-tab &quot;,&quot;data-uk-tab={connect:&apos;#my-id&apos;}&quot;,852,675,851,[908],&quot;class=filters &quot;,853,676,[908],&quot;id=my-id&quot;,&quot;class=uk-switcher uk-margin&quot;,854,676,853,[999],855,676,854,[238],&quot;class=uk-text-center&quot;,856,682,[238],&quot;class=uk-width-1-2 checkbox-column&quot;,857,682,856,[238,3778],858,684,[1572,1573,2189,1525],859,684,858,[19,2195],860,684,859,[672,2200,885],861,693,[19,58],862,693,861,[19,212],863,693,862,[952],&quot;id=email-label&quot;,864,693,863,[19,212],865,693,864,[1909,2603],&quot;id=username&quot;,&quot;name=_username&quot;,[2737],&quot;placeholder=•••••&quot;,[2703],&quot;aria-labelledby=email-label&quot;,&quot;value=••••• •••• •••• •••• ••••&quot;,866,693,865,[19,283],867,693,866,[952],&quot;classname=field-error&quot;,868,693,867,[19,212],869,695,[19,212],870,695,869,[19,212],871,695,870,[952,1887],872,695,871,[19,212],873,695,872,[1909,2734],&quot;id=password&quot;,&quot;name=_password&quot;,[2737,2738,2740,1912],874,695,873,[19,283],875,695,874,[952,3829],876,695,875,[19,212],877,697,&quot;svg:path&quot;,&quot;class=ot-floating-button__svg-fill&quot;,&quot;d=M14.588 0l.445.328c1.807 1.303 3.961 2.533 6.461 3.688 2.015.93 4.576 1.746 7.682 2.446 0 14.178-4.73 24.133-14.19 29.864l-.398.236C4.863 30.87 0 20.837 0 6.462c3.107-.7 5.668-1.516 7.682-2.446 2.709-1.251 5.01-2.59 6.906-4.016zm5.87 13.88a.75.75 0 00-.974.159l-5.475 6.625-3.005-2.997-.077-.067a.75.75 0 00-.983 1.13l4.172 4.16 6.525-7.895.06-.083a.75.75 0 00-.16-.973z&quot;,&quot;fill=#FFF&quot;,&quot;fill-rule=evenodd&quot;,878,701,[238],&quot;class=ot-plus-minus&quot;,879,701,878,[944],&quot;class=ot-cat-header&quot;,&quot;id=ot-header-id-C0001&quot;,880,701,879,[238],&quot;id=ot-status-id-C0001&quot;,&quot;class=ot-always-active&quot;,881,702,[952],&quot;class=ot-acc-grpdesc ot-category-desc&quot;,&quot;id=ot-desc-id-C0001&quot;,882,702,881,[238],&quot;class=ot-hlst-cntr&quot;,883,704,[238,3878],884,704,883,[944,3883],&quot;id=ot-header-id-C0002&quot;,885,704,884,[238],&quot;class=ot-tgl&quot;,886,705,[952,3894],&quot;id=ot-desc-id-C0002&quot;,887,705,886,[238,3900],888,707,[238,3878],889,707,888,[944,3883],&quot;id=ot-header-id-C0003&quot;,890,707,889,[238,3913],891,708,[952,3894],&quot;id=ot-desc-id-C0003&quot;,892,708,891,[238,3900],893,710,[238,3878],894,710,893,[944,3883],&quot;id=ot-header-id-C0004&quot;,895,710,894,[238,3913],896,711,[952,3894],&quot;id=ot-desc-id-C0004&quot;,897,711,896,[238,3900],898,713,[238,3878],899,713,898,[944,3883],&quot;id=ot-header-id-C0005&quot;,900,713,899,[238,3913],901,714,[952,3894],&quot;id=ot-desc-id-C0005&quot;,902,714,901,[238,3900],903,715,[2557],&quot;id=ot-back-arw&quot;,[2560,2561,2562,2563],&quot;viewBox=0 0 444.531 444.531&quot;,[2566],904,716,[19],&quot;Cookie List&quot;,905,717,[952],&quot;role=status&quot;,[1055],906,717,905,[1909],&quot;id=vendor-search-handler&quot;,[2603],&quot;name=vendor-search-handler&quot;,&quot;placeholder=•••••••&quot;,&quot;aria-label=Cookie list search&quot;,907,717,906,[19,2162],908,717,907,[2557,2560,2561,2562,2563],&quot;viewBox=0 -30 110 110&quot;,[734],909,718,[1572],&quot;id=filter-btn-handler&quot;,&quot;aria-label=Filter&quot;,&quot;aria-haspopup=true&quot;,910,720,[238],&quot;id=ot-fltr-cnt&quot;,911,721,[238],&quot;class=ot-sel-all-hdr&quot;,912,721,911,[238],&quot;class=ot-sel-all-chkbox&quot;,913,722,[908],&quot;id=ot-host-lst&quot;,914,727,[19,2243],915,729,[19,829],916,729,915,[672,2247],917,729,916,[19,593],918,731,[19,829],919,731,918,[238],&quot;class=caret&quot;,920,731,919,[19,593],921,733,[19,829],922,733,921,[238,864],923,733,922,[19,593],924,736,[19,829],925,736,924,[238,3238],926,736,925,[19,829],927,736,926,[238,3247],928,736,927,[19,1158],929,736,928,[238],&quot;class=uk-dropdown dashboard-member dashboard-admin uk-visible-large&quot;,930,736,929,[19,593],931,738,[19,829],932,738,931,[238,3238],933,738,932,[19,829],934,738,933,[238,3247],935,738,934,[19,829],936,738,935,[238],&quot;class=uk-dropdown dashboard-member dashboard-developer uk-visible-large&quot;,937,738,936,[19,593],938,740,[19,829],939,740,938,[238,3238],940,740,939,[19,829],941,740,940,[238,3247],942,740,941,[19,829],943,740,942,[238],&quot;class=uk-dropdown dashboard-member dashboard-approver uk-visible-large&quot;,944,740,943,[19,593],945,742,[19,829],946,742,945,[238,3238],947,742,946,[19,829],948,742,947,[238,3247],949,742,948,[19,829],950,742,949,[238],&quot;class=uk-dropdown dashboard-member dashboard-user uk-visible-large&quot;,951,742,950,[19,593],952,745,[19,829],953,745,952,[672,2649,2629],954,745,953,[19,593],955,747,[19,829],956,747,955,[238,4061],957,747,956,[19,593],958,749,[19,829],959,749,958,[238],&quot;class=item&quot;,960,749,959,[19,593],961,753,[19,3053],962,756,[19],&quot;Hi &quot;,963,756,962,[823,3814],964,758,[19,1862],965,760,[19,819],966,760,965,[823,824],967,760,966,[19,829],968,760,967,[238],&quot;id=member-welcome-dd&quot;,&quot;class=&quot;,969,760,968,[19,829],970,760,969,[238],&quot;id=iFrameID&quot;,[1935],971,760,970,[19,829],972,760,971,[238],&quot;id=guest-welcome-dd&quot;,&quot;class=sign-in-form uk-hidden&quot;,973,760,972,[19,593],974,763,[19,3471],975,767,[19],&quot;\n\t\t\t                    &quot;,976,767,975,[2557,2558,2559,2560,2561,2562,2563,2564,2565,2566,2567,2568],977,767,976,[19,3399],978,779,[3870],&quot;fill=#000000&quot;,&quot;d=M19.5,21l-5.6-5.6c-1.5,1.2-3.3,1.9-5.3,1.9C3.9,17.2,0,13.3,0,8.6C0,3.9,3.9,0,8.6,0\n\t\t\t\t\t\tc4.7,0,8.6,3.9,8.6,8.6c0,2-0.7,3.9-1.9,5.3l5.6,5.6L19.5,21z M8.6,2C5,2,2,5,2,8.6c0,3.6,3,6.6,6.6,6.6c3.6,0,6.6-3,6.6-6.6\n\t\t\t\t\t\tC15.2,5,12.2,2,8.6,2z&quot;,979,779,978,[19,2458],980,781,[19,3226],981,781,980,[823],&quot;class=titleSuffix&quot;,982,784,[19,819],983,784,982,[3460],984,784,983,[19,3475],985,788,[19,3528],986,790,[19,3528],987,792,[19,3528],988,812,[19],&quot;\n                                                                    AppDelivery\n                                                                                                    &quot;,989,812,988,[823],&quot;class=suffix&quot;,990,812,989,[19],&quot;\n                                                            &quot;,991,841,[238],&quot;id=catAccordion&quot;,&quot;class=uk-list cat-list&quot;,992,841,991,[238],&quot;class=notifications-subscribe&quot;,993,842,[19,2157],994,844,&quot;SELECT&quot;,&quot;disabled=&quot;,&quot;id=productGroupFilter&quot;,&quot;data-select2-id=••••••••••••••••••&quot;,&quot;tabindex=-1&quot;,&quot;class=select2-hidden-accessible&quot;,[734],995,844,994,[823],&quot;class=select2 select2-container select2-container--default select2-container--disabled&quot;,&quot;dir=ltr&quot;,&quot;data-select2-id=1&quot;,&quot;style=width: auto;&quot;,996,845,[4359,4360],&quot;id=platformFilter&quot;,[4363,4364,734],&quot;data-select2-id=••••••••••••••&quot;,997,845,996,[823,4370,4371],&quot;data-select2-id=7&quot;,[4373],998,846,[4359,4360],&quot;id=versionFilter&quot;,[4363,4364,734],&quot;data-select2-id=•••••••••••••&quot;,999,846,998,[823,4370,4371],&quot;data-select2-id=8&quot;,[4373],1000,847,[4359,4360],&quot;id=authorFilter&quot;,[4363,4364,734],&quot;data-select2-id=••••••••••••&quot;,1001,847,1000,[823,4370,4371],&quot;data-select2-id=9&quot;,[4373],1002,848,[4359,4360],&quot;id=deliveryTypeFilter&quot;,[4363,4364,734,4362],1003,848,1002,[823,4370,4371],&quot;data-select2-id=10&quot;,[4373],1004,849,[238],&quot;class=uk-width-large-2-3 filter tiers-filter&quot;,[263],1005,849,1004,[238],&quot;class=filter uk-width-medium-10-10&quot;,1006,850,[19],&quot;No results for this query, try removing filters and search again.&quot;,1007,851,[1406],&quot;id=list-toggle&quot;,&quot;class=uk-hidden-medium uk-hidden-small&quot;,[3108],1008,851,1007,[1406],&quot;id=grid-toggle&quot;,&quot;class=uk-hidden-medium uk-hidden-small uk-active&quot;,&quot;aria-expanded=true&quot;,1009,851,1008,[1406],&quot;class=uk-tab-responsive uk-active uk-hidden&quot;,[4022,3108],1010,852,[1406],&quot;class=uk-disabled&quot;,1011,852,1010,[1406],&quot;class=uk-active&quot;,1012,852,1011,[1406,4253],1013,852,1012,[1406,4253],1014,852,1013,[1406,4253],1015,853,[1406],&quot;id=app-list&quot;,[4253,734],1016,853,1015,[1406],&quot;id=app-grid&quot;,&quot;aria-hidden=false&quot;,[4462],1017,855,[1572,240,4360],1018,856,[238],1019,856,1018,[238],1020,856,1019,[238],1021,856,1020,[238],1022,856,1021,[238],1023,856,1022,[238],1024,856,1023,[238],1025,856,1024,[238],1026,856,1025,[238],1027,856,1026,[238],1028,856,1027,[238],1029,856,1028,[238],1030,857,[238],1031,857,1030,[238],1032,857,1031,[238],1033,857,1032,[238],1034,857,1033,[238],1035,857,1034,[238],1036,857,1035,[238],1037,857,1036,[238],1038,857,1037,[238],1039,857,1038,[238],1040,857,1039,[238],1041,858,[19],&quot;Subscribe&quot;,1042,860,[19,2300],1043,863,[19],&quot;Email&quot;,1044,871,[19,2721],1045,878,[823],1046,878,1045,[823],1047,879,[19],&quot;Strictly Necessary Cookies&quot;,1048,880,[19],&quot;Always Active&quot;,1049,881,[19],&quot;These cookies are necessary for the website to function and cannot be switched off in our systems. They are usually only set in response to actions made by you which amount to a request for services, such as setting your privacy preferences, logging in or filling in forms. You can set your browser to block or alert you about these cookies, but some parts of the site will not work. These cookies do not store any personally identifiable information.&quot;,1050,882,[1572],&quot;class=ot-link-btn category-host-list-handler&quot;,&quot;aria-label=Cookie Details button opens Cookie List menu&quot;,&quot;data-parent-id=C0001&quot;,1051,883,[823],1052,883,1051,[823],1053,884,[19],&quot;Performance Cookies&quot;,1054,885,[1909],&quot;type=checkbox&quot;,&quot;name=ot-group-id-C0002&quot;,&quot;id=ot-group-id-C0002&quot;,&quot;role=switch&quot;,&quot;class=category-switch-handler&quot;,[2371],&quot;checked=&quot;,[3126],&quot;value=on&quot;,1055,885,1054,[19,2162],1056,885,1055,[2591],&quot;class=ot-switch&quot;,&quot;for=ot-group-id-C0002&quot;,1057,885,1056,[19,2162],1058,886,[19],&quot;These cookies allow us to count visits and traffic sources so we can measure and improve the performance of our site. They help us to know which pages are the most and least popular and see how visitors move around the site. All information these cookies collect is aggregated and therefore anonymous. If you do not allow these cookies, we will not know when you have visited our site, and will not be able to monitor its performance.&quot;,1059,887,[1572,4616,4617],&quot;data-parent-id=C0002&quot;,1060,888,[823],1061,888,1060,[823],1062,889,[19],&quot;Functional Cookies&quot;,1063,890,[1909,4633],&quot;name=ot-group-id-C0003&quot;,&quot;id=ot-group-id-C0003&quot;,[4636,4637,2376,4639,3140,4641],1064,890,1063,[19,2162],1065,890,1064,[2591,4650],&quot;for=ot-group-id-C0003&quot;,1066,890,1065,[19,2162],1067,891,[19],&quot;These cookies enable the website to provide enhanced functionality and personalisation. They may be set by us or by third party providers whose services we have added to our pages. If you do not allow these cookies then some or all of these services may not function properly.&quot;,1068,892,[1572,4616,4617],&quot;data-parent-id=C0003&quot;,1069,893,[823],1070,893,1069,[823],1071,894,[19],&quot;Targeting Cookies&quot;,1072,895,[1909,4633],&quot;name=ot-group-id-C0004&quot;,&quot;id=ot-group-id-C0004&quot;,[4636,4637,2381,4639,3153,4641],1073,895,1072,[19,2162],1074,895,1073,[2591,4650],&quot;for=ot-group-id-C0004&quot;,1075,895,1074,[19,2162],1076,896,[19],&quot;These cookies may be set through our site by our advertising partners. They may be used by those companies to build a profile of your interests and show you relevant advertisements on other sites. They do not store directly personal information, but are based on uniquely identifying your browser and internet device. If you do not allow these cookies, you will experience less targeted advertising.&quot;,1077,897,[1572,4616,4617],&quot;data-parent-id=C0004&quot;,1078,898,[823],1079,898,1078,[823],1080,899,[19],&quot;Social Media Cookies&quot;,1081,900,[1909,4633],&quot;name=ot-group-id-C0005&quot;,&quot;id=ot-group-id-C0005&quot;,[4636,4637,2386,4639,3166,4641],1082,900,1081,[19,2162],1083,900,1082,[2591,4650],&quot;for=ot-group-id-C0005&quot;,1084,900,1083,[19,2162],1085,901,[19],&quot;These cookies are set by a range of social media services that we have added to the site to enable you to share our content with your friends and networks. They are capable of tracking your browser across other sites and building up a profile of your interests. This may impact the content and messages you see on other websites you visit.    If you do not allow these cookies you may not be able to use or see these sharing tools.&quot;,1086,902,[1572,4616,4617],&quot;data-parent-id=C0005&quot;,1087,903,&quot;svg:title&quot;,1088,903,1087,[3460],1089,908,[4780],1090,908,1089,[3870],&quot;fill=#2e3644&quot;,&quot;d=M55.146,51.887L41.588,37.786c3.486-4.144,5.396-9.358,5.396-14.786c0-12.682-10.318-23-23-23s-23,10.318-23,23\n            s10.318,23,23,23c4.761,0,9.298-1.436,13.177-4.162l13.661,14.208c0.571,0.593,1.339,0.92,2.162,0.92\n            c0.779,0,1.518-0.297,2.079-0.837C56.255,54.982,56.293,53.08,55.146,51.887z M23.984,6c9.374,0,17,7.626,17,17s-7.626,17-17,17\n            s-17-7.626-17-17S14.61,6,23.984,6z&quot;,1091,909,[2557],&quot;role=presentation&quot;,[734,2560,2561,2562,2563],&quot;viewBox=0 0 402.577 402.577&quot;,[2566],1092,910,[1572],&quot;id=clear-filters-handler&quot;,1093,910,1092,[238],&quot;class=ot-fltr-scrlcnt ot-pc-scrollbar&quot;,1094,911,[823],&quot;class=ot-consent-hdr&quot;,1095,911,1094,[19,2162],1096,911,1095,[823],&quot;class=ot-li-hdr&quot;,1097,912,[238],&quot;class=ot-chkbox&quot;,&quot;id=ot-selall-hostcntr&quot;,1098,912,1097,[238,4826],&quot;id=ot-selall-vencntr&quot;,1099,912,1098,[238,4826],&quot;id=ot-selall-licntr&quot;,1100,916,[19,3049],1101,922,[19,1158],1102,922,1101,[238],&quot;class=uk-grid uk-grid-width-1-3&quot;,1103,922,1102,[19,829],1104,925,[19,1158],1105,925,1104,[672,3496,2629],1106,925,1105,[19,829],1107,927,[19,1158],1108,927,1107,[238,4061],1109,927,1108,[19,829],1110,929,[19],&quot;\n\n\t\t\t\t\t\t\t\t\t&quot;,1111,929,1110,[238,864],1112,929,1111,[19,829],1113,932,[19,1158],1114,932,1113,[672,3508,2629],1115,932,1114,[19,829],1116,934,[19,1158],1117,934,1116,[238,4061],1118,934,1117,[19,829],1119,936,[19,1158],1120,936,1119,[238,864],1121,936,1120,[19,829],1122,939,[19,1158],1123,939,1122,[672,3496,2629],1124,939,1123,[19,829],1125,941,[19,1158],1126,941,1125,[238,4061],1127,941,1126,[19,829],1128,943,[19,1158],1129,943,1128,[238,864],1130,943,1129,[19,829],1131,946,[19,1158],1132,946,1131,[672,3519,2629],1133,946,1132,[19,829],1134,948,[19,1158],1135,948,1134,[238,4061],1136,948,1135,[19,829],1137,950,[19,1158],1138,950,1137,[238,864],1139,950,1138,[19,829],1140,953,[19,3528],1141,959,[19,1158],1142,959,1141,[672],&quot;class=dashboard-login uk-dropdown-close&quot;,1143,959,1142,[19],&quot; or\n\t\t\t\t\t\t\t\t\t&quot;,1144,959,1143,[672,2007,2629],1145,959,1144,[19,1158],1146,959,1145,[952],1147,959,1146,[19,829],1148,963,[19],&quot;Eeshan&quot;,1149,968,[19,1158],1150,968,1149,[908],1151,968,1150,[19,829],1152,970,[19,1158],1153,970,1152,[238],1154,970,1153,[19,829],1155,972,[19,1149],1156,972,1155,[980],1157,972,1156,[19,1158],1158,972,1157,[952],&quot;class=internalusername-lbl&quot;,&quot;style=display:none&quot;,1159,972,1158,[19,1158],1160,972,1159,[952],&quot;id=header-username-lbl&quot;,&quot;class=username-lbl&quot;,1161,972,1160,[19,1158],1162,972,1161,[238,991,1172],1163,972,1162,[19,1158],1164,972,1163,[238,991,1181],&quot;id=pwdLoginDiv&quot;,1165,972,1164,[19,1158],1166,972,1165,[238],&quot;id=loginerror&quot;,[1192],1167,972,1166,[19,1158],1168,972,1167,[999],1169,972,1168,[19,1158],1170,972,1169,[238,1209],1171,972,1170,[19,1158],1172,972,1171,[238,1209],1173,972,1172,[19,1222],1174,972,1173,[238,1227,1228],1175,972,1174,[19,1158],1176,972,1175,[238],&quot;id=loading&quot;,[263],1177,972,1176,[19],&quot;\n\n\t\t\t\t\t\t\t\t\t\t                                &quot;,1178,972,1177,[988,1248,1249,990,991],1179,972,1178,[19,1149],1180,972,1179,[238,1259],1181,972,1180,[19,1158],1182,972,1181,[238],1183,972,1182,[19],&quot;\n                                    \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t&quot;,1184,976,[19],&quot;\n\t\t\t                        &quot;,1185,976,1184,[3460],1186,976,1185,[19,4284],1187,981,[19],&quot; Marketplace&quot;,1188,983,[3870],&quot;fill=#ffffff&quot;,&quot;d=M19.5,21l-5.6-5.6c-1.5,1.2-3.3,1.9-5.3,1.9C3.9,17.2,0,13.3,0,8.6C0,3.9,3.9,0,8.6,0\n\t                                c4.7,0,8.6,3.9,8.6,8.6c0,2-0.7,3.9-1.9,5.3l5.6,5.6L19.5,21z M8.6,2C5,2,2,5,2,8.6c0,3.6,3,6.6,6.6,6.6c3.6,0,6.6-3,6.6-6.6\n\t                                C15.2,5,12.2,2,8.6,2z&quot;,1189,983,1188,[19,819],1190,989,[19,2243],1191,992,[952],1192,992,1191,[1572,1574],1193,995,[823],&quot;class=selection&quot;,1194,995,1193,[823],&quot;class=dropdown-wrapper&quot;,[734],1195,997,[823,5208],1196,997,1195,[823,5213,734],1197,999,[823,5208],1198,999,1197,[823,5213,734],1199,1001,[823,5208],1200,1001,1199,[823,5213,734],1201,1003,[823,5208],1202,1003,1201,[823,5213,734],1203,1004,[4359,4360],&quot;id=courseLevelFilter&quot;,[4363,4364,734],&quot;data-select2-id=•••••••••••••••••&quot;,1204,1004,1203,[823,4370,4371],&quot;data-select2-id=11&quot;,[4373],1205,1005,[672],&quot;class=uk-vertical-align-middle clearFilterLink&quot;,1206,1007,[672,2619],1207,1008,[672,2619],1208,1009,[672],1209,1009,1208,[238],&quot;class=uk-dropdown uk-dropdown-small&quot;,[734],1210,1010,[672],&quot;class=cat-sort-tab-title disabled&quot;,1211,1011,[672,2275],1212,1012,[672,2275],1213,1013,[672,2275],1214,1014,[672,2275],1215,1015,[238],&quot;class=list-results&quot;,1216,1016,[238],&quot;class=grid-results&quot;,1217,1017,[19],&quot;Load more&quot;,1218,1018,[2591],1219,1018,1218,[952,1192],1220,1019,[2591],1221,1019,1220,[952,1192],1222,1020,[2591],1223,1020,1222,[952,1192],1224,1021,[2591],1225,1021,1224,[952,1192],1226,1022,[2591],1227,1022,1226,[952,1192],1228,1023,[2591],1229,1023,1228,[952,1192],1230,1024,[2591],1231,1024,1230,[952,1192],1232,1025,[2591],1233,1025,1232,[952,1192],1234,1026,[2591],1235,1026,1234,[952,1192],1236,1027,[2591],1237,1027,1236,[952,1192],1238,1028,[2591],1239,1028,1238,[952,1192],1240,1029,[2591],1241,1029,1240,[952,1192],1242,1030,[2591],1243,1030,1242,[952,1192],1244,1031,[2591],1245,1031,1244,[952,1192],1246,1032,[2591],1247,1032,1246,[952,1192],1248,1033,[2591],1249,1033,1248,[952,1192],1250,1034,[2591],1251,1034,1250,[952,1192],1252,1035,[2591],1253,1035,1252,[952,1192],1254,1036,[2591],1255,1036,1254,[952,1192],1256,1037,[2591],1257,1037,1256,[952,1192],1258,1038,[2591],1259,1038,1258,[952,1192],1260,1039,[2591],1261,1039,1260,[952,1192],1262,1040,[2591],1263,1040,1262,[952,1192],1264,1050,[19],&quot;Cookies Details‎&quot;,1265,1056,[823],&quot;class=ot-switch-nob&quot;,&quot;aria-label=Performance Cookies&quot;,1266,1056,1265,[19,2162],1267,1056,1266,[823],&quot;class=ot-label-txt&quot;,1268,1059,[19,5466],1269,1065,[823,5470],&quot;aria-label=Functional Cookies&quot;,1270,1065,1269,[19,2162],1271,1065,1270,[823,5480],1272,1068,[19,5466],1273,1074,[823,5470],&quot;aria-label=Targeting Cookies&quot;,1274,1074,1273,[19,2162],1275,1074,1274,[823,5480],1276,1077,[19,5466],1277,1083,[823,5470],&quot;aria-label=Social Media Cookies&quot;,1278,1083,1277,[19,2162],1279,1083,1278,[823,5480],1280,1086,[19,5466],1281,1087,[19],&quot;Back Button&quot;,1282,1088,[3870],&quot;fill=#656565&quot;,&quot;d=M213.13,222.409L351.88,83.653c7.05-7.043,10.567-15.657,10.567-25.841c0-10.183-3.518-18.793-10.567-25.835\n                    l-21.409-21.416C323.432,3.521,314.817,0,304.637,0s-18.791,3.521-25.841,10.561L92.649,196.425\n                    c-7.044,7.043-10.566,15.656-10.566,25.841s3.521,18.791,10.566,25.837l186.146,185.864c7.05,7.043,15.66,10.564,25.841,10.564\n                    s18.795-3.521,25.834-10.564l21.409-21.412c7.05-7.039,10.567-15.604,10.567-25.697c0-10.085-3.518-18.746-10.567-25.978\n                    L213.13,222.409z&quot;,1283,1089,[19],&quot;Search Icon&quot;,1284,1091,[4780],1285,1091,1284,[3460],1286,1092,[19],&quot;Clear&quot;,1287,1093,[238],&quot;class=ot-fltr-opts&quot;,1288,1093,1287,[238],&quot;class=ot-fltr-btns&quot;,1289,1094,[19],&quot;Consent&quot;,1290,1096,[19],&quot;Leg.Interest&quot;,1291,1097,[1909],&quot;id=select-all-hosts-groups-handler&quot;,[4633,4641],1292,1097,1291,[19,2162],1293,1097,1292,[2591],&quot;for=select-all-hosts-groups-handler&quot;,1294,1097,1293,[19,2162],1295,1097,1294,[823],&quot;class=ot-label-status&quot;,1296,1098,[1909],&quot;id=select-all-vendor-groups-handler&quot;,[4633,4641],1297,1098,1296,[19,2162],1298,1098,1297,[2591],&quot;for=select-all-vendor-groups-handler&quot;,1299,1098,1298,[19,2162],1300,1098,1299,[823,5592],1301,1099,[1909],&quot;id=select-all-vendor-leg-handler&quot;,[4633,4641],1302,1099,1301,[19,2162],1303,1099,1302,[2591],&quot;for=select-all-vendor-leg-handler&quot;,1304,1099,1303,[19,2162],1305,1099,1304,[823,5592],1306,1102,[19],&quot;\n\n\t\t\t\t\t\t\t\t\t\t&quot;,1307,1102,1306,[238],1308,1102,1307,[19],&quot;\n\n                                        \t\t\t\t\t\t\t\t\t\t\t&quot;,1309,1102,1308,[238],1310,1102,1309,[19],&quot;\n                                        \t\t\t\t\t\t\t\t\t\t\t&quot;,1311,1102,1310,[238],1312,1102,1311,[19,5658],1313,1102,1312,[238],1314,1102,1313,[19,5658],1315,1102,1314,[238],1316,1102,1315,[19,5658],1317,1102,1316,[238],1318,1102,1317,[19,5658],1319,1102,1318,[238],1320,1102,1319,[19,5658],1321,1102,1320,[238],1322,1102,1321,[19,5658],1323,1102,1322,[238],1324,1102,1323,[19,5658],1325,1102,1324,[238],1326,1102,1325,[19,5658],1327,1102,1326,[238],1328,1102,1327,[19],&quot;\n                                        \t\t\t\t\t\t\t\t\t&quot;,1329,1105,[19,3528],1330,1111,[19,1870],1331,1111,1330,[238],&quot;class=uk-grid uk-grid-width-1-6&quot;,1332,1111,1331,[19,1158],1333,1114,[19,3528],1334,1120,[19,1870],1335,1120,1334,[238,4848],1336,1120,1335,[19,1158],1337,1123,[19,3528],1338,1129,[19,1870],1339,1129,1338,[238],&quot;class=uk-grid uk-grid-width-1-4&quot;,1340,1129,1339,[19,1158],1341,1132,[19,3528],1342,1138,[19,1870],1343,1138,1342,[238],&quot;class=uk-grid uk-grid-width-1-2&quot;,1344,1138,1343,[19,1158],1345,1142,[19,1862],1346,1144,[19],&quot; Sign up&quot;,1347,1146,[19],&quot;Check here to see and manage items, upgrades, and purchases.&quot;,1348,1150,[19,1870],1349,1150,1348,[1406,4218],1350,1150,1349,[19,1870],1351,1150,1350,[1406,4218],1352,1150,1351,[19,1870],1353,1150,1352,[999],1354,1150,1353,[19],&quot;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t&quot;,1355,1150,1354,[1406],&quot;class=item signout&quot;,1356,1150,1355,[19],&quot;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t&quot;,1357,1153,[19,1870],1358,1153,1357,[1572],&quot;type=button&quot;,&quot;data-dismiss=modal&quot;,&quot;id=close&quot;,1359,1153,1358,[19,1158],1360,1156,[19,1862],1361,1158,[19],&quot;OpenText employee short login only&quot;,1362,1160,[19],&quot;Username or Email&quot;,1363,1162,[19,1870],1364,1162,1363,[238,1875],1365,1162,1364,[19,1158],1366,1164,[19,1870],1367,1164,1366,[952],&quot;id=pwdLoginDivLabel&quot;,1368,1164,1367,[19,1661],1369,1164,1368,[238,1875],1370,1164,1369,[19,1158],1371,1166,[19,1158],1372,1170,[19,1870],1373,1170,1372,[1572,1921],&quot;id=loadSamlIframeBtnId&quot;,1374,1170,1373,[19,1158],1375,1172,[19,1870],1376,1172,1375,[1572,1921],&quot;id=submitSmartLoginId&quot;,[1935],1377,1172,1376,[19,1158],1378,1174,[19,1870],1379,1174,1378,[672,1947],1380,1174,1379,[19,1870],1381,1174,1380,[823,1956,1957],1382,1174,1381,[19,1149],1383,1176,[19,1661],1384,1176,1383,[238,374],1385,1176,1384,[19,1158],1386,1178,[19],&quot;\n\t\t\t\t\t\t\t\t\t\t\t\t                                    &quot;,1387,1178,1386,[1909],&quot;id=returnUrl&quot;,[1910,1983,1912],1388,1178,1387,[19],&quot;\n\t\t\t\t\t\t\t\t\t\t\t                                    &quot;,1389,1178,1388,[238,1994],1390,1178,1389,[19],&quot;\n\t                                &quot;,1391,1180,[19],&quot;\n\t\t\t\t\t\t\t\t\t\tDon&apos;t have an account? &quot;,1392,1180,1391,[672,2007],1393,1180,1392,[19,1149],1394,1182,[19,1870],1395,1182,1394,[730],&quot;id=sso_frame&quot;,&quot;src=https://www.microfocus.com/marketplace/signin/sso&quot;,&quot;frameborder=0&quot;,&quot;height=0&quot;,&quot;width=0&quot;,[735],1396,1182,1395,[19,1870],1397,1182,1396,[730],&quot;src=https://login.microfocus.com/nidp/app&quot;,[5999,6000,6001,735],1398,1182,1397,[19,1158],1399,1185,[3870,5189],&quot;d=M19.5,21l-5.6-5.6c-1.5,1.2-3.3,1.9-5.3,1.9C3.9,17.2,0,13.3,0,8.6C0,3.9,3.9,0,8.6,0\n\t\t\t                            c4.7,0,8.6,3.9,8.6,8.6c0,2-0.7,3.9-1.9,5.3l5.6,5.6L19.5,21z M8.6,2C5,2,2,5,2,8.6c0,3.6,3,6.6,6.6,6.6c3.6,0,6.6-3,6.6-6.6\n\t\t\t                            C15.2,5,12.2,2,8.6,2z&quot;,1400,1185,1399,[19,5173],1401,1191,[19],&quot;Receive app and add-on update notifications for all of our products.&quot;,1402,1192,[19,4583],1403,1193,[823],&quot;class=select2-selection select2-selection--single&quot;,&quot;role=combobox&quot;,[4022,3108,4363],&quot;aria-disabled=true&quot;,&quot;aria-labelledby=select2-productGroupFilter-container&quot;,1404,1195,[823,6035,6036,4022,3108,4363,6038],&quot;aria-labelledby=select2-platformFilter-container&quot;,1405,1197,[823,6035,6036,4022,3108,4363,6038],&quot;aria-labelledby=select2-versionFilter-container&quot;,1406,1199,[823,6035,6036,4022,3108,4363,6038],&quot;aria-labelledby=select2-authorFilter-container&quot;,1407,1201,[823,6035,6036,4022,3108,4363,6038],&quot;aria-labelledby=select2-deliveryTypeFilter-container&quot;,1408,1204,[823,5208],1409,1204,1408,[823,5213,734],1410,1205,[19],&quot;Clear filters&quot;,1411,1206,[2166],&quot;class=icon-list&quot;,1412,1207,[2166],&quot;class=icon-grid&quot;,1413,1209,[908],&quot;class=uk-nav uk-nav-dropdown&quot;,1414,1209,1413,[238],1415,1210,[19],&quot;Sort by:&quot;,1416,1211,[19],&quot;Newest&quot;,1417,1212,[19],&quot;Most popular&quot;,1418,1213,[19],&quot;A-Z&quot;,1419,1214,[19],&quot;Top Rated&quot;,1420,1215,[238],&quot;class=app-collection view-list&quot;,1421,1216,[238],&quot;class=app-collection&quot;,1422,1218,[1909],&quot;id=200&quot;,[4633,4641],1423,1218,1422,[823],1424,1218,1423,[19],1425,1220,[1909],&quot;id=361&quot;,[4633,4641],1426,1220,1425,[823],1427,1220,1426,[19],1428,1222,[1909],&quot;id=385&quot;,[4633,4641],1429,1222,1428,[823],1430,1222,1429,[19],1431,1224,[1909],&quot;id=39&quot;,[4633,4641],1432,1224,1431,[823],1433,1224,1432,[19],1434,1226,[1909],&quot;id=40&quot;,[4633,4641],1435,1226,1434,[823],1436,1226,1435,[19],1437,1228,[1909],&quot;id=228&quot;,[4633,4641],1438,1228,1437,[823],1439,1228,1438,[19],1440,1230,[1909],&quot;id=303&quot;,[4633,4641],1441,1230,1440,[823],1442,1230,1441,[19],1443,1232,[1909],&quot;id=212&quot;,[4633,4641],1444,1232,1443,[823],1445,1232,1444,[19],1446,1234,[1909],&quot;id=31&quot;,[4633,4641],1447,1234,1446,[823],1448,1234,1447,[19],1449,1236,[1909],&quot;id=316&quot;,[4633,4641],1450,1236,1449,[823],1451,1236,1450,[19],1452,1238,[1909],&quot;id=214&quot;,[4633,4641],1453,1238,1452,[823],1454,1238,1453,[19],1455,1240,[1909],&quot;id=364&quot;,[4633,4641],1456,1240,1455,[823],1457,1240,1456,[19],1458,1242,[1909],&quot;id=366&quot;,[4633,4641],1459,1242,1458,[823],1460,1242,1459,[19],1461,1244,[1909],&quot;id=66&quot;,[4633,4641],1462,1244,1461,[823],1463,1244,1462,[19],1464,1246,[1909],&quot;id=232&quot;,[4633,4641],1465,1246,1464,[823],1466,1246,1465,[19],1467,1248,[1909],&quot;id=331&quot;,[4633,4641],1468,1248,1467,[823],1469,1248,1468,[19],1470,1250,[1909],&quot;id=230&quot;,[4633,4641],1471,1250,1470,[823],1472,1250,1471,[19],1473,1252,[1909],&quot;id=231&quot;,[4633,4641],1474,1252,1473,[823],1475,1252,1474,[19],1476,1254,[1909],&quot;id=229&quot;,[4633,4641],1477,1254,1476,[823],1478,1254,1477,[19],1479,1256,[1909],&quot;id=79&quot;,[4633,4641],1480,1256,1479,[823],1481,1256,1480,[19],1482,1258,[1909],&quot;id=81&quot;,[4633,4641],1483,1258,1482,[823],1484,1258,1483,[19],1485,1260,[1909],&quot;id=141&quot;,[4633,4641],1486,1260,1485,[823],1487,1260,1486,[19],1488,1262,[1909],&quot;id=367&quot;,[4633,4641],1489,1262,1488,[823],1490,1262,1489,[19],1491,1267,[19,4629],1492,1271,[19,4674],1493,1275,[19,4712],1494,1279,[19,4750],1495,1284,[19],&quot;Filter Icon&quot;,1496,1285,[3870],&quot;fill=#fff&quot;,&quot;d=M400.858,11.427c-3.241-7.421-8.85-11.132-16.854-11.136H18.564c-7.993,0-13.61,3.715-16.846,11.136\n      c-3.234,7.801-1.903,14.467,3.999,19.985l140.757,140.753v138.755c0,4.955,1.809,9.232,5.424,12.854l73.085,73.083\n      c3.429,3.614,7.71,5.428,12.851,5.428c2.282,0,4.66-0.479,7.135-1.43c7.426-3.238,11.14-8.851,11.14-16.845V172.166L396.861,31.413\n      C402.765,25.895,404.093,19.231,400.858,11.427z&quot;,1497,1287,[238],&quot;class=ot-fltr-opt&quot;,1498,1288,[1572],&quot;id=filter-apply-handler&quot;,1499,1288,1498,[19,2162],1500,1288,1499,[1572],&quot;id=filter-cancel-handler&quot;,1501,1293,[823,5480],1502,1295,[19],&quot;label&quot;,1503,1298,[823,5480],1504,1300,[19,6454],1505,1303,[823,5480],1506,1305,[19,6454],1507,1307,[19,1661],1508,1307,1507,[238],&quot;class=uk-grid grid-element&quot;,1509,1307,1508,[19,1870],1510,1309,[19,2725],1511,1309,1510,[238,6474],1512,1309,1511,[19,1661],1513,1311,[19,2725],1514,1311,1513,[238,6474],1515,1311,1514,[19,1661],1516,1313,[19,2725],1517,1313,1516,[238,6474],1518,1313,1517,[19,1661],1519,1315,[19,2725],1520,1315,1519,[238,6474],1521,1315,1520,[19,1661],1522,1317,[19,2725],1523,1317,1522,[238,6474],1524,1317,1523,[19,1661],1525,1319,[19,2725],1526,1319,1525,[238,6474],1527,1319,1526,[19,1661],1528,1321,[19,2725],1529,1321,1528,[238,6474],1530,1321,1529,[19,1661],1531,1323,[19,2725],1532,1323,1531,[238,6474],1533,1323,1532,[19,1661],1534,1325,[19,2725],1535,1325,1534,[238,6474],1536,1325,1535,[19,1661],1537,1327,[19,2725],1538,1327,1537,[238,6474],1539,1327,1538,[19,1661],1540,1331,[19,1661],1541,1331,1540,[238],&quot;class=grid-element&quot;,1542,1331,1541,[19,1661],1543,1331,1542,[238,6596],1544,1331,1543,[19,1661],1545,1331,1544,[238,6596],1546,1331,1545,[19,1661],1547,1331,1546,[238,6596],1548,1331,1547,[19,1661],1549,1331,1548,[238,6596],1550,1331,1549,[19,1661],1551,1331,1550,[238,6596],1552,1331,1551,[19,1870],1553,1335,[19,1661],1554,1335,1553,[238,6596],1555,1335,1554,[19,1661],1556,1335,1555,[238,6596],1557,1335,1556,[19,1661],1558,1335,1557,[238,6596],1559,1335,1558,[19,1870],1560,1339,[19,1661],1561,1339,1560,[238,6596],1562,1339,1561,[19,1661],1563,1339,1562,[238,6596],1564,1339,1563,[19,1661],1565,1339,1564,[238,6596],1566,1339,1565,[19,1661],1567,1339,1566,[238,6596],1568,1339,1567,[19,1870],1569,1343,[19,1661],1570,1343,1569,[238,6596],1571,1343,1570,[19,1661],1572,1343,1571,[238,6596],1573,1343,1572,[19,1870],1574,1349,[19,1661],1575,1349,1574,[672],&quot;id=admin-all-items&quot;,[240,3496,2629],1576,1349,1575,[19,1661],1577,1349,1576,[672],&quot;id=dev-items&quot;,[240,3508,2629],1578,1349,1577,[19,1661],1579,1349,1578,[672],&quot;id=user-free-items&quot;,[3519,2629],1580,1349,1579,[19],&quot;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t&quot;,1581,1349,1580,[952],1582,1349,1581,[19,1705],1583,1351,[19,1661],1584,1351,1583,[672,2665,2629],1585,1351,1584,[19,1870],1586,1355,[19,3557],1587,1355,1586,[672],&quot;id=header-signout&quot;,[2629],1588,1355,1587,[19,2725],1589,1358,[19],&quot;Close&quot;,1590,1364,[19,1661],1591,1364,1590,[19,1661],1592,1364,1591,[1909,2603],&quot;id=username2&quot;,&quot;name=_username2&quot;,[1875],&quot;placeholder=•••••••• •• •••••&quot;,&quot;aria-labelledby=header-username-lbl&quot;,[2703,3820],1593,1364,1592,[19,2709],1594,1364,1593,[952,1192],1595,1364,1594,[19,1870],1596,1367,[19,2721],1597,1369,[19,2725],1598,1369,1597,[19,2725],1599,1369,1598,[1909,2734],&quot;id=password2&quot;,&quot;name=_password2&quot;,[2737,2738,2739],&quot;aria-labelledby=pwdLoginDivLabel&quot;,[1912],1600,1369,1599,[19,2725],1601,1369,1600,[952,1192],1602,1369,1601,[19,1661],1603,1373,[19,2756],1604,1376,[19,2760],1605,1379,[19,2764],1606,1381,[2166,2768],1607,1384,[19,2725],1608,1384,1607,[238,535],1609,1384,1608,[19,1661],-1610,1389,[19,1661],1611,1389,1610,[672],&quot;id=a-forgot-password&quot;,[1008],-1612,1389,1611,[19],&quot;\n\t                                    &quot;,1613,1392,[19,2796],1614,1395,[19,2162],1615,1403,[823],&quot;class=select2-selection__rendered&quot;,&quot;id=select2-productGroupFilter-container&quot;,&quot;role=textbox&quot;,&quot;aria-readonly=true&quot;,1616,1403,1615,[823],&quot;class=select2-selection__arrow&quot;,[4797],1617,1404,[823,6898],&quot;id=select2-platformFilter-container&quot;,[6900,6901],1618,1404,1617,[823,6906,4797],1619,1405,[823,6898],&quot;id=select2-versionFilter-container&quot;,[6900,6901],1620,1405,1619,[823,6906,4797],1621,1406,[823,6898],&quot;id=select2-authorFilter-container&quot;,[6900,6901],1622,1406,1621,[823,6906,4797],1623,1407,[823,6898],&quot;id=select2-deliveryTypeFilter-container&quot;,[6900,6901],1624,1407,1623,[823,6906,4797],1625,1408,[823,6035,6036,4022,3108,4363,6038],&quot;aria-labelledby=select2-courseLevelFilter-container&quot;,1626,1420,[238],&quot;class=uk-grid uk-grid-width-large-1-1 uk-grid-match uk-grid-small&quot;,&quot;data-uk-grid-match={target:&apos;.each-app&apos;}&quot;,1627,1421,[238],&quot;class=uk-grid uk-grid-width-large-1-3 uk-grid-width-medium-1-3 uk-grid-width-small-1-2 uk-grid-match uk-grid-small&quot;,[6952],1628,1423,[19],&quot;ALM Octane&quot;,1629,1426,[19],&quot;AccuRev&quot;,1630,1429,[19],&quot;AccuSync&quot;,1631,1432,[19],&quot;Application Lifecycle Intelligence&quot;,1632,1435,[19],&quot;Application Lifecycle Management&quot;,1633,1438,[19],&quot;Deployment Automation&quot;,1634,1441,[19],&quot;Dimensions CM&quot;,1635,1444,[19],&quot;LoadRunner Cloud (StormRunner Load)&quot;,1636,1447,[19],&quot;LoadRunner Professional and LoadRunner Enterprise (Performance Center)&quot;,1637,1450,[19],&quot;Micro Focus Connect&quot;,1638,1453,[19],&quot;Micro Focus Usage Hub&quot;,1639,1456,[19,2157],1640,1459,[19],&quot;OpenText Filr&quot;,1641,1462,[19],&quot;Project and Portfolio Management&quot;,1642,1465,[19],&quot;Release Control (ADM)&quot;,1643,1468,[19],&quot;Service Virtualization&quot;,1644,1471,[19],&quot;Silk Performer&quot;,1645,1474,[19],&quot;Silk Test&quot;,1646,1477,[19],&quot;Silk WebDriver&quot;,1647,1480,[19],&quot;Sprinter&quot;,1648,1483,[19],&quot;UFT One&quot;,1649,1486,[19],&quot;UFTMobile&quot;,1650,1489,[19],&quot;iPrint Appliance&quot;,1651,1497,[238,4826],1652,1498,[19],&quot;Apply&quot;,1653,1500,[19,2300],1654,1501,[19],&quot;checkbox label&quot;,1655,1503,[19,7062],1656,1505,[19,7062],1657,1508,[19,2725],1658,1508,1657,[238],&quot;class=uk-width-1-4 left&quot;,1659,1508,1658,[19,2725],1660,1508,1659,[238],&quot;class=uk-width-3-4 right&quot;,1661,1508,1660,[19,1661],1662,1511,[19,3557],1663,1511,1662,[238,7076],1664,1511,1663,[19,3557],1665,1511,1664,[238,7085],1666,1511,1665,[19,2725],1667,1514,[19,3557],1668,1514,1667,[238,7076],1669,1514,1668,[19,3557],1670,1514,1669,[238,7085],1671,1514,1670,[19,2725],1672,1517,[19,3557],1673,1517,1672,[238,7076],1674,1517,1673,[19,3557],1675,1517,1674,[238,7085],1676,1517,1675,[19,2725],1677,1520,[19,3557],1678,1520,1677,[238,7076],1679,1520,1678,[19,3557],1680,1520,1679,[238,7085],1681,1520,1680,[19,2725],1682,1523,[19,3557],1683,1523,1682,[238,7076],1684,1523,1683,[19,3557],1685,1523,1684,[238,7085],1686,1523,1685,[19,2725],1687,1526,[19,3557],1688,1526,1687,[238,7076],1689,1526,1688,[19,3557],1690,1526,1689,[238,7085],1691,1526,1690,[19,2725],1692,1529,[19,3557],1693,1529,1692,[238,7076],1694,1529,1693,[19,3557],1695,1529,1694,[238,7085],1696,1529,1695,[19,2725],1697,1532,[19,3557],1698,1532,1697,[238,7076],1699,1532,1698,[19,3557],1700,1532,1699,[238,7085],1701,1532,1700,[19,2725],1702,1535,[19,3557],1703,1535,1702,[238,7076],1704,1535,1703,[19,3557],1705,1535,1704,[238,7085],1706,1535,1705,[19,2725],1707,1538,[19,3557],1708,1538,1707,[238,7076],1709,1538,1708,[19,3557],1710,1538,1709,[238,7085],1711,1538,1710,[19,2725],1712,1541,[19,2725],1713,1541,1712,[238],1714,1541,1713,[19,2725],1715,1541,1714,[238],&quot;class=link-header&quot;,1716,1541,1715,[19],&quot;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t&quot;,1717,1541,1716,[672,3496],1718,1541,1717,[19,2725],1719,1541,1718,[238],&quot;class=sub-tabs&quot;,1720,1541,1719,[19,2725],1721,1541,1720,[672],&quot;href=/marketplace/appdelivery/dashboard/all-items?tab=published&quot;,1722,1541,1721,[19,2725],1723,1541,1722,[672],&quot;href=/marketplace/appdelivery/dashboard/all-items?tab=draft&quot;,1724,1541,1723,[19,2725],1725,1541,1724,[672],&quot;href=/marketplace/appdelivery/dashboard/all-items?tab=unpub&quot;,1726,1541,1725,[19,2725],1727,1541,1726,[672],&quot;href=/marketplace/appdelivery/dashboard/all-items?tab=flagged&quot;,1728,1541,1727,[19,2725],1729,1541,1728,[672],&quot;href=/marketplace/appdelivery/dashboard/manage-roles&quot;,1730,1541,1729,[19,2725],1731,1541,1730,[672,4253],&quot;href=/marketplace/appdelivery/dashboard/entitlement-lookup&quot;,1732,1541,1731,[19,1661],1733,1543,[19,2725],1734,1543,1733,[238],1735,1543,1734,[19,2725],1736,1543,1735,[238,7295],1737,1543,1736,[19,2725],1738,1543,1737,[672],&quot;href=/marketplace/appdelivery/dashboard/developers&quot;,1739,1543,1738,[19,2725],1740,1543,1739,[672,4253],&quot;href=/marketplace/appdelivery/dashboard/downloads&quot;,1741,1543,1740,[19,2725],1742,1543,1741,[672],&quot;href=/marketplace/appdelivery/dashboard/metrics&quot;,1743,1543,1742,[19,2725],1744,1543,1743,[672],&quot;id=total-metrics-link&quot;,&quot;href=/marketplace/appdelivery/dashboard/total-metrics&quot;,[263],1745,1543,1744,[19,1661],1746,1545,[19,2725],1747,1545,1746,[238],1748,1545,1747,[19,2725],1749,1545,1748,[238,7295],1750,1545,1749,[19,2725],1751,1545,1750,[672],&quot;href=/marketplace/appdelivery/dashboard/marketplace&quot;,1752,1545,1751,[19,2725],1753,1545,1752,[672],&quot;href=/marketplace/appdelivery/dashboard/categories&quot;,1754,1545,1753,[19,2725],1755,1545,1754,[672],&quot;href=/marketplace/appdelivery/dashboard/homepage&quot;,1756,1545,1755,[19,2725],1757,1545,1756,[672,4253],&quot;href=/marketplace/appdelivery/dashboard/partner-pages&quot;,1758,1545,1757,[19,2725],1759,1545,1758,[672],&quot;href=/marketplace/appdelivery/dashboard/developer-program-page&quot;,1760,1545,1759,[19,2725],1761,1545,1760,[672],&quot;href=/marketplace/appdelivery/dashboard/companies&quot;,1762,1545,1761,[19,2725],1763,1545,1762,[672],&quot;href=/marketplace/appdelivery/dashboard/products&quot;,1764,1545,1763,[19,1661],1765,1547,[19,2725],1766,1547,1765,[238],1767,1547,1766,[19,2725],1768,1547,1767,[238,7295],1769,1547,1768,[19,2725],1770,1547,1769,[672,3508],1771,1547,1770,[19,2725],1772,1547,1771,[672],&quot;href=/marketplace/appdelivery/dashboard/views-downloads&quot;,1773,1547,1772,[19,7300],1774,1547,1773,[672],&quot;href=/marketplace/appdelivery/dashboard/all-companyapps&quot;,1775,1547,1774,[19],&quot;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t&quot;,1776,1549,[19],&quot;\n\n                                                \t\t\t\t\t\t\t\t\t\t\t\t\t&quot;,1777,1549,1776,[238],1778,1549,1777,[19,3557],1779,1549,1778,[238,7295],1780,1549,1779,[19],&quot;\n                                                \t\t\t\t\t\t\t\t\t\t\t\t&quot;,1781,1549,1780,[672,3519],1782,1549,1781,[19,6755],1783,1551,[19,2725],1784,1551,1783,[238],1785,1551,1784,[19,2725],1786,1551,1785,[238,7295],1787,1551,1786,[19,2725],1788,1551,1787,[672,2665],1789,1551,1788,[19,3557],1790,1551,1789,[672],&quot;href=/marketplace/appdelivery/dashboard/notifications&quot;,1791,1551,1790,[19,1661],1792,1554,[19,2725],1793,1554,1792,[238],1794,1554,1793,[19,2725],1795,1554,1794,[238,7295],1796,1554,1795,[19,2725],1797,1554,1796,[672,3508],1798,1554,1797,[19,2725],1799,1554,1798,[672,7542],1800,1554,1799,[19],&quot;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t&quot;,1801,1554,1800,[672,7551],1802,1554,1801,[19],&quot;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t&quot;,1803,1556,[19,2725],1804,1556,1803,[238],1805,1556,1804,[19,2725],1806,1556,1805,[238,7295],1807,1556,1806,[19,2725],1808,1556,1807,[672,3519],1809,1556,1808,[19,6755],1810,1558,[19,2725],1811,1558,1810,[238],1812,1558,1811,[19,2725],1813,1558,1812,[238,7295],1814,1558,1813,[19,2725],1815,1558,1814,[672,2665],1816,1558,1815,[19,2725],1817,1558,1816,[672,7617],1818,1558,1817,[19,1661],1819,1561,[19,2725],1820,1561,1819,[238],1821,1561,1820,[19,2725],1822,1561,1821,[238,7295],1823,1561,1822,[19,2725],1824,1561,1823,[672,3496],1825,1561,1824,[19,2725],1826,1561,1825,[238,7313],1827,1561,1826,[19,2725],1828,1561,1827,[672,7322],1829,1561,1828,[19,2725],1830,1561,1829,[672,7331],1831,1561,1830,[19,2725],1832,1561,1831,[672,7340],1833,1561,1832,[19,2725],1834,1561,1833,[672,7349],1835,1561,1834,[19,7300],1836,1561,1835,[672,4253,7367],1837,1561,1836,[19,1661],1838,1563,[19,2725],1839,1563,1838,[238],1840,1563,1839,[19,2725],1841,1563,1840,[238,7295],1842,1563,1841,[19,2725],1843,1563,1842,[672,3508],1844,1563,1843,[19,2725],1845,1563,1844,[672,7542],1846,1563,1845,[19,7657],1847,1563,1846,[672,7551],1848,1563,1847,[19,7666],1849,1565,[19,2725],1850,1565,1849,[238],1851,1565,1850,[19,2725],1852,1565,1851,[238,7295],1853,1565,1852,[19,2725],1854,1565,1853,[672,3519],1855,1565,1854,[19,6755],1856,1567,[19,2725],1857,1567,1856,[238],1858,1567,1857,[19,2725],1859,1567,1858,[238,7295],1860,1567,1859,[19,2725],1861,1567,1860,[672,2665],1862,1567,1861,[19,2725],1863,1567,1862,[672,7617],1864,1567,1863,[19,1661],1865,1570,[19,2725],1866,1570,1865,[238],1867,1570,1866,[19,2725],1868,1570,1867,[238,7295],1869,1570,1868,[19,2725],1870,1570,1869,[672,3519],1871,1570,1870,[19,6755],1872,1572,[19,2725],1873,1572,1872,[238],1874,1572,1873,[19,2725],1875,1572,1874,[238,7295],1876,1572,1875,[19,2725],1877,1572,1876,[672,2665],1878,1572,1877,[19,7657],1879,1572,1878,[672,7617],1880,1572,1879,[19,6755],1881,1575,[19,3528],1882,1577,[19,3528],1883,1579,[19,3528],1884,1581,[19],&quot;See and manage items, upgrades, and purchases.&quot;,1885,1584,[19],&quot;My profile&quot;,1886,1587,[19,3542],1887,1606,[19,3553],1888,1608,[19,3557],1889,1608,1888,[238,744],1890,1608,1889,[19,3557],1891,1608,1890,[238,754],1892,1608,1891,[19,2725],-1893,1611,[19,3577],1894,1395,[1646],1895,1397,[1646],1896,1616,[2228,4797],1897,1618,[2228,4797],1898,1620,[2228,4797],1899,1622,[2228,4797],1900,1624,[2228,4797],1901,1625,[823,6898],&quot;id=select2-courseLevelFilter-container&quot;,[6900,6901],1902,1625,1901,[823,6906,4797],1903,1651,[1909],&quot;id=chkbox-id&quot;,[4633],&quot;class=category-filter-handler&quot;,[4641],1904,1651,1903,[19,2162],1905,1651,1904,[2591],&quot;for=chkbox-id&quot;,1906,1651,1905,[19,2162],1907,1651,1906,[823,5592],1908,1658,[19,3557],1909,1658,1908,[2322],&quot;class=category-icon&quot;,&quot;src=https://d3075pyijv0bbs.cloudfront.net/marketplace_4/categories/all-items.png&quot;,1910,1658,1909,[19,2725],1911,1660,[19,3557],1912,1660,1911,[238],&quot;class=name&quot;,1913,1660,1912,[19,3364],1914,1660,1913,[238],&quot;class=count&quot;,1915,1660,1914,[19,2725],1916,1663,[19,3364],1917,1663,1916,[2322,8077],&quot;src=https://s3.amazonaws.com/marketplace2-public/marketplace_5/categories/86f0e9fd9deb721a3a2fdb2183875d64e0b0e018.svg&quot;,1918,1663,1917,[19,3557],1919,1665,[19,3364],1920,1665,1919,[238,8090],1921,1665,1920,[19,3364],1922,1665,1921,[238,8099],1923,1665,1922,[19,3557],1924,1668,[19,3364],1925,1668,1924,[2322,8077],&quot;src=https://s3.amazonaws.com/marketplace2-public/marketplace_5/categories/7ffa504ad718cc636b5cde6743550ef2ffe833cc.svg&quot;,1926,1668,1925,[19,3557],1927,1670,[19,3364],1928,1670,1927,[238,8090],1929,1670,1928,[19,3364],1930,1670,1929,[238,8099],1931,1670,1930,[19,3557],1932,1673,[19,3364],1933,1673,1932,[2322,8077],&quot;src=https://s3.amazonaws.com/marketplace2-public/marketplace_5/categories/a9f6b19c67866ca3b4d7b8bc86eb4d06de66e2ff.svg&quot;,1934,1673,1933,[19,3557],1935,1675,[19,3364],1936,1675,1935,[238,8090],1937,1675,1936,[19,3364],1938,1675,1937,[238,8099],1939,1675,1938,[19,3557],1940,1678,[19,3364],1941,1678,1940,[2322,8077],&quot;src=https://s3.amazonaws.com/marketplace2-public/marketplace_5/categories/202b657f36fdff8b27b50e361917abf3a3b22b2b.svg&quot;,1942,1678,1941,[19,3557],1943,1680,[19,3364],1944,1680,1943,[238,8090],1945,1680,1944,[19,3364],1946,1680,1945,[238,8099],1947,1680,1946,[19,3557],1948,1683,[19,3364],1949,1683,1948,[2322,8077],&quot;src=https://s3.amazonaws.com/marketplace2-public/marketplace_5/categories/80517adbc2f17920f6e923f2e99968ac7cdb4d93.svg&quot;,1950,1683,1949,[19,3557],1951,1685,[19,3364],1952,1685,1951,[238,8090],1953,1685,1952,[19,3364],1954,1685,1953,[238,8099],1955,1685,1954,[19,3557],1956,1688,[19,3364],1957,1688,1956,[2322,8077],&quot;src=https://s3.amazonaws.com/marketplace2-public/marketplace_5/categories/9f9d60a1ad067df9ee0e7ca29edd8f3d422c2769.svg&quot;,1958,1688,1957,[19,3557],1959,1690,[19,3364],1960,1690,1959,[238,8090],1961,1690,1960,[19,3364],1962,1690,1961,[238,8099],1963,1690,1962,[19,3557],1964,1693,[19,3364],1965,1693,1964,[2322,8077],&quot;src=https://s3.amazonaws.com/marketplace2-public/marketplace_5/categories/b419c052a179fab446c51aada2a70e821ace807f.svg&quot;,1966,1693,1965,[19,3557],1967,1695,[19,3364],1968,1695,1967,[238,8090],1969,1695,1968,[19,3364],1970,1695,1969,[238,8099],1971,1695,1970,[19,3557],1972,1698,[19,3364],1973,1698,1972,[2322,8077],&quot;src=https://s3.amazonaws.com/marketplace2-public/marketplace_5/categories/80652c5f782e8f38f7567d98f99e55f5254961ae.svg&quot;,1974,1698,1973,[19,3557],1975,1700,[19,3364],1976,1700,1975,[238,8090],1977,1700,1976,[19,3364],1978,1700,1977,[238,8099],1979,1700,1978,[19,3557],1980,1703,[19,3364],1981,1703,1980,[2322,8077],&quot;src=https://s3.amazonaws.com/marketplace2-public/marketplace_5/categories/4d0ef50a59882d289ad8d13c5a6293155db555dd.svg&quot;,1982,1703,1981,[19,3557],1983,1705,[19,3364],1984,1705,1983,[238,8090],1985,1705,1984,[19,3364],1986,1705,1985,[238,8099],1987,1705,1986,[19,3557],1988,1708,[19,3364],1989,1708,1988,[2322,8077],&quot;src=https://s3.amazonaws.com/marketplace2-public/marketplace_5/categories/223096095a717b4a826e94cef3a9c58b5110b30c.svg&quot;,1990,1708,1989,[19,3557],1991,1710,[19,3364],1992,1710,1991,[238,8090],1993,1710,1992,[19,3364],1994,1710,1993,[238,8099],1995,1710,1994,[19,3557],1996,1713,[2166],&quot;class=admin-icon&quot;,1997,1715,[19],&quot;Admin&quot;,1998,1717,[19],&quot;All pending&quot;,1999,1719,[19,3557],2000,1719,1999,[672],&quot;href=/marketplace/appdelivery/dashboard/all-items?tab=qa&quot;,2001,1719,2000,[19,3557],2002,1719,2001,[672],&quot;href=/marketplace/appdelivery/dashboard/all-items?tab=review&quot;,2003,1719,2002,[19,2725],2004,1721,[19],&quot;Published&quot;,2005,1723,[19],&quot;Draft&quot;,2006,1725,[19],&quot;Unpublished&quot;,2007,1727,[19],&quot;Flagged reviews&quot;,2008,1729,[19],&quot;Manage roles&quot;,2009,1731,[19],&quot;Entitlement lookup&quot;,2010,1734,[2166],&quot;class=reports-icon&quot;,2011,1736,[19],&quot;Reports&quot;,2012,1738,[19],&quot;Developers&quot;,2013,1740,[19],&quot;Downloads&quot;,2014,1742,[19],&quot;Metrics&quot;,2015,1744,[19],&quot;Total Metrics&quot;,2016,1747,[2166],&quot;class=settings-icon&quot;,2017,1749,[19],&quot;Settings&quot;,2018,1751,[19,2243],2019,1753,[19,3049],2020,1755,[19],&quot;Homepage&quot;,2021,1757,[19],&quot;Partners&quot;,2022,1759,[19],&quot;Developer program&quot;,2023,1761,[19],&quot;Company&quot;,2024,1763,[19],&quot;Products&quot;,2025,1766,[2166],&quot;class=my-uploads-icon&quot;,2026,1768,[19],&quot;My Uploads&quot;,2027,1770,[823],&quot;class=uk-text-capitalize&quot;,2028,1772,[19],&quot;My views &amp; downloads&quot;,2029,1774,[19],&quot;All company apps&quot;,2030,1777,[2166],&quot;class=my-downloads-icon&quot;,2031,1779,[19],&quot;My downloads&quot;,2032,1781,[19],&quot;Free items&quot;,2033,1784,[2166],&quot;class=my-account-icon&quot;,2034,1786,[19],&quot;My Account&quot;,2035,1788,[19,7987],2036,1790,[19],&quot;Manage notifications&quot;,2037,1793,[2166,8532],2038,1795,[19,8536],2039,1797,[823,8540],2040,1799,[19,8544],2041,1801,[19,8548],2042,1804,[2166,8552],2043,1806,[19],&quot;My Downloads&quot;,2044,1808,[19,8560],2045,1811,[2166,8564],2046,1813,[19,8568],2047,1815,[19,7987],2048,1817,[19,8575],2049,1820,[2166,8417],2050,1822,[19],&quot;Approver&quot;,2051,1824,[19,8425],2052,1826,[19,3557],2053,1826,2052,[672,8433],2054,1826,2053,[19,3557],2055,1826,2054,[672,8442],2056,1826,2055,[19,2725],2057,1828,[19,8450],2058,1830,[19,8454],2059,1832,[19,8458],2060,1834,[19,8462],2061,1836,[19,8470],2062,1839,[2166,8532],2063,1841,[19,8536],2064,1843,[823,8540],2065,1845,[19,8544],2066,1847,[19,8548],2067,1850,[2166,8552],2068,1852,[19,8597],2069,1854,[19,8560],2070,1857,[2166,8564],2071,1859,[19,8568],2072,1861,[19,7987],2073,1863,[19,8575],2074,1866,[2166,8552],2075,1868,[19,8597],2076,1870,[19,8560],2077,1873,[2166,8564],2078,1875,[19,8568],2079,1877,[19,7987],2080,1879,[19,8575],2081,1894,[14],&quot;*B=https://www.microfocus.com/marketplace/signin/sso&quot;,2082,1894,2081,[24],2083,1895,[14,2428],2084,1895,2083,[24],2085,1902,[2228,4797],2086,1905,[823,5480],2087,1907,[19,6454],2088,1912,[19,3364],2089,1912,2088,[672,2247,2629],2090,1912,2089,[19,3557],2091,1914,[19],&quot;▫▫▫ items&quot;,2092,1920,[19],&quot;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t&quot;,2093,1920,2092,[672],&quot;href=/marketplace/appdelivery/category/micro-focus-subscription-management-tool&quot;,[2629],2094,1920,2093,[19,3364],2095,1922,[19],&quot;▫ item&quot;,2096,1928,[19,8756],2097,1928,2096,[672],&quot;href=/marketplace/appdelivery/category/oes&quot;,[2629],2098,1928,2097,[19,3364],2099,1930,[19],&quot;▫▫ item&quot;,2100,1936,[19,8756],2101,1936,2100,[672],&quot;href=/marketplace/appdelivery/category/developer-tools&quot;,[2629],2102,1936,2101,[19,3364],2103,1938,[19,8787],2104,1944,[19,8756],2105,1944,2104,[672],&quot;href=/marketplace/appdelivery/category/performance-engineering&quot;,[2629],2106,1944,2105,[19,3364],2107,1946,[19,8787],2108,1952,[19,8756],2109,1952,2108,[672],&quot;href=/marketplace/appdelivery/category/enterprise-agile&quot;,[2629],2110,1952,2109,[19,3364],2111,1954,[19,8787],2112,1960,[19,8756],2113,1960,2112,[672],&quot;href=/marketplace/appdelivery/category/continuous-testing&quot;,[2629],2114,1960,2113,[19,3364],2115,1962,[19,8787],2116,1968,[19,8756],2117,1968,2116,[672],&quot;href=/marketplace/appdelivery/category/others&quot;,[2629],2118,1968,2117,[19,3364],2119,1970,[19,8770],2120,1976,[19,8756],2121,1976,2120,[672],&quot;href=/marketplace/appdelivery/category/filr&quot;,[2629],2122,1976,2121,[19,3364],2123,1978,[19,8770],2124,1984,[19,8756],2125,1984,2124,[672],&quot;href=/marketplace/appdelivery/category/digital-ux&quot;,[2629],2126,1984,2125,[19,3364],2127,1986,[19,8787],2128,1992,[19,8756],2129,1992,2128,[672],&quot;href=/marketplace/appdelivery/category/devops&quot;,[2629],2130,1992,2129,[19,3364],2131,1994,[19],&quot;▫▫▫ item&quot;,2132,2000,[19],&quot;QA&quot;,2133,2002,[19],&quot;Admin Review&quot;,2134,2027,[19],&quot;items&quot;,2135,2039,[19,8928],2136,2053,[19,8920],2137,2055,[19,8924],2138,2064,[19,8928],2139,2082,[19,217],2140,2082,2139,[238],2141,2082,2140,[19,484],2142,2082,2141,[19,500],2143,2086,[19,7062],2144,2089,[19],&quot;All items&quot;,2145,2093,[19],&quot;Micro Focus Subscription Management Tool&quot;,2146,2097,[19,2157],2147,2101,[19],&quot;Developer Tools&quot;,2148,2105,[19],&quot;Performance Engineering&quot;,2149,2109,[19],&quot;Enterprise Agile&quot;,2150,2113,[19],&quot;Continuous Testing&quot;,2151,2117,[19],&quot;Others&quot;,2152,2121,[19,7008],2153,2125,[19],&quot;Digital UX&quot;,2154,2129,[19],&quot;DevOps&quot;,2155,2140,[19,20],2156,2140,2155,[988],&quot;id=sso_login_form&quot;,&quot;name=ssologin&quot;,[990],&quot;action=https://login.microfocus.com/nidp/app/login?sid=0&amp;sid=0&quot;,2157,2140,2156,[19,217],2158,2156,[19,29],2159,2156,2158,[1909,1910],&quot;name=option&quot;,[1912],2160,2156,2159,[19,29],2161,2156,2160,[1909,1910],&quot;name=target&quot;,[1912],2162,2156,2161,[19,29],2163,2156,2162,[1909,3814,2603],&quot;name=Ecom_User_ID&quot;,[3820],2164,2156,2163,[19,29],2165,2156,2164,[1909,3853,2734],&quot;name=Ecom_Password&quot;,[1912],2166,2156,2165,[19,20]],[47,6,756,563,755,&quot;A&quot;,&quot;id=member-welcome&quot;,&quot;class=&quot;,&quot;style=visibility: visible;&quot;,758,563,757,[5],&quot;id=guest-welcome&quot;,&quot;style=visibility:hidden&quot;,&quot;class=uk-hidden&quot;,760,563,759,&quot;DIV&quot;,&quot;id=sign-in-dd&quot;,&quot;class=uk-dropdown sign-in member&quot;,554,373,553,[19],&quot;id=member-db&quot;,[7],556,373,555,[19],&quot;id=guest-db&quot;,&quot;data-uk-dropdown={mode:&apos;hover&apos;, remaintime: 200}&quot;,[15],586,398,585,[19],&quot;id=member-mobile-db&quot;,[7],588,398,587,[5],&quot;id=guest-mobile-db&quot;,&quot;class=dashboard-login uk-hidden&quot;,&quot;target=_self&quot;,406,249,405,&quot;LI&quot;,&quot;id=user-mobile-sign-out&quot;,&quot;class=edu-show&quot;,404,249,403,[51],&quot;id=user-mobile-profile&quot;,[53],408,249,407,[51],&quot;id=guest-mobile-sign-in&quot;,&quot;class=edu-show uk-hidden&quot;,410,249,409,[51],&quot;id=guest-mobile-sign-up&quot;,[65]]]}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Sec-Fetch-Mode" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                <stringProp name="Header.value">cors</stringProp>
              </elementProp>
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">https://www.microfocus.com/</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Site" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                <stringProp name="Header.value">cross-site</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Origin" elementType="Header">
                <stringProp name="Header.name">Origin</stringProp>
                <stringProp name="Header.value">https://www.microfocus.com</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">text/plain;charset=UTF-8</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:128.0) Gecko/20100101 Firefox/128.0</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Dest" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                <stringProp name="Header.value">empty</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/v1/beacon/img.gif-141" enabled="true">
          <stringProp name="HTTPSampler.domain">b.6sc.co</stringProp>
          <stringProp name="HTTPSampler.port">443</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.path">/v1/beacon/img.gif</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments">
              <elementProp name="token" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">token</stringProp>
                <stringProp name="Argument.value">5f90029b56db57cd17027efd926646ef</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="svisitor" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">svisitor</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="visitor" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">visitor</stringProp>
                <stringProp name="Argument.value">e43783fd-0d0b-4b08-8499-84fc86871881</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="session" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">session</stringProp>
                <stringProp name="Argument.value">cfa3825d-7349-4a7a-87a4-13fccbbe3404</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="event" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">event</stringProp>
                <stringProp name="Argument.value">active_time_track</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="q" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">q</stringProp>
                <stringProp name="Argument.value">{&quot;currentTime&quot;:&quot;Sat, 20 Jul 2024 15:24:10 GMT&quot;,&quot;lastTrackTime&quot;:&quot;Sat, 20 Jul 2024 15:24:09 GMT&quot;,&quot;timeSpent&quot;:&quot;1006&quot;,&quot;totalTimeSpent&quot;:&quot;2026&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="isIframe" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">isIframe</stringProp>
                <stringProp name="Argument.value">false</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="m" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">m</stringProp>
                <stringProp name="Argument.value">{&quot;description&quot;:&quot;Securely deliver advanced file, print, network, and storage management services across your enterprise.&quot;,&quot;keywords&quot;:&quot;&quot;,&quot;title&quot;:&quot;            Open Enterprise Server | Application Delivery Marketplace | OpenText\n    &quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="cb" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">cb</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="r" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">r</stringProp>
                <stringProp name="Argument.value">https://www.microfocus.com/marketplace/appdelivery</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="thirdParty" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">thirdParty</stringProp>
                <stringProp name="Argument.value">{}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="v2" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">v2</stringProp>
                <stringProp name="Argument.value">1</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="pageURL" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">pageURL</stringProp>
                <stringProp name="Argument.value">https://www.microfocus.com/marketplace/appdelivery/category/oes</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="pageViewId" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">pageViewId</stringProp>
                <stringProp name="Argument.value">6fa0f2f9-bb7e-4bcf-8cba-baaaf4caec92</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="v" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">v</stringProp>
                <stringProp name="Argument.value">1.1.22</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Sec-Fetch-Mode" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                <stringProp name="Header.value">no-cors</stringProp>
              </elementProp>
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">https://www.microfocus.com/</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Site" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                <stringProp name="Header.value">cross-site</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Priority" elementType="Header">
                <stringProp name="Header.name">Priority</stringProp>
                <stringProp name="Header.value">u=6, i</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:128.0) Gecko/20100101 Firefox/128.0</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">image/avif,image/webp,image/png,image/svg+xml,image/*;q=0.8,*/*;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Dest" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                <stringProp name="Header.value">image</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/-145" enabled="true">
          <stringProp name="HTTPSampler.domain">c.6sc.co</stringProp>
          <stringProp name="HTTPSampler.port">443</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.path">/</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Sec-Fetch-Mode" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                <stringProp name="Header.value">cors</stringProp>
              </elementProp>
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">https://www.microfocus.com/</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Site" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                <stringProp name="Header.value">cross-site</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Origin" elementType="Header">
                <stringProp name="Header.name">Origin</stringProp>
                <stringProp name="Header.value">https://www.microfocus.com</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:128.0) Gecko/20100101 Firefox/128.0</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Dest" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                <stringProp name="Header.value">empty</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/collect-140" enabled="true">
          <stringProp name="HTTPSampler.domain">y.clarity.ms</stringProp>
          <stringProp name="HTTPSampler.port">443</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">/collect</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;e&quot;:[&quot;0.7.32&quot;,3,254,935,&quot;iu69ce0l9t&quot;,&quot;dprpjk&quot;,&quot;lkifca&quot;,3,1,1],&quot;a&quot;:[[373,24,&quot;clarity&quot;,&quot;dup.3ynmtgenx6&quot;],[91,12,133,738,147],[106,12,842,698,193],[122,12,842,683,206],[122,12,485,670,222],[137,12,485,654,238],[153,12,485,648,244],[153,12,1404,643,248],[169,12,1404,638,252],[184,12,1404,635,254],[200,12,1404,634,254],[216,12,1404,633,255],[231,12,1404,631,255],[247,12,1404,629,256],[262,12,1404,617,261],[278,12,1404,604,266],[294,12,1404,600,266],[309,12,1404,597,267],[324,12,1404,582,275],[355,12,1404,573,282],[372,12,1404,567,286],[372,12,485,560,292],[387,12,485,551,299],[403,12,485,538,310],[419,12,485,538,311],[466,12,851,540,314],[480,12,851,549,323],[497,12,1010,553,325],[512,12,1010,566,327],[528,12,1010,574,328],[528,12,1211,585,330],[528,12,1211,595,331],[544,12,1211,618,335],[559,12,1011,638,339],[575,12,1011,653,342],[590,12,1011,658,343],[590,12,1212,664,345],[606,12,1212,672,346],[622,12,1212,682,346],[652,12,1212,689,347],[669,12,1212,692,347],[684,12,1212,693,347],[762,12,1212,694,347],[777,12,1212,694,346],[794,12,1212,694,345],[824,12,1212,694,344],[902,12,1212,694,343],[997,12,1212,694,342],[1011,12,1212,693,341],[254,4,1,1536,1037,1536,731,0,0,0,0,47,0],[1188,0,2,41598,4,6,25,51],[1189,35,6]]}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Sec-Fetch-Mode" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                <stringProp name="Header.value">no-cors</stringProp>
              </elementProp>
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">https://www.microfocus.com/</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Site" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                <stringProp name="Header.value">cross-site</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Origin" elementType="Header">
                <stringProp name="Header.name">Origin</stringProp>
                <stringProp name="Header.value">https://www.microfocus.com</stringProp>
              </elementProp>
              <elementProp name="Priority" elementType="Header">
                <stringProp name="Header.name">Priority</stringProp>
                <stringProp name="Header.value">u=6</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">text/plain;charset=UTF-8</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:128.0) Gecko/20100101 Firefox/128.0</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Dest" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                <stringProp name="Header.value">empty</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/collect-144" enabled="true">
          <stringProp name="HTTPSampler.domain">www.google-analytics.com</stringProp>
          <stringProp name="HTTPSampler.port">443</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.path">/collect</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments">
              <elementProp name="v" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">v</stringProp>
                <stringProp name="Argument.value">1</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="_v" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">_v</stringProp>
                <stringProp name="Argument.value">j101</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="a" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">a</stringProp>
                <stringProp name="Argument.value">2060336775</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="t" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">t</stringProp>
                <stringProp name="Argument.value">pageview</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="_s" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">_s</stringProp>
                <stringProp name="Argument.value">1</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="dl" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">dl</stringProp>
                <stringProp name="Argument.value">https://www.microfocus.com/marketplace/appdelivery/category/oes</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="ul" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">ul</stringProp>
                <stringProp name="Argument.value">en-us</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="de" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">de</stringProp>
                <stringProp name="Argument.value">UTF-8</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="dt" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">dt</stringProp>
                <stringProp name="Argument.value">Open Enterprise Server | Application Delivery Marketplace | OpenText</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="sd" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">sd</stringProp>
                <stringProp name="Argument.value">24-bit</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="sr" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">sr</stringProp>
                <stringProp name="Argument.value">1536x864</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="vp" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">vp</stringProp>
                <stringProp name="Argument.value">1536x731</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="je" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">je</stringProp>
                <stringProp name="Argument.value">0</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="_u" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">_u</stringProp>
                <stringProp name="Argument.value">SCCACEABBAAAACgAI~</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="jid" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">jid</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="gjid" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">gjid</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="cid" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">cid</stringProp>
                <stringProp name="Argument.value">1264267099.1721486760</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="tid" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">tid</stringProp>
                <stringProp name="Argument.value">UA-44010430-10</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="_gid" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">_gid</stringProp>
                <stringProp name="Argument.value">675600319.1721486761</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="gtm" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">gtm</stringProp>
                <stringProp name="Argument.value">45He47h0n71MXKD45v71343913za200</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="gcs" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">gcs</stringProp>
                <stringProp name="Argument.value">G111</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="gcd" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">gcd</stringProp>
                <stringProp name="Argument.value">13n3n3n3n5</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="dma" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">dma</stringProp>
                <stringProp name="Argument.value">0</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="tag_exp" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">tag_exp</stringProp>
                <stringProp name="Argument.value">0</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="z" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">z</stringProp>
                <stringProp name="Argument.value">1131958657</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Sec-Fetch-Mode" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                <stringProp name="Header.value">no-cors</stringProp>
              </elementProp>
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">https://www.microfocus.com/</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Site" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                <stringProp name="Header.value">cross-site</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Priority" elementType="Header">
                <stringProp name="Header.name">Priority</stringProp>
                <stringProp name="Header.value">u=6, i</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:128.0) Gecko/20100101 Firefox/128.0</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">image/avif,image/webp,image/png,image/svg+xml,image/*;q=0.8,*/*;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Dest" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                <stringProp name="Header.value">image</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/g/collect?v=2&amp;tid=G-SWJ97E3ZRQ&amp;gtm=45je47h0v885797725z871343913za200zb71343913&amp;_p=1721489046123&amp;_gaz=1&amp;gcs=G111&amp;gcd=13n3n3n3n5&amp;npa=0&amp;dma=0&amp;tag_exp=0&amp;gdid=dYWJhMj&amp;cid=1264267099.1721486760&amp;ul=en-us&amp;sr=1536x864&amp;frm=0&amp;pscdl=noapi&amp;_s=1&amp;sid=1721486760&amp;sct=1&amp;seg=1&amp;dl=https%3A%2F%2Fwww.microfocus.com%2Fmarketplace%2Fappdelivery%2Fcategory%2Foes&amp;dr=https%3A%2F%2Fwww.microfocus.com%2Fmarketplace%2Fappdelivery&amp;dt=Open%20Enterprise%20Server%20%7C%20Application%20Delivery%20Marketplace%20%7C%20OpenText&amp;en=page_view&amp;tfd=9883&amp;_z=fetch-146" enabled="true">
          <stringProp name="HTTPSampler.domain">analytics.google.com</stringProp>
          <stringProp name="HTTPSampler.port">443</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.path">/g/collect?v=2&amp;tid=G-SWJ97E3ZRQ&amp;gtm=45je47h0v885797725z871343913za200zb71343913&amp;_p=1721489046123&amp;_gaz=1&amp;gcs=G111&amp;gcd=13n3n3n3n5&amp;npa=0&amp;dma=0&amp;tag_exp=0&amp;gdid=dYWJhMj&amp;cid=1264267099.1721486760&amp;ul=en-us&amp;sr=1536x864&amp;frm=0&amp;pscdl=noapi&amp;_s=1&amp;sid=1721486760&amp;sct=1&amp;seg=1&amp;dl=https%3A%2F%2Fwww.microfocus.com%2Fmarketplace%2Fappdelivery%2Fcategory%2Foes&amp;dr=https%3A%2F%2Fwww.microfocus.com%2Fmarketplace%2Fappdelivery&amp;dt=Open%20Enterprise%20Server%20%7C%20Application%20Delivery%20Marketplace%20%7C%20OpenText&amp;en=page_view&amp;tfd=9883&amp;_z=fetch</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Sec-Fetch-Mode" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                <stringProp name="Header.value">no-cors</stringProp>
              </elementProp>
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">https://www.microfocus.com/</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Site" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                <stringProp name="Header.value">cross-site</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Origin" elementType="Header">
                <stringProp name="Header.name">Origin</stringProp>
                <stringProp name="Header.value">https://www.microfocus.com</stringProp>
              </elementProp>
              <elementProp name="Priority" elementType="Header">
                <stringProp name="Header.name">Priority</stringProp>
                <stringProp name="Header.value">u=4</stringProp>
              </elementProp>
              <elementProp name="Pragma" elementType="Header">
                <stringProp name="Header.name">Pragma</stringProp>
                <stringProp name="Header.value">no-cache</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="Cache-Control" elementType="Header">
                <stringProp name="Header.name">Cache-Control</stringProp>
                <stringProp name="Header.value">no-cache</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:128.0) Gecko/20100101 Firefox/128.0</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Dest" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                <stringProp name="Header.value">empty</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/c.gif-143" enabled="true">
          <stringProp name="TestPlan.comments">Detected the start of a redirect chain</stringProp>
          <stringProp name="HTTPSampler.domain">c.clarity.ms</stringProp>
          <stringProp name="HTTPSampler.port">443</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.path">/c.gif</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Sec-Fetch-Mode" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                <stringProp name="Header.value">no-cors</stringProp>
              </elementProp>
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">https://www.microfocus.com/</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Site" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                <stringProp name="Header.value">cross-site</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Priority" elementType="Header">
                <stringProp name="Header.name">Priority</stringProp>
                <stringProp name="Header.value">u=6, i</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:128.0) Gecko/20100101 Firefox/128.0</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">image/avif,image/webp,image/png,image/svg+xml,image/*;q=0.8,*/*;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Dest" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                <stringProp name="Header.value">image</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/ads/ga-audiences-148" enabled="true">
          <stringProp name="HTTPSampler.domain">www.google.co.in</stringProp>
          <stringProp name="HTTPSampler.port">443</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.path">/ads/ga-audiences</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments">
              <elementProp name="v" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">v</stringProp>
                <stringProp name="Argument.value">1</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="t" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">t</stringProp>
                <stringProp name="Argument.value">sr</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="slf_rd" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">slf_rd</stringProp>
                <stringProp name="Argument.value">1</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="_r" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">_r</stringProp>
                <stringProp name="Argument.value">4</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="tid" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">tid</stringProp>
                <stringProp name="Argument.value">G-SWJ97E3ZRQ</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="cid" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">cid</stringProp>
                <stringProp name="Argument.value">1264267099.1721486760</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="gtm" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">gtm</stringProp>
                <stringProp name="Argument.value">45je47h0v885797725z871343913za200zb71343913</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="aip" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">aip</stringProp>
                <stringProp name="Argument.value">1</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="dma" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">dma</stringProp>
                <stringProp name="Argument.value">0</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="gcs" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">gcs</stringProp>
                <stringProp name="Argument.value">G111</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="gcd" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">gcd</stringProp>
                <stringProp name="Argument.value">13n3n3n3n5</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="npa" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">npa</stringProp>
                <stringProp name="Argument.value">0</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="frm" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">frm</stringProp>
                <stringProp name="Argument.value">0</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="z" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">z</stringProp>
                <stringProp name="Argument.value">1581326052</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Sec-Fetch-Mode" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                <stringProp name="Header.value">no-cors</stringProp>
              </elementProp>
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">https://www.microfocus.com/</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Site" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                <stringProp name="Header.value">cross-site</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Priority" elementType="Header">
                <stringProp name="Header.name">Priority</stringProp>
                <stringProp name="Header.value">u=5, i</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:128.0) Gecko/20100101 Firefox/128.0</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">image/avif,image/webp,image/png,image/svg+xml,image/*;q=0.8,*/*;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Dest" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                <stringProp name="Header.value">image</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/c.gif-152" enabled="true">
          <stringProp name="TestPlan.comments">Detected the start of a redirect chain</stringProp>
          <stringProp name="HTTPSampler.domain">c.bing.com</stringProp>
          <stringProp name="HTTPSampler.port">443</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.path">/c.gif</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments">
              <elementProp name="ctsa" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">ctsa</stringProp>
                <stringProp name="Argument.value">mr</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CtsSyncId" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">CtsSyncId</stringProp>
                <stringProp name="Argument.value">6EB1D589D196425A9DF48772B10ABD0C</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="RedC" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">RedC</stringProp>
                <stringProp name="Argument.value">c.clarity.ms</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="MXFR" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">MXFR</stringProp>
                <stringProp name="Argument.value">0C2D959506936ED1195981570293607D</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Sec-Fetch-Mode" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                <stringProp name="Header.value">no-cors</stringProp>
              </elementProp>
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">https://www.microfocus.com/</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Site" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                <stringProp name="Header.value">cross-site</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Priority" elementType="Header">
                <stringProp name="Header.name">Priority</stringProp>
                <stringProp name="Header.value">u=6, i</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">image/avif,image/webp,image/png,image/svg+xml,image/*;q=0.8,*/*;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:128.0) Gecko/20100101 Firefox/128.0</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Dest" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                <stringProp name="Header.value">image</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/v3/company/details-147" enabled="true">
          <stringProp name="HTTPSampler.domain">epsilon.6sense.com</stringProp>
          <stringProp name="HTTPSampler.port">443</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.path">/v3/company/details</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Sec-Fetch-Mode" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                <stringProp name="Header.value">cors</stringProp>
              </elementProp>
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">https://www.microfocus.com/</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Site" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                <stringProp name="Header.value">cross-site</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Origin" elementType="Header">
                <stringProp name="Header.name">Origin</stringProp>
                <stringProp name="Header.value">https://www.microfocus.com</stringProp>
              </elementProp>
              <elementProp name="X-6s-CustomID" elementType="Header">
                <stringProp name="Header.name">X-6s-CustomID</stringProp>
                <stringProp name="Header.value">WebTag1.0 5f90029b56db57cd17027efd926646ef</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:128.0) Gecko/20100101 Firefox/128.0</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Dest" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                <stringProp name="Header.value">empty</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/v1/beacon/img.gif-149" enabled="true">
          <stringProp name="HTTPSampler.domain">b.6sc.co</stringProp>
          <stringProp name="HTTPSampler.port">443</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.path">/v1/beacon/img.gif</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments">
              <elementProp name="token" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">token</stringProp>
                <stringProp name="Argument.value">5f90029b56db57cd17027efd926646ef</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="svisitor" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">svisitor</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="visitor" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">visitor</stringProp>
                <stringProp name="Argument.value">e43783fd-0d0b-4b08-8499-84fc86871881</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="session" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">session</stringProp>
                <stringProp name="Argument.value">cfa3825d-7349-4a7a-87a4-13fccbbe3404</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="event" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">event</stringProp>
                <stringProp name="Argument.value">s_update</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="q" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">q</stringProp>
                <stringProp name="Argument.value">{&quot;settings&quot;:&quot;[{\&quot;name\&quot;:\&quot;enableCompanyDetails\&quot;,\&quot;value\&quot;:\&quot;[true,null]\&quot;,\&quot;dateTime\&quot;:\&quot;Sat, 20 Jul 2024 15:24:11 GMT\&quot;,\&quot;timeSincePageLoad\&quot;:\&quot;2623\&quot;}]&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="isIframe" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">isIframe</stringProp>
                <stringProp name="Argument.value">false</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="m" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">m</stringProp>
                <stringProp name="Argument.value">{&quot;description&quot;:&quot;Securely deliver advanced file, print, network, and storage management services across your enterprise.&quot;,&quot;keywords&quot;:&quot;&quot;,&quot;title&quot;:&quot;            Open Enterprise Server | Application Delivery Marketplace | OpenText\n    &quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="cb" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">cb</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="r" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">r</stringProp>
                <stringProp name="Argument.value">https://www.microfocus.com/marketplace/appdelivery</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="thirdParty" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">thirdParty</stringProp>
                <stringProp name="Argument.value">{}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="v2" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">v2</stringProp>
                <stringProp name="Argument.value">1</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="pageURL" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">pageURL</stringProp>
                <stringProp name="Argument.value">https://www.microfocus.com/marketplace/appdelivery/category/oes</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="pageViewId" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">pageViewId</stringProp>
                <stringProp name="Argument.value">6fa0f2f9-bb7e-4bcf-8cba-baaaf4caec92</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="v" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">v</stringProp>
                <stringProp name="Argument.value">1.1.22</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Sec-Fetch-Mode" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                <stringProp name="Header.value">no-cors</stringProp>
              </elementProp>
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">https://www.microfocus.com/</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Site" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                <stringProp name="Header.value">cross-site</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Priority" elementType="Header">
                <stringProp name="Header.name">Priority</stringProp>
                <stringProp name="Header.value">u=6, i</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:128.0) Gecko/20100101 Firefox/128.0</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">image/avif,image/webp,image/png,image/svg+xml,image/*;q=0.8,*/*;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Dest" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                <stringProp name="Header.value">image</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/v1/beacon/img.gif-151" enabled="true">
          <stringProp name="HTTPSampler.domain">b.6sc.co</stringProp>
          <stringProp name="HTTPSampler.port">443</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.path">/v1/beacon/img.gif</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments">
              <elementProp name="token" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">token</stringProp>
                <stringProp name="Argument.value">5f90029b56db57cd17027efd926646ef</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="svisitor" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">svisitor</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="visitor" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">visitor</stringProp>
                <stringProp name="Argument.value">e43783fd-0d0b-4b08-8499-84fc86871881</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="session" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">session</stringProp>
                <stringProp name="Argument.value">cfa3825d-7349-4a7a-87a4-13fccbbe3404</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="event" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">event</stringProp>
                <stringProp name="Argument.value">active_time_track</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="q" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">q</stringProp>
                <stringProp name="Argument.value">{&quot;currentTime&quot;:&quot;Sat, 20 Jul 2024 15:24:11 GMT&quot;,&quot;lastTrackTime&quot;:&quot;Sat, 20 Jul 2024 15:24:10 GMT&quot;,&quot;timeSpent&quot;:&quot;1013&quot;,&quot;totalTimeSpent&quot;:&quot;3039&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="isIframe" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">isIframe</stringProp>
                <stringProp name="Argument.value">false</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="m" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">m</stringProp>
                <stringProp name="Argument.value">{&quot;description&quot;:&quot;Securely deliver advanced file, print, network, and storage management services across your enterprise.&quot;,&quot;keywords&quot;:&quot;&quot;,&quot;title&quot;:&quot;            Open Enterprise Server | Application Delivery Marketplace | OpenText\n    &quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="cb" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">cb</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="r" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">r</stringProp>
                <stringProp name="Argument.value">https://www.microfocus.com/marketplace/appdelivery</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="thirdParty" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">thirdParty</stringProp>
                <stringProp name="Argument.value">{}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="v2" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">v2</stringProp>
                <stringProp name="Argument.value">1</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="pageURL" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">pageURL</stringProp>
                <stringProp name="Argument.value">https://www.microfocus.com/marketplace/appdelivery/category/oes</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="pageViewId" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">pageViewId</stringProp>
                <stringProp name="Argument.value">6fa0f2f9-bb7e-4bcf-8cba-baaaf4caec92</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="v" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">v</stringProp>
                <stringProp name="Argument.value">1.1.22</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Sec-Fetch-Mode" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                <stringProp name="Header.value">no-cors</stringProp>
              </elementProp>
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">https://www.microfocus.com/</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Site" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                <stringProp name="Header.value">cross-site</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Priority" elementType="Header">
                <stringProp name="Header.name">Priority</stringProp>
                <stringProp name="Header.value">u=6, i</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:128.0) Gecko/20100101 Firefox/128.0</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">image/avif,image/webp,image/png,image/svg+xml,image/*;q=0.8,*/*;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Dest" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                <stringProp name="Header.value">image</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/v1/beacon/img.gif-150" enabled="true">
          <stringProp name="HTTPSampler.domain">b.6sc.co</stringProp>
          <stringProp name="HTTPSampler.port">443</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.path">/v1/beacon/img.gif</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments">
              <elementProp name="token" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">token</stringProp>
                <stringProp name="Argument.value">5f90029b56db57cd17027efd926646ef</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="svisitor" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">svisitor</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="visitor" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">visitor</stringProp>
                <stringProp name="Argument.value">e43783fd-0d0b-4b08-8499-84fc86871881</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="session" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">session</stringProp>
                <stringProp name="Argument.value">cfa3825d-7349-4a7a-87a4-13fccbbe3404</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="event" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">event</stringProp>
                <stringProp name="Argument.value">s_update</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="q" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">q</stringProp>
                <stringProp name="Argument.value">{&quot;settings&quot;:&quot;[{\&quot;name\&quot;:\&quot;setEpsilonKey\&quot;,\&quot;value\&quot;:\&quot;bcf06a87ae1f9b0ae09e0fa47a3f4be3c4799786\&quot;,\&quot;dateTime\&quot;:\&quot;Sat, 20 Jul 2024 15:24:11 GMT\&quot;,\&quot;timeSincePageLoad\&quot;:\&quot;2623\&quot;}]&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="isIframe" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">isIframe</stringProp>
                <stringProp name="Argument.value">false</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="m" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">m</stringProp>
                <stringProp name="Argument.value">{&quot;description&quot;:&quot;Securely deliver advanced file, print, network, and storage management services across your enterprise.&quot;,&quot;keywords&quot;:&quot;&quot;,&quot;title&quot;:&quot;            Open Enterprise Server | Application Delivery Marketplace | OpenText\n    &quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="cb" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">cb</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="r" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">r</stringProp>
                <stringProp name="Argument.value">https://www.microfocus.com/marketplace/appdelivery</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="thirdParty" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">thirdParty</stringProp>
                <stringProp name="Argument.value">{}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="v2" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">v2</stringProp>
                <stringProp name="Argument.value">1</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="pageURL" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">pageURL</stringProp>
                <stringProp name="Argument.value">https://www.microfocus.com/marketplace/appdelivery/category/oes</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="pageViewId" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">pageViewId</stringProp>
                <stringProp name="Argument.value">6fa0f2f9-bb7e-4bcf-8cba-baaaf4caec92</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="v" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">v</stringProp>
                <stringProp name="Argument.value">1.1.22</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Sec-Fetch-Mode" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                <stringProp name="Header.value">no-cors</stringProp>
              </elementProp>
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">https://www.microfocus.com/</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Site" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                <stringProp name="Header.value">cross-site</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Priority" elementType="Header">
                <stringProp name="Header.name">Priority</stringProp>
                <stringProp name="Header.value">u=6, i</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:128.0) Gecko/20100101 Firefox/128.0</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">image/avif,image/webp,image/png,image/svg+xml,image/*;q=0.8,*/*;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Dest" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                <stringProp name="Header.value">image</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/c.gif-153" enabled="true">
          <stringProp name="HTTPSampler.domain">c.clarity.ms</stringProp>
          <stringProp name="HTTPSampler.port">443</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.path">/c.gif</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments">
              <elementProp name="ctsa" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">ctsa</stringProp>
                <stringProp name="Argument.value">mr</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CtsSyncId" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">CtsSyncId</stringProp>
                <stringProp name="Argument.value">6EB1D589D196425A9DF48772B10ABD0C</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="MUID" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">MUID</stringProp>
                <stringProp name="Argument.value">2EE30164A5C662E2309815A6A494630A</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Sec-Fetch-Mode" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                <stringProp name="Header.value">no-cors</stringProp>
              </elementProp>
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">https://www.microfocus.com/</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Site" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                <stringProp name="Header.value">cross-site</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Priority" elementType="Header">
                <stringProp name="Header.name">Priority</stringProp>
                <stringProp name="Header.value">u=6, i</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:128.0) Gecko/20100101 Firefox/128.0</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">image/avif,image/webp,image/png,image/svg+xml,image/*;q=0.8,*/*;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Dest" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                <stringProp name="Header.value">image</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/v1/beacon/img.gif-154" enabled="true">
          <stringProp name="HTTPSampler.domain">b.6sc.co</stringProp>
          <stringProp name="HTTPSampler.port">443</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.path">/v1/beacon/img.gif</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments">
              <elementProp name="token" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">token</stringProp>
                <stringProp name="Argument.value">5f90029b56db57cd17027efd926646ef</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="svisitor" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">svisitor</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="visitor" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">visitor</stringProp>
                <stringProp name="Argument.value">e43783fd-0d0b-4b08-8499-84fc86871881</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="session" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">session</stringProp>
                <stringProp name="Argument.value">cfa3825d-7349-4a7a-87a4-13fccbbe3404</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="event" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">event</stringProp>
                <stringProp name="Argument.value">active_time_track</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="q" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">q</stringProp>
                <stringProp name="Argument.value">{&quot;currentTime&quot;:&quot;Sat, 20 Jul 2024 15:24:12 GMT&quot;,&quot;lastTrackTime&quot;:&quot;Sat, 20 Jul 2024 15:24:11 GMT&quot;,&quot;timeSpent&quot;:&quot;1008&quot;,&quot;totalTimeSpent&quot;:&quot;4047&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="isIframe" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">isIframe</stringProp>
                <stringProp name="Argument.value">false</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="m" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">m</stringProp>
                <stringProp name="Argument.value">{&quot;description&quot;:&quot;Securely deliver advanced file, print, network, and storage management services across your enterprise.&quot;,&quot;keywords&quot;:&quot;&quot;,&quot;title&quot;:&quot;            Open Enterprise Server | Application Delivery Marketplace | OpenText\n    &quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="cb" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">cb</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="r" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">r</stringProp>
                <stringProp name="Argument.value">https://www.microfocus.com/marketplace/appdelivery</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="thirdParty" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">thirdParty</stringProp>
                <stringProp name="Argument.value">{}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="v2" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">v2</stringProp>
                <stringProp name="Argument.value">1</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="pageURL" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">pageURL</stringProp>
                <stringProp name="Argument.value">https://www.microfocus.com/marketplace/appdelivery/category/oes</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="pageViewId" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">pageViewId</stringProp>
                <stringProp name="Argument.value">6fa0f2f9-bb7e-4bcf-8cba-baaaf4caec92</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="v" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">v</stringProp>
                <stringProp name="Argument.value">1.1.22</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Sec-Fetch-Mode" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                <stringProp name="Header.value">no-cors</stringProp>
              </elementProp>
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">https://www.microfocus.com/</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Site" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                <stringProp name="Header.value">cross-site</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Priority" elementType="Header">
                <stringProp name="Header.name">Priority</stringProp>
                <stringProp name="Header.value">u=6, i</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:128.0) Gecko/20100101 Firefox/128.0</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">image/avif,image/webp,image/png,image/svg+xml,image/*;q=0.8,*/*;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Dest" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                <stringProp name="Header.value">image</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/marketplace/dist/client/images/icon_sprite_star_rating.png-155" enabled="true">
          <stringProp name="HTTPSampler.domain">www.microfocus.com</stringProp>
          <stringProp name="HTTPSampler.port">443</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.path">/marketplace/dist/client/images/icon_sprite_star_rating.png</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Sec-Fetch-Mode" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                <stringProp name="Header.value">no-cors</stringProp>
              </elementProp>
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">https://www.microfocus.com/marketplace/dist/client.css</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Site" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                <stringProp name="Header.value">same-origin</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Priority" elementType="Header">
                <stringProp name="Header.name">Priority</stringProp>
                <stringProp name="Header.value">u=4, i</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">image/avif,image/webp,image/png,image/svg+xml,image/*;q=0.8,*/*;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:128.0) Gecko/20100101 Firefox/128.0</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Dest" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                <stringProp name="Header.value">image</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/marketplace/images/lazyloader.gif-156" enabled="true">
          <stringProp name="TestPlan.comments">Detected the start of a redirect chain</stringProp>
          <stringProp name="HTTPSampler.domain">www.microfocus.com</stringProp>
          <stringProp name="HTTPSampler.port">443</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.path">/marketplace/images/lazyloader.gif</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Sec-Fetch-Mode" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                <stringProp name="Header.value">no-cors</stringProp>
              </elementProp>
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">https://www.microfocus.com/marketplace/appdelivery/category/oes</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Site" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                <stringProp name="Header.value">same-origin</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Priority" elementType="Header">
                <stringProp name="Header.name">Priority</stringProp>
                <stringProp name="Header.value">u=4, i</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">image/avif,image/webp,image/png,image/svg+xml,image/*;q=0.8,*/*;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:128.0) Gecko/20100101 Firefox/128.0</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Dest" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                <stringProp name="Header.value">image</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/v1/beacon/img.gif-159" enabled="true">
          <stringProp name="HTTPSampler.domain">b.6sc.co</stringProp>
          <stringProp name="HTTPSampler.port">443</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.path">/v1/beacon/img.gif</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments">
              <elementProp name="token" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">token</stringProp>
                <stringProp name="Argument.value">5f90029b56db57cd17027efd926646ef</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="svisitor" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">svisitor</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="visitor" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">visitor</stringProp>
                <stringProp name="Argument.value">e43783fd-0d0b-4b08-8499-84fc86871881</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="session" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">session</stringProp>
                <stringProp name="Argument.value">cfa3825d-7349-4a7a-87a4-13fccbbe3404</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="event" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">event</stringProp>
                <stringProp name="Argument.value">active_time_track</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="q" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">q</stringProp>
                <stringProp name="Argument.value">{&quot;currentTime&quot;:&quot;Sat, 20 Jul 2024 15:24:14 GMT&quot;,&quot;lastTrackTime&quot;:&quot;Sat, 20 Jul 2024 15:24:12 GMT&quot;,&quot;timeSpent&quot;:&quot;1261&quot;,&quot;totalTimeSpent&quot;:&quot;5308&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="isIframe" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">isIframe</stringProp>
                <stringProp name="Argument.value">false</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="m" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">m</stringProp>
                <stringProp name="Argument.value">{&quot;description&quot;:&quot;Securely deliver advanced file, print, network, and storage management services across your enterprise.&quot;,&quot;keywords&quot;:&quot;&quot;,&quot;title&quot;:&quot;            Open Enterprise Server | Application Delivery Marketplace | OpenText\n    &quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="cb" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">cb</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="r" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">r</stringProp>
                <stringProp name="Argument.value">https://www.microfocus.com/marketplace/appdelivery</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="thirdParty" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">thirdParty</stringProp>
                <stringProp name="Argument.value">{}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="v2" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">v2</stringProp>
                <stringProp name="Argument.value">1</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="pageURL" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">pageURL</stringProp>
                <stringProp name="Argument.value">https://www.microfocus.com/marketplace/appdelivery/category/oes</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="pageViewId" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">pageViewId</stringProp>
                <stringProp name="Argument.value">6fa0f2f9-bb7e-4bcf-8cba-baaaf4caec92</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="v" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">v</stringProp>
                <stringProp name="Argument.value">1.1.22</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Sec-Fetch-Mode" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                <stringProp name="Header.value">no-cors</stringProp>
              </elementProp>
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">https://www.microfocus.com/</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Site" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                <stringProp name="Header.value">cross-site</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Priority" elementType="Header">
                <stringProp name="Header.name">Priority</stringProp>
                <stringProp name="Header.value">u=6, i</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:128.0) Gecko/20100101 Firefox/128.0</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">image/avif,image/webp,image/png,image/svg+xml,image/*;q=0.8,*/*;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Dest" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                <stringProp name="Header.value">image</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/marketplace_5/5b5902bd58e665a4cdc822e8aa7f9454368c3cf1/logos/4286b7467b04df8aca08c2ffcee2bad98bf4faa2.png-157" enabled="true">
          <stringProp name="HTTPSampler.domain">d3075pyijv0bbs.cloudfront.net</stringProp>
          <stringProp name="HTTPSampler.port">443</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.path">/marketplace_5/5b5902bd58e665a4cdc822e8aa7f9454368c3cf1/logos/4286b7467b04df8aca08c2ffcee2bad98bf4faa2.png</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Sec-Fetch-Mode" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                <stringProp name="Header.value">no-cors</stringProp>
              </elementProp>
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">https://www.microfocus.com/</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Site" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                <stringProp name="Header.value">cross-site</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Priority" elementType="Header">
                <stringProp name="Header.name">Priority</stringProp>
                <stringProp name="Header.value">u=4, i</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:128.0) Gecko/20100101 Firefox/128.0</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">image/avif,image/webp,image/png,image/svg+xml,image/*;q=0.8,*/*;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Dest" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                <stringProp name="Header.value">image</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/marketplace2-public/marketplace_5/3a858762e5aee2156e7a0c9088e621c1042dbe08/logos/eb981a62b6cef87a8fdab52ca6eb605f1d848e36.png-160" enabled="true">
          <stringProp name="HTTPSampler.domain">s3.amazonaws.com</stringProp>
          <stringProp name="HTTPSampler.port">443</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.path">/marketplace2-public/marketplace_5/3a858762e5aee2156e7a0c9088e621c1042dbe08/logos/eb981a62b6cef87a8fdab52ca6eb605f1d848e36.png</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Sec-Fetch-Mode" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                <stringProp name="Header.value">no-cors</stringProp>
              </elementProp>
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">https://www.microfocus.com/</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Site" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                <stringProp name="Header.value">cross-site</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Priority" elementType="Header">
                <stringProp name="Header.name">Priority</stringProp>
                <stringProp name="Header.value">u=4, i</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:128.0) Gecko/20100101 Firefox/128.0</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">image/avif,image/webp,image/png,image/svg+xml,image/*;q=0.8,*/*;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Dest" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                <stringProp name="Header.value">image</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/v1/beacon/img.gif-161" enabled="true">
          <stringProp name="HTTPSampler.domain">b.6sc.co</stringProp>
          <stringProp name="HTTPSampler.port">443</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.path">/v1/beacon/img.gif</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments">
              <elementProp name="token" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">token</stringProp>
                <stringProp name="Argument.value">5f90029b56db57cd17027efd926646ef</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="svisitor" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">svisitor</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="visitor" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">visitor</stringProp>
                <stringProp name="Argument.value">e43783fd-0d0b-4b08-8499-84fc86871881</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="session" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">session</stringProp>
                <stringProp name="Argument.value">cfa3825d-7349-4a7a-87a4-13fccbbe3404</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="event" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">event</stringProp>
                <stringProp name="Argument.value">active_time_track</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="q" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">q</stringProp>
                <stringProp name="Argument.value">{&quot;currentTime&quot;:&quot;Sat, 20 Jul 2024 15:24:15 GMT&quot;,&quot;lastTrackTime&quot;:&quot;Sat, 20 Jul 2024 15:24:14 GMT&quot;,&quot;timeSpent&quot;:&quot;1008&quot;,&quot;totalTimeSpent&quot;:&quot;6316&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="isIframe" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">isIframe</stringProp>
                <stringProp name="Argument.value">false</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="m" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">m</stringProp>
                <stringProp name="Argument.value">{&quot;description&quot;:&quot;Securely deliver advanced file, print, network, and storage management services across your enterprise.&quot;,&quot;keywords&quot;:&quot;&quot;,&quot;title&quot;:&quot;            Open Enterprise Server | Application Delivery Marketplace | OpenText\n    &quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="cb" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">cb</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="r" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">r</stringProp>
                <stringProp name="Argument.value">https://www.microfocus.com/marketplace/appdelivery</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="thirdParty" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">thirdParty</stringProp>
                <stringProp name="Argument.value">{}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="v2" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">v2</stringProp>
                <stringProp name="Argument.value">1</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="pageURL" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">pageURL</stringProp>
                <stringProp name="Argument.value">https://www.microfocus.com/marketplace/appdelivery/category/oes</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="pageViewId" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">pageViewId</stringProp>
                <stringProp name="Argument.value">6fa0f2f9-bb7e-4bcf-8cba-baaaf4caec92</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="v" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">v</stringProp>
                <stringProp name="Argument.value">1.1.22</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Sec-Fetch-Mode" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                <stringProp name="Header.value">no-cors</stringProp>
              </elementProp>
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">https://www.microfocus.com/</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Site" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                <stringProp name="Header.value">cross-site</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Priority" elementType="Header">
                <stringProp name="Header.name">Priority</stringProp>
                <stringProp name="Header.value">u=6, i</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:128.0) Gecko/20100101 Firefox/128.0</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">image/avif,image/webp,image/png,image/svg+xml,image/*;q=0.8,*/*;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Dest" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                <stringProp name="Header.value">image</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/canonical.html-162" enabled="true">
          <stringProp name="HTTPSampler.domain">detectportal.firefox.com</stringProp>
          <stringProp name="HTTPSampler.port">0</stringProp>
          <stringProp name="HTTPSampler.protocol">http</stringProp>
          <stringProp name="HTTPSampler.path">/canonical.html</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Cache-Control" elementType="Header">
                <stringProp name="Header.name">Cache-Control</stringProp>
                <stringProp name="Header.value">no-cache</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate</stringProp>
              </elementProp>
              <elementProp name="Pragma" elementType="Header">
                <stringProp name="Header.name">Pragma</stringProp>
                <stringProp name="Header.value">no-cache</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:128.0) Gecko/20100101 Firefox/128.0</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/success.txt-164" enabled="true">
          <stringProp name="HTTPSampler.domain">detectportal.firefox.com</stringProp>
          <stringProp name="HTTPSampler.port">0</stringProp>
          <stringProp name="HTTPSampler.protocol">http</stringProp>
          <stringProp name="HTTPSampler.path">/success.txt</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments">
              <elementProp name="ipv4" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">ipv4</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata"></stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Priority" elementType="Header">
                <stringProp name="Header.name">Priority</stringProp>
                <stringProp name="Header.value">u=4</stringProp>
              </elementProp>
              <elementProp name="Cache-Control" elementType="Header">
                <stringProp name="Header.name">Cache-Control</stringProp>
                <stringProp name="Header.value">no-cache</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate</stringProp>
              </elementProp>
              <elementProp name="Pragma" elementType="Header">
                <stringProp name="Header.name">Pragma</stringProp>
                <stringProp name="Header.value">no-cache</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:128.0) Gecko/20100101 Firefox/128.0</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/success.txt-165" enabled="true">
          <stringProp name="HTTPSampler.domain">detectportal.firefox.com</stringProp>
          <stringProp name="HTTPSampler.port">0</stringProp>
          <stringProp name="HTTPSampler.protocol">http</stringProp>
          <stringProp name="HTTPSampler.path">/success.txt</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments">
              <elementProp name="ipv6" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">ipv6</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata"></stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Priority" elementType="Header">
                <stringProp name="Header.name">Priority</stringProp>
                <stringProp name="Header.value">u=4</stringProp>
              </elementProp>
              <elementProp name="Cache-Control" elementType="Header">
                <stringProp name="Header.name">Cache-Control</stringProp>
                <stringProp name="Header.value">no-cache</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate</stringProp>
              </elementProp>
              <elementProp name="Pragma" elementType="Header">
                <stringProp name="Header.name">Pragma</stringProp>
                <stringProp name="Header.value">no-cache</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:128.0) Gecko/20100101 Firefox/128.0</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/v1/beacon/img.gif-163" enabled="true">
          <stringProp name="HTTPSampler.domain">b.6sc.co</stringProp>
          <stringProp name="HTTPSampler.port">443</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.path">/v1/beacon/img.gif</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments">
              <elementProp name="token" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">token</stringProp>
                <stringProp name="Argument.value">5f90029b56db57cd17027efd926646ef</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="svisitor" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">svisitor</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="visitor" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">visitor</stringProp>
                <stringProp name="Argument.value">e43783fd-0d0b-4b08-8499-84fc86871881</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="session" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">session</stringProp>
                <stringProp name="Argument.value">cfa3825d-7349-4a7a-87a4-13fccbbe3404</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="event" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">event</stringProp>
                <stringProp name="Argument.value">active_time_track</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="q" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">q</stringProp>
                <stringProp name="Argument.value">{&quot;currentTime&quot;:&quot;Sat, 20 Jul 2024 15:24:16 GMT&quot;,&quot;lastTrackTime&quot;:&quot;Sat, 20 Jul 2024 15:24:15 GMT&quot;,&quot;timeSpent&quot;:&quot;1015&quot;,&quot;totalTimeSpent&quot;:&quot;7331&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="isIframe" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">isIframe</stringProp>
                <stringProp name="Argument.value">false</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="m" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">m</stringProp>
                <stringProp name="Argument.value">{&quot;description&quot;:&quot;Securely deliver advanced file, print, network, and storage management services across your enterprise.&quot;,&quot;keywords&quot;:&quot;&quot;,&quot;title&quot;:&quot;            Open Enterprise Server | Application Delivery Marketplace | OpenText\n    &quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="cb" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">cb</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="r" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">r</stringProp>
                <stringProp name="Argument.value">https://www.microfocus.com/marketplace/appdelivery</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="thirdParty" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">thirdParty</stringProp>
                <stringProp name="Argument.value">{}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="v2" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">v2</stringProp>
                <stringProp name="Argument.value">1</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="pageURL" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">pageURL</stringProp>
                <stringProp name="Argument.value">https://www.microfocus.com/marketplace/appdelivery/category/oes</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="pageViewId" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">pageViewId</stringProp>
                <stringProp name="Argument.value">6fa0f2f9-bb7e-4bcf-8cba-baaaf4caec92</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="v" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">v</stringProp>
                <stringProp name="Argument.value">1.1.22</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Sec-Fetch-Mode" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                <stringProp name="Header.value">no-cors</stringProp>
              </elementProp>
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">https://www.microfocus.com/</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Site" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                <stringProp name="Header.value">cross-site</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Priority" elementType="Header">
                <stringProp name="Header.name">Priority</stringProp>
                <stringProp name="Header.value">u=6, i</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:128.0) Gecko/20100101 Firefox/128.0</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">image/avif,image/webp,image/png,image/svg+xml,image/*;q=0.8,*/*;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Dest" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                <stringProp name="Header.value">image</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/marketplace/notfound-158" enabled="true">
          <stringProp name="HTTPSampler.domain">www.microfocus.com</stringProp>
          <stringProp name="HTTPSampler.port">443</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.path">/marketplace/notfound</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Sec-Fetch-Mode" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                <stringProp name="Header.value">no-cors</stringProp>
              </elementProp>
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">https://www.microfocus.com/marketplace/appdelivery/category/oes</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Site" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                <stringProp name="Header.value">same-origin</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Priority" elementType="Header">
                <stringProp name="Header.name">Priority</stringProp>
                <stringProp name="Header.value">u=4, i</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">image/avif,image/webp,image/png,image/svg+xml,image/*;q=0.8,*/*;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:128.0) Gecko/20100101 Firefox/128.0</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Dest" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                <stringProp name="Header.value">image</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/v1/beacon/img.gif-166" enabled="true">
          <stringProp name="HTTPSampler.domain">b.6sc.co</stringProp>
          <stringProp name="HTTPSampler.port">443</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.path">/v1/beacon/img.gif</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments">
              <elementProp name="token" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">token</stringProp>
                <stringProp name="Argument.value">5f90029b56db57cd17027efd926646ef</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="svisitor" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">svisitor</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="visitor" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">visitor</stringProp>
                <stringProp name="Argument.value">e43783fd-0d0b-4b08-8499-84fc86871881</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="session" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">session</stringProp>
                <stringProp name="Argument.value">cfa3825d-7349-4a7a-87a4-13fccbbe3404</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="event" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">event</stringProp>
                <stringProp name="Argument.value">active_time_track</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="q" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">q</stringProp>
                <stringProp name="Argument.value">{&quot;currentTime&quot;:&quot;Sat, 20 Jul 2024 15:24:17 GMT&quot;,&quot;lastTrackTime&quot;:&quot;Sat, 20 Jul 2024 15:24:16 GMT&quot;,&quot;timeSpent&quot;:&quot;1013&quot;,&quot;totalTimeSpent&quot;:&quot;8344&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="isIframe" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">isIframe</stringProp>
                <stringProp name="Argument.value">false</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="m" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">m</stringProp>
                <stringProp name="Argument.value">{&quot;description&quot;:&quot;Securely deliver advanced file, print, network, and storage management services across your enterprise.&quot;,&quot;keywords&quot;:&quot;&quot;,&quot;title&quot;:&quot;            Open Enterprise Server | Application Delivery Marketplace | OpenText\n    &quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="cb" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">cb</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="r" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">r</stringProp>
                <stringProp name="Argument.value">https://www.microfocus.com/marketplace/appdelivery</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="thirdParty" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">thirdParty</stringProp>
                <stringProp name="Argument.value">{}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="v2" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">v2</stringProp>
                <stringProp name="Argument.value">1</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="pageURL" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">pageURL</stringProp>
                <stringProp name="Argument.value">https://www.microfocus.com/marketplace/appdelivery/category/oes</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="pageViewId" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">pageViewId</stringProp>
                <stringProp name="Argument.value">6fa0f2f9-bb7e-4bcf-8cba-baaaf4caec92</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="v" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">v</stringProp>
                <stringProp name="Argument.value">1.1.22</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Sec-Fetch-Mode" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                <stringProp name="Header.value">no-cors</stringProp>
              </elementProp>
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">https://www.microfocus.com/</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Site" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                <stringProp name="Header.value">cross-site</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Priority" elementType="Header">
                <stringProp name="Header.name">Priority</stringProp>
                <stringProp name="Header.value">u=6, i</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:128.0) Gecko/20100101 Firefox/128.0</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">image/avif,image/webp,image/png,image/svg+xml,image/*;q=0.8,*/*;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Dest" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                <stringProp name="Header.value">image</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/v1/beacon/img.gif-167" enabled="true">
          <stringProp name="HTTPSampler.domain">b.6sc.co</stringProp>
          <stringProp name="HTTPSampler.port">443</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.path">/v1/beacon/img.gif</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments">
              <elementProp name="token" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">token</stringProp>
                <stringProp name="Argument.value">5f90029b56db57cd17027efd926646ef</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="svisitor" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">svisitor</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="visitor" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">visitor</stringProp>
                <stringProp name="Argument.value">e43783fd-0d0b-4b08-8499-84fc86871881</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="session" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">session</stringProp>
                <stringProp name="Argument.value">cfa3825d-7349-4a7a-87a4-13fccbbe3404</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="event" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">event</stringProp>
                <stringProp name="Argument.value">click</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="q" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">q</stringProp>
                <stringProp name="Argument.value">{&quot;event_value&quot;:&quot;&quot;,&quot;event_id&quot;:&quot;member-welcome&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="isIframe" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">isIframe</stringProp>
                <stringProp name="Argument.value">false</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="m" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">m</stringProp>
                <stringProp name="Argument.value">{&quot;description&quot;:&quot;Securely deliver advanced file, print, network, and storage management services across your enterprise.&quot;,&quot;keywords&quot;:&quot;&quot;,&quot;title&quot;:&quot;            Open Enterprise Server | Application Delivery Marketplace | OpenText\n    &quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="cb" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">cb</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="r" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">r</stringProp>
                <stringProp name="Argument.value">https://www.microfocus.com/marketplace/appdelivery</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="thirdParty" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">thirdParty</stringProp>
                <stringProp name="Argument.value">{}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="v2" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">v2</stringProp>
                <stringProp name="Argument.value">1</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="pageURL" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">pageURL</stringProp>
                <stringProp name="Argument.value">https://www.microfocus.com/marketplace/appdelivery/category/oes</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="pageViewId" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">pageViewId</stringProp>
                <stringProp name="Argument.value">6fa0f2f9-bb7e-4bcf-8cba-baaaf4caec92</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="v" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">v</stringProp>
                <stringProp name="Argument.value">1.1.22</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Sec-Fetch-Mode" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                <stringProp name="Header.value">no-cors</stringProp>
              </elementProp>
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">https://www.microfocus.com/</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Site" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                <stringProp name="Header.value">cross-site</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Priority" elementType="Header">
                <stringProp name="Header.name">Priority</stringProp>
                <stringProp name="Header.value">u=0, i</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:128.0) Gecko/20100101 Firefox/128.0</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">image/avif,image/webp,image/png,image/svg+xml,image/*;q=0.8,*/*;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Dest" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                <stringProp name="Header.value">image</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/v1/beacon/img.gif-168" enabled="true">
          <stringProp name="HTTPSampler.domain">b.6sc.co</stringProp>
          <stringProp name="HTTPSampler.port">443</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.path">/v1/beacon/img.gif</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments">
              <elementProp name="token" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">token</stringProp>
                <stringProp name="Argument.value">5f90029b56db57cd17027efd926646ef</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="svisitor" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">svisitor</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="visitor" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">visitor</stringProp>
                <stringProp name="Argument.value">e43783fd-0d0b-4b08-8499-84fc86871881</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="session" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">session</stringProp>
                <stringProp name="Argument.value">cfa3825d-7349-4a7a-87a4-13fccbbe3404</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="event" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">event</stringProp>
                <stringProp name="Argument.value">active_time_track</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="q" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">q</stringProp>
                <stringProp name="Argument.value">{&quot;currentTime&quot;:&quot;Sat, 20 Jul 2024 15:24:18 GMT&quot;,&quot;lastTrackTime&quot;:&quot;Sat, 20 Jul 2024 15:24:17 GMT&quot;,&quot;timeSpent&quot;:&quot;1006&quot;,&quot;totalTimeSpent&quot;:&quot;9350&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="isIframe" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">isIframe</stringProp>
                <stringProp name="Argument.value">false</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="m" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">m</stringProp>
                <stringProp name="Argument.value">{&quot;description&quot;:&quot;Securely deliver advanced file, print, network, and storage management services across your enterprise.&quot;,&quot;keywords&quot;:&quot;&quot;,&quot;title&quot;:&quot;            Open Enterprise Server | Application Delivery Marketplace | OpenText\n    &quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="cb" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">cb</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="r" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">r</stringProp>
                <stringProp name="Argument.value">https://www.microfocus.com/marketplace/appdelivery</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="thirdParty" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">thirdParty</stringProp>
                <stringProp name="Argument.value">{}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="v2" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">v2</stringProp>
                <stringProp name="Argument.value">1</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="pageURL" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">pageURL</stringProp>
                <stringProp name="Argument.value">https://www.microfocus.com/marketplace/appdelivery/category/oes</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="pageViewId" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">pageViewId</stringProp>
                <stringProp name="Argument.value">6fa0f2f9-bb7e-4bcf-8cba-baaaf4caec92</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="v" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">v</stringProp>
                <stringProp name="Argument.value">1.1.22</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Sec-Fetch-Mode" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                <stringProp name="Header.value">no-cors</stringProp>
              </elementProp>
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">https://www.microfocus.com/</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Site" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                <stringProp name="Header.value">cross-site</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Priority" elementType="Header">
                <stringProp name="Header.name">Priority</stringProp>
                <stringProp name="Header.value">u=6, i</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:128.0) Gecko/20100101 Firefox/128.0</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">image/avif,image/webp,image/png,image/svg+xml,image/*;q=0.8,*/*;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Dest" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                <stringProp name="Header.value">image</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/v1/beacon/img.gif-169" enabled="true">
          <stringProp name="HTTPSampler.domain">b.6sc.co</stringProp>
          <stringProp name="HTTPSampler.port">443</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.path">/v1/beacon/img.gif</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments">
              <elementProp name="token" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">token</stringProp>
                <stringProp name="Argument.value">5f90029b56db57cd17027efd926646ef</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="svisitor" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">svisitor</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="visitor" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">visitor</stringProp>
                <stringProp name="Argument.value">e43783fd-0d0b-4b08-8499-84fc86871881</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="session" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">session</stringProp>
                <stringProp name="Argument.value">cfa3825d-7349-4a7a-87a4-13fccbbe3404</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="event" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">event</stringProp>
                <stringProp name="Argument.value">active_time_track</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="q" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">q</stringProp>
                <stringProp name="Argument.value">{&quot;currentTime&quot;:&quot;Sat, 20 Jul 2024 15:24:19 GMT&quot;,&quot;lastTrackTime&quot;:&quot;Sat, 20 Jul 2024 15:24:18 GMT&quot;,&quot;timeSpent&quot;:&quot;1016&quot;,&quot;totalTimeSpent&quot;:&quot;10366&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="isIframe" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">isIframe</stringProp>
                <stringProp name="Argument.value">false</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="m" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">m</stringProp>
                <stringProp name="Argument.value">{&quot;description&quot;:&quot;Securely deliver advanced file, print, network, and storage management services across your enterprise.&quot;,&quot;keywords&quot;:&quot;&quot;,&quot;title&quot;:&quot;            Open Enterprise Server | Application Delivery Marketplace | OpenText\n    &quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="cb" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">cb</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="r" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">r</stringProp>
                <stringProp name="Argument.value">https://www.microfocus.com/marketplace/appdelivery</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="thirdParty" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">thirdParty</stringProp>
                <stringProp name="Argument.value">{}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="v2" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">v2</stringProp>
                <stringProp name="Argument.value">1</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="pageURL" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">pageURL</stringProp>
                <stringProp name="Argument.value">https://www.microfocus.com/marketplace/appdelivery/category/oes</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="pageViewId" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">pageViewId</stringProp>
                <stringProp name="Argument.value">6fa0f2f9-bb7e-4bcf-8cba-baaaf4caec92</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="v" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">v</stringProp>
                <stringProp name="Argument.value">1.1.22</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Sec-Fetch-Mode" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                <stringProp name="Header.value">no-cors</stringProp>
              </elementProp>
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">https://www.microfocus.com/</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Site" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                <stringProp name="Header.value">cross-site</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Priority" elementType="Header">
                <stringProp name="Header.name">Priority</stringProp>
                <stringProp name="Header.value">u=6, i</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:128.0) Gecko/20100101 Firefox/128.0</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">image/avif,image/webp,image/png,image/svg+xml,image/*;q=0.8,*/*;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Dest" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                <stringProp name="Header.value">image</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/collect-172" enabled="true">
          <stringProp name="HTTPSampler.domain">www.google-analytics.com</stringProp>
          <stringProp name="HTTPSampler.port">443</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.path">/collect</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments">
              <elementProp name="v" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">v</stringProp>
                <stringProp name="Argument.value">1</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="_v" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">_v</stringProp>
                <stringProp name="Argument.value">j101</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="a" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">a</stringProp>
                <stringProp name="Argument.value">2060336775</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="t" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">t</stringProp>
                <stringProp name="Argument.value">event</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="ni" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">ni</stringProp>
                <stringProp name="Argument.value">0</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="_s" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">_s</stringProp>
                <stringProp name="Argument.value">1</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="dl" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">dl</stringProp>
                <stringProp name="Argument.value">https://www.microfocus.com/marketplace/appdelivery/category/oes</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="ul" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">ul</stringProp>
                <stringProp name="Argument.value">en-us</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="de" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">de</stringProp>
                <stringProp name="Argument.value">UTF-8</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="dt" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">dt</stringProp>
                <stringProp name="Argument.value">Open Enterprise Server | Application Delivery Marketplace | OpenText</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="sd" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">sd</stringProp>
                <stringProp name="Argument.value">24-bit</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="sr" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">sr</stringProp>
                <stringProp name="Argument.value">1536x864</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="vp" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">vp</stringProp>
                <stringProp name="Argument.value">1536x731</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="je" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">je</stringProp>
                <stringProp name="Argument.value">0</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="ec" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">ec</stringProp>
                <stringProp name="Argument.value">Header</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="ea" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">ea</stringProp>
                <stringProp name="Argument.value">https://www.microfocus.com/marketplace/appdelivery/category/oes</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="el" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">el</stringProp>
                <stringProp name="Argument.value">Sign out</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="_u" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">_u</stringProp>
                <stringProp name="Argument.value">SCCACEABBAAAACgAIAC~</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="jid" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">jid</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="gjid" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">gjid</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="cid" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">cid</stringProp>
                <stringProp name="Argument.value">1264267099.1721486760</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="tid" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">tid</stringProp>
                <stringProp name="Argument.value">UA-44010430-10</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="_gid" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">_gid</stringProp>
                <stringProp name="Argument.value">675600319.1721486761</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="gtm" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">gtm</stringProp>
                <stringProp name="Argument.value">45He47h0n71MXKD45v71343913za200</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="gcs" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">gcs</stringProp>
                <stringProp name="Argument.value">G111</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="gcd" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">gcd</stringProp>
                <stringProp name="Argument.value">13n3n3n3n5</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="dma" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">dma</stringProp>
                <stringProp name="Argument.value">0</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="tag_exp" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">tag_exp</stringProp>
                <stringProp name="Argument.value">0</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="z" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">z</stringProp>
                <stringProp name="Argument.value">349119396</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Sec-Fetch-Mode" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                <stringProp name="Header.value">no-cors</stringProp>
              </elementProp>
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">https://www.microfocus.com/</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Site" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                <stringProp name="Header.value">cross-site</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Priority" elementType="Header">
                <stringProp name="Header.name">Priority</stringProp>
                <stringProp name="Header.value">u=0, i</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:128.0) Gecko/20100101 Firefox/128.0</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">image/avif,image/webp,image/png,image/svg+xml,image/*;q=0.8,*/*;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Dest" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                <stringProp name="Header.value">image</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/v1/beacon/img.gif-171" enabled="true">
          <stringProp name="HTTPSampler.domain">b.6sc.co</stringProp>
          <stringProp name="HTTPSampler.port">443</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.path">/v1/beacon/img.gif</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments">
              <elementProp name="token" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">token</stringProp>
                <stringProp name="Argument.value">5f90029b56db57cd17027efd926646ef</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="svisitor" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">svisitor</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="visitor" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">visitor</stringProp>
                <stringProp name="Argument.value">e43783fd-0d0b-4b08-8499-84fc86871881</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="session" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">session</stringProp>
                <stringProp name="Argument.value">cfa3825d-7349-4a7a-87a4-13fccbbe3404</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="event" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">event</stringProp>
                <stringProp name="Argument.value">click</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="q" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">q</stringProp>
                <stringProp name="Argument.value">{&quot;event_value&quot;:&quot;&quot;,&quot;event_id&quot;:&quot;header-signout&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="isIframe" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">isIframe</stringProp>
                <stringProp name="Argument.value">false</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="m" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">m</stringProp>
                <stringProp name="Argument.value">{&quot;description&quot;:&quot;Securely deliver advanced file, print, network, and storage management services across your enterprise.&quot;,&quot;keywords&quot;:&quot;&quot;,&quot;title&quot;:&quot;            Open Enterprise Server | Application Delivery Marketplace | OpenText\n    &quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="cb" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">cb</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="r" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">r</stringProp>
                <stringProp name="Argument.value">https://www.microfocus.com/marketplace/appdelivery</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="thirdParty" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">thirdParty</stringProp>
                <stringProp name="Argument.value">{}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="v2" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">v2</stringProp>
                <stringProp name="Argument.value">1</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="pageURL" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">pageURL</stringProp>
                <stringProp name="Argument.value">https://www.microfocus.com/marketplace/appdelivery/category/oes</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="pageViewId" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">pageViewId</stringProp>
                <stringProp name="Argument.value">6fa0f2f9-bb7e-4bcf-8cba-baaaf4caec92</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="v" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">v</stringProp>
                <stringProp name="Argument.value">1.1.22</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Sec-Fetch-Mode" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                <stringProp name="Header.value">no-cors</stringProp>
              </elementProp>
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">https://www.microfocus.com/</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Site" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                <stringProp name="Header.value">cross-site</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Priority" elementType="Header">
                <stringProp name="Header.name">Priority</stringProp>
                <stringProp name="Header.value">u=0, i</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:128.0) Gecko/20100101 Firefox/128.0</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">image/avif,image/webp,image/png,image/svg+xml,image/*;q=0.8,*/*;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Dest" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                <stringProp name="Header.value">image</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/nidp/app/logout-170" enabled="true">
          <stringProp name="HTTPSampler.domain">login.microfocus.com</stringProp>
          <stringProp name="HTTPSampler.port">443</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.path">/nidp/app/logout</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Sec-Fetch-Mode" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                <stringProp name="Header.value">no-cors</stringProp>
              </elementProp>
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">https://www.microfocus.com/</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Site" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                <stringProp name="Header.value">same-site</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Priority" elementType="Header">
                <stringProp name="Header.name">Priority</stringProp>
                <stringProp name="Header.value">u=0</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:128.0) Gecko/20100101 Firefox/128.0</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Dest" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                <stringProp name="Header.value">empty</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/marketplace/logmeout-173" enabled="true">
          <stringProp name="HTTPSampler.domain">www.microfocus.com</stringProp>
          <stringProp name="HTTPSampler.port">443</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.path">/marketplace/logmeout</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Sec-Fetch-Mode" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                <stringProp name="Header.value">no-cors</stringProp>
              </elementProp>
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">https://www.microfocus.com/marketplace/appdelivery/category/oes</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Site" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                <stringProp name="Header.value">same-origin</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Priority" elementType="Header">
                <stringProp name="Header.name">Priority</stringProp>
                <stringProp name="Header.value">u=4</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:128.0) Gecko/20100101 Firefox/128.0</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Dest" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                <stringProp name="Header.value">empty</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/v1/beacon/img.gif-174" enabled="true">
          <stringProp name="HTTPSampler.domain">b.6sc.co</stringProp>
          <stringProp name="HTTPSampler.port">443</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.path">/v1/beacon/img.gif</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments">
              <elementProp name="token" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">token</stringProp>
                <stringProp name="Argument.value">5f90029b56db57cd17027efd926646ef</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="svisitor" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">svisitor</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="visitor" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">visitor</stringProp>
                <stringProp name="Argument.value">e43783fd-0d0b-4b08-8499-84fc86871881</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="session" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">session</stringProp>
                <stringProp name="Argument.value">cfa3825d-7349-4a7a-87a4-13fccbbe3404</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="event" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">event</stringProp>
                <stringProp name="Argument.value">active_time_track</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="q" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">q</stringProp>
                <stringProp name="Argument.value">{&quot;currentTime&quot;:&quot;Sat, 20 Jul 2024 15:24:22 GMT&quot;,&quot;lastTrackTime&quot;:&quot;Sat, 20 Jul 2024 15:24:19 GMT&quot;,&quot;timeSpent&quot;:&quot;3010&quot;,&quot;totalTimeSpent&quot;:&quot;13376&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="isIframe" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">isIframe</stringProp>
                <stringProp name="Argument.value">false</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="m" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">m</stringProp>
                <stringProp name="Argument.value">{&quot;description&quot;:&quot;Securely deliver advanced file, print, network, and storage management services across your enterprise.&quot;,&quot;keywords&quot;:&quot;&quot;,&quot;title&quot;:&quot;            Open Enterprise Server | Application Delivery Marketplace | OpenText\n    &quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="cb" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">cb</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="r" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">r</stringProp>
                <stringProp name="Argument.value">https://www.microfocus.com/marketplace/appdelivery</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="thirdParty" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">thirdParty</stringProp>
                <stringProp name="Argument.value">{}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="v2" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">v2</stringProp>
                <stringProp name="Argument.value">1</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="pageURL" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">pageURL</stringProp>
                <stringProp name="Argument.value">https://www.microfocus.com/marketplace/appdelivery/category/oes</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="pageViewId" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">pageViewId</stringProp>
                <stringProp name="Argument.value">6fa0f2f9-bb7e-4bcf-8cba-baaaf4caec92</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="v" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">v</stringProp>
                <stringProp name="Argument.value">1.1.22</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Sec-Fetch-Mode" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                <stringProp name="Header.value">no-cors</stringProp>
              </elementProp>
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">https://www.microfocus.com/</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Site" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                <stringProp name="Header.value">cross-site</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Priority" elementType="Header">
                <stringProp name="Header.name">Priority</stringProp>
                <stringProp name="Header.value">u=6, i</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:128.0) Gecko/20100101 Firefox/128.0</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">image/avif,image/webp,image/png,image/svg+xml,image/*;q=0.8,*/*;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Dest" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                <stringProp name="Header.value">image</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/api/web/logout-175" enabled="true">
          <stringProp name="HTTPSampler.domain">my.microfocus.com</stringProp>
          <stringProp name="HTTPSampler.port">443</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.path">/api/web/logout</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Sec-Fetch-Mode" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                <stringProp name="Header.value">no-cors</stringProp>
              </elementProp>
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">https://www.microfocus.com/</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Site" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                <stringProp name="Header.value">same-site</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Priority" elementType="Header">
                <stringProp name="Header.name">Priority</stringProp>
                <stringProp name="Header.value">u=4</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:128.0) Gecko/20100101 Firefox/128.0</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Dest" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                <stringProp name="Header.value">empty</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/canonical.html-177" enabled="true">
          <stringProp name="HTTPSampler.domain">detectportal.firefox.com</stringProp>
          <stringProp name="HTTPSampler.port">0</stringProp>
          <stringProp name="HTTPSampler.protocol">http</stringProp>
          <stringProp name="HTTPSampler.path">/canonical.html</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Cache-Control" elementType="Header">
                <stringProp name="Header.name">Cache-Control</stringProp>
                <stringProp name="Header.value">no-cache</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate</stringProp>
              </elementProp>
              <elementProp name="Pragma" elementType="Header">
                <stringProp name="Header.name">Pragma</stringProp>
                <stringProp name="Header.value">no-cache</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:128.0) Gecko/20100101 Firefox/128.0</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/marketplace/appdelivery/category/oes-176" enabled="true">
          <stringProp name="HTTPSampler.domain">www.microfocus.com</stringProp>
          <stringProp name="HTTPSampler.port">443</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">/marketplace/appdelivery/category/oes</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Sec-Fetch-Mode" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                <stringProp name="Header.value">navigate</stringProp>
              </elementProp>
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">https://www.microfocus.com/marketplace/appdelivery</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Site" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                <stringProp name="Header.value">same-origin</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-User" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-User</stringProp>
                <stringProp name="Header.value">?1</stringProp>
              </elementProp>
              <elementProp name="Priority" elementType="Header">
                <stringProp name="Header.name">Priority</stringProp>
                <stringProp name="Header.value">u=0, i</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/png,image/svg+xml,*/*;q=0.8</stringProp>
              </elementProp>
              <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:128.0) Gecko/20100101 Firefox/128.0</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Dest" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                <stringProp name="Header.value">document</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/success.txt-179" enabled="true">
          <stringProp name="HTTPSampler.domain">detectportal.firefox.com</stringProp>
          <stringProp name="HTTPSampler.port">0</stringProp>
          <stringProp name="HTTPSampler.protocol">http</stringProp>
          <stringProp name="HTTPSampler.path">/success.txt</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments">
              <elementProp name="ipv6" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">ipv6</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata"></stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Priority" elementType="Header">
                <stringProp name="Header.name">Priority</stringProp>
                <stringProp name="Header.value">u=4</stringProp>
              </elementProp>
              <elementProp name="Cache-Control" elementType="Header">
                <stringProp name="Header.name">Cache-Control</stringProp>
                <stringProp name="Header.value">no-cache</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate</stringProp>
              </elementProp>
              <elementProp name="Pragma" elementType="Header">
                <stringProp name="Header.name">Pragma</stringProp>
                <stringProp name="Header.value">no-cache</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:128.0) Gecko/20100101 Firefox/128.0</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/success.txt-178" enabled="true">
          <stringProp name="HTTPSampler.domain">detectportal.firefox.com</stringProp>
          <stringProp name="HTTPSampler.port">0</stringProp>
          <stringProp name="HTTPSampler.protocol">http</stringProp>
          <stringProp name="HTTPSampler.path">/success.txt</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments">
              <elementProp name="ipv4" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">ipv4</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata"></stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Priority" elementType="Header">
                <stringProp name="Header.name">Priority</stringProp>
                <stringProp name="Header.value">u=4</stringProp>
              </elementProp>
              <elementProp name="Cache-Control" elementType="Header">
                <stringProp name="Header.name">Cache-Control</stringProp>
                <stringProp name="Header.value">no-cache</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate</stringProp>
              </elementProp>
              <elementProp name="Pragma" elementType="Header">
                <stringProp name="Header.name">Pragma</stringProp>
                <stringProp name="Header.value">no-cache</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:128.0) Gecko/20100101 Firefox/128.0</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/g/collect?v=2&amp;tid=G-SWJ97E3ZRQ&amp;gtm=45je47h0v885797725za200zb71343913&amp;_p=1721489046123&amp;gcs=G111&amp;gcd=13n3n3n3n5&amp;npa=0&amp;dma=0&amp;tag_exp=0&amp;gdid=dYWJhMj&amp;cid=1264267099.1721486760&amp;ul=en-us&amp;sr=1536x864&amp;frm=0&amp;pscdl=noapi&amp;_s=2&amp;sid=1721486760&amp;sct=1&amp;seg=1&amp;dl=https%3A%2F%2Fwww.microfocus.com%2Fmarketplace%2Fappdelivery%2Fcategory%2Foes&amp;dr=https%3A%2F%2Fwww.microfocus.com%2Fmarketplace%2Fappdelivery&amp;dt=Open%20Enterprise%20Server%20%7C%20Application%20Delivery%20Marketplace%20%7C%20OpenText&amp;en=user_engagement&amp;_et=9572&amp;tfd=23311&amp;_z=fetch-180" enabled="true">
          <stringProp name="HTTPSampler.domain">analytics.google.com</stringProp>
          <stringProp name="HTTPSampler.port">443</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.path">/g/collect?v=2&amp;tid=G-SWJ97E3ZRQ&amp;gtm=45je47h0v885797725za200zb71343913&amp;_p=1721489046123&amp;gcs=G111&amp;gcd=13n3n3n3n5&amp;npa=0&amp;dma=0&amp;tag_exp=0&amp;gdid=dYWJhMj&amp;cid=1264267099.1721486760&amp;ul=en-us&amp;sr=1536x864&amp;frm=0&amp;pscdl=noapi&amp;_s=2&amp;sid=1721486760&amp;sct=1&amp;seg=1&amp;dl=https%3A%2F%2Fwww.microfocus.com%2Fmarketplace%2Fappdelivery%2Fcategory%2Foes&amp;dr=https%3A%2F%2Fwww.microfocus.com%2Fmarketplace%2Fappdelivery&amp;dt=Open%20Enterprise%20Server%20%7C%20Application%20Delivery%20Marketplace%20%7C%20OpenText&amp;en=user_engagement&amp;_et=9572&amp;tfd=23311&amp;_z=fetch</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Sec-Fetch-Mode" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                <stringProp name="Header.value">no-cors</stringProp>
              </elementProp>
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">https://www.microfocus.com/</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Site" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                <stringProp name="Header.value">cross-site</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Origin" elementType="Header">
                <stringProp name="Header.name">Origin</stringProp>
                <stringProp name="Header.value">https://www.microfocus.com</stringProp>
              </elementProp>
              <elementProp name="Priority" elementType="Header">
                <stringProp name="Header.name">Priority</stringProp>
                <stringProp name="Header.value">u=4</stringProp>
              </elementProp>
              <elementProp name="Pragma" elementType="Header">
                <stringProp name="Header.name">Pragma</stringProp>
                <stringProp name="Header.value">no-cache</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="Cache-Control" elementType="Header">
                <stringProp name="Header.name">Cache-Control</stringProp>
                <stringProp name="Header.value">no-cache</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:128.0) Gecko/20100101 Firefox/128.0</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Dest" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                <stringProp name="Header.value">empty</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/inter/font-files/Inter-ExtraLightItalic.woff-182" enabled="true">
          <stringProp name="HTTPSampler.domain">rsms.me</stringProp>
          <stringProp name="HTTPSampler.port">443</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
          <stringProp name="HTTPSampler.path">/inter/font-files/Inter-ExtraLightItalic.woff</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments">
              <elementProp name="v" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">v</stringProp>
                <stringProp name="Argument.value">3.19</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Sec-Fetch-Mode" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                <stringProp name="Header.value">cors</stringProp>
              </elementProp>
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">https://www.microfocus.com/</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Site" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                <stringProp name="Header.value">cross-site</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Origin" elementType="Header">
                <stringProp name="Header.name">Origin</stringProp>
                <stringProp name="Header.value">https://www.microfocus.com</stringProp>
              </elementProp>
              <elementProp name="Priority" elementType="Header">
                <stringProp name="Header.name">Priority</stringProp>
                <stringProp name="Header.value">u=2</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">application/font-woff2;q=1.0,application/font-woff;q=0.9,*/*;q=0.8</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:128.0) Gecko/20100101 Firefox/128.0</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Dest" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                <stringProp name="Header.value">font</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/inter/font-files/Inter-Light.woff-185" enabled="true">
          <stringProp name="HTTPSampler.domain">rsms.me</stringProp>
          <stringProp name="HTTPSampler.port">443</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
          <stringProp name="HTTPSampler.path">/inter/font-files/Inter-Light.woff</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments">
              <elementProp name="v" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">v</stringProp>
                <stringProp name="Argument.value">3.19</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Sec-Fetch-Mode" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                <stringProp name="Header.value">cors</stringProp>
              </elementProp>
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">https://www.microfocus.com/</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Site" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                <stringProp name="Header.value">cross-site</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Origin" elementType="Header">
                <stringProp name="Header.name">Origin</stringProp>
                <stringProp name="Header.value">https://www.microfocus.com</stringProp>
              </elementProp>
              <elementProp name="Priority" elementType="Header">
                <stringProp name="Header.name">Priority</stringProp>
                <stringProp name="Header.value">u=2</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">application/font-woff2;q=1.0,application/font-woff;q=0.9,*/*;q=0.8</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:128.0) Gecko/20100101 Firefox/128.0</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Dest" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                <stringProp name="Header.value">font</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/inter/font-files/Inter-SemiBold.woff-187" enabled="true">
          <stringProp name="HTTPSampler.domain">rsms.me</stringProp>
          <stringProp name="HTTPSampler.port">443</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
          <stringProp name="HTTPSampler.path">/inter/font-files/Inter-SemiBold.woff</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments">
              <elementProp name="v" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">v</stringProp>
                <stringProp name="Argument.value">3.19</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Sec-Fetch-Mode" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                <stringProp name="Header.value">cors</stringProp>
              </elementProp>
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">https://www.microfocus.com/</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Site" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                <stringProp name="Header.value">cross-site</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Origin" elementType="Header">
                <stringProp name="Header.name">Origin</stringProp>
                <stringProp name="Header.value">https://www.microfocus.com</stringProp>
              </elementProp>
              <elementProp name="Priority" elementType="Header">
                <stringProp name="Header.name">Priority</stringProp>
                <stringProp name="Header.value">u=2</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">application/font-woff2;q=1.0,application/font-woff;q=0.9,*/*;q=0.8</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:128.0) Gecko/20100101 Firefox/128.0</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Dest" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                <stringProp name="Header.value">font</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/inter/font-files/Inter-Bold.woff-181" enabled="true">
          <stringProp name="HTTPSampler.domain">rsms.me</stringProp>
          <stringProp name="HTTPSampler.port">443</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
          <stringProp name="HTTPSampler.path">/inter/font-files/Inter-Bold.woff</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments">
              <elementProp name="v" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">v</stringProp>
                <stringProp name="Argument.value">3.19</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Sec-Fetch-Mode" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                <stringProp name="Header.value">cors</stringProp>
              </elementProp>
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">https://www.microfocus.com/</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Site" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                <stringProp name="Header.value">cross-site</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Origin" elementType="Header">
                <stringProp name="Header.name">Origin</stringProp>
                <stringProp name="Header.value">https://www.microfocus.com</stringProp>
              </elementProp>
              <elementProp name="Priority" elementType="Header">
                <stringProp name="Header.name">Priority</stringProp>
                <stringProp name="Header.value">u=2</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">application/font-woff2;q=1.0,application/font-woff;q=0.9,*/*;q=0.8</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:128.0) Gecko/20100101 Firefox/128.0</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Dest" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                <stringProp name="Header.value">font</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/marketplace/dist/clientlayout.bundle.js-190" enabled="true">
          <stringProp name="HTTPSampler.domain">www.microfocus.com</stringProp>
          <stringProp name="HTTPSampler.port">443</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.path">/marketplace/dist/clientlayout.bundle.js</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Sec-Fetch-Mode" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                <stringProp name="Header.value">no-cors</stringProp>
              </elementProp>
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">https://www.microfocus.com/marketplace/appdelivery/category/oes</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Site" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                <stringProp name="Header.value">same-origin</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:128.0) Gecko/20100101 Firefox/128.0</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Dest" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                <stringProp name="Header.value">script</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/marketplace/dist/vendor.bundle.js-184" enabled="true">
          <stringProp name="HTTPSampler.domain">www.microfocus.com</stringProp>
          <stringProp name="HTTPSampler.port">443</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.path">/marketplace/dist/vendor.bundle.js</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Sec-Fetch-Mode" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                <stringProp name="Header.value">no-cors</stringProp>
              </elementProp>
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">https://www.microfocus.com/marketplace/appdelivery/category/oes</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Site" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                <stringProp name="Header.value">same-origin</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:128.0) Gecko/20100101 Firefox/128.0</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Dest" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                <stringProp name="Header.value">script</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/marketplace/dist/commons.css-188" enabled="true">
          <stringProp name="HTTPSampler.domain">www.microfocus.com</stringProp>
          <stringProp name="HTTPSampler.port">443</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.path">/marketplace/dist/commons.css</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Sec-Fetch-Mode" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                <stringProp name="Header.value">no-cors</stringProp>
              </elementProp>
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">https://www.microfocus.com/marketplace/appdelivery/category/oes</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Site" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                <stringProp name="Header.value">same-origin</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Priority" elementType="Header">
                <stringProp name="Header.name">Priority</stringProp>
                <stringProp name="Header.value">u=2</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">text/css,*/*;q=0.1</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:128.0) Gecko/20100101 Firefox/128.0</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Dest" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                <stringProp name="Header.value">style</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/marketplace/dist/generic.css-183" enabled="true">
          <stringProp name="HTTPSampler.domain">www.microfocus.com</stringProp>
          <stringProp name="HTTPSampler.port">443</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.path">/marketplace/dist/generic.css</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Sec-Fetch-Mode" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                <stringProp name="Header.value">no-cors</stringProp>
              </elementProp>
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">https://www.microfocus.com/marketplace/appdelivery/category/oes</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Site" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                <stringProp name="Header.value">same-origin</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Priority" elementType="Header">
                <stringProp name="Header.name">Priority</stringProp>
                <stringProp name="Header.value">u=2</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">text/css,*/*;q=0.1</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:128.0) Gecko/20100101 Firefox/128.0</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Dest" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                <stringProp name="Header.value">style</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/marketplace/dist/mktp.bundle.js-191" enabled="true">
          <stringProp name="HTTPSampler.domain">www.microfocus.com</stringProp>
          <stringProp name="HTTPSampler.port">443</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.path">/marketplace/dist/mktp.bundle.js</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Sec-Fetch-Mode" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                <stringProp name="Header.value">no-cors</stringProp>
              </elementProp>
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">https://www.microfocus.com/marketplace/appdelivery/category/oes</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Site" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                <stringProp name="Header.value">same-origin</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:128.0) Gecko/20100101 Firefox/128.0</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Dest" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                <stringProp name="Header.value">script</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/marketplace/dist/commons.bundle.js-186" enabled="true">
          <stringProp name="HTTPSampler.domain">www.microfocus.com</stringProp>
          <stringProp name="HTTPSampler.port">443</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.path">/marketplace/dist/commons.bundle.js</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Sec-Fetch-Mode" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                <stringProp name="Header.value">no-cors</stringProp>
              </elementProp>
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">https://www.microfocus.com/marketplace/appdelivery/category/oes</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Site" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                <stringProp name="Header.value">same-origin</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:128.0) Gecko/20100101 Firefox/128.0</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Dest" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                <stringProp name="Header.value">script</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/marketplace/dist/client.css-189" enabled="true">
          <stringProp name="HTTPSampler.domain">www.microfocus.com</stringProp>
          <stringProp name="HTTPSampler.port">443</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.path">/marketplace/dist/client.css</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Sec-Fetch-Mode" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                <stringProp name="Header.value">no-cors</stringProp>
              </elementProp>
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">https://www.microfocus.com/marketplace/appdelivery/category/oes</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Site" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                <stringProp name="Header.value">same-origin</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Priority" elementType="Header">
                <stringProp name="Header.name">Priority</stringProp>
                <stringProp name="Header.value">u=2</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">text/css,*/*;q=0.1</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:128.0) Gecko/20100101 Firefox/128.0</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Dest" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                <stringProp name="Header.value">style</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/marketplace/signin/sso-192" enabled="true">
          <stringProp name="HTTPSampler.domain">www.microfocus.com</stringProp>
          <stringProp name="HTTPSampler.port">443</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">/marketplace/signin/sso</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Sec-Fetch-Mode" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                <stringProp name="Header.value">navigate</stringProp>
              </elementProp>
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">https://www.microfocus.com/marketplace/appdelivery/category/oes</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Site" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                <stringProp name="Header.value">same-origin</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Priority" elementType="Header">
                <stringProp name="Header.name">Priority</stringProp>
                <stringProp name="Header.value">u=4</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/png,image/svg+xml,*/*;q=0.8</stringProp>
              </elementProp>
              <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:128.0) Gecko/20100101 Firefox/128.0</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Dest" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                <stringProp name="Header.value">iframe</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/tag/iu69ce0l9t-193" enabled="true">
          <stringProp name="HTTPSampler.domain">www.clarity.ms</stringProp>
          <stringProp name="HTTPSampler.port">443</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.path">/tag/iu69ce0l9t</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Sec-Fetch-Mode" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                <stringProp name="Header.value">no-cors</stringProp>
              </elementProp>
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">https://www.microfocus.com/</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Site" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                <stringProp name="Header.value">cross-site</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:128.0) Gecko/20100101 Firefox/128.0</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Dest" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                <stringProp name="Header.value">script</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ProxyControl guiclass="ProxyControlGui" testclass="ProxyControl" testname="HTTP(S) Test Script Recorder" enabled="false">
        <stringProp name="ProxyControlGui.port">8888</stringProp>
        <collectionProp name="ProxyControlGui.exclude_list"/>
        <collectionProp name="ProxyControlGui.include_list"/>
        <boolProp name="ProxyControlGui.capture_http_headers">true</boolProp>
        <intProp name="ProxyControlGui.grouping_mode">0</intProp>
        <boolProp name="ProxyControlGui.add_assertion">false</boolProp>
        <stringProp name="ProxyControlGui.sampler_type_name"></stringProp>
        <boolProp name="ProxyControlGui.sampler_redirect_automatically">false</boolProp>
        <boolProp name="ProxyControlGui.sampler_follow_redirects">true</boolProp>
        <boolProp name="ProxyControlGui.use_keepalive">true</boolProp>
        <boolProp name="ProxyControlGui.detect_graphql_request">true</boolProp>
        <boolProp name="ProxyControlGui.sampler_download_images">false</boolProp>
        <intProp name="ProxyControlGui.proxy_http_sampler_naming_mode">0</intProp>
        <stringProp name="ProxyControlGui.default_encoding"></stringProp>
        <stringProp name="ProxyControlGui.proxy_prefix_http_sampler_name"></stringProp>
        <stringProp name="ProxyControlGui.proxy_pause_http_sampler"></stringProp>
        <boolProp name="ProxyControlGui.notify_child_sl_filtered">false</boolProp>
        <boolProp name="ProxyControlGui.regex_match">false</boolProp>
        <stringProp name="ProxyControlGui.content_type_include"></stringProp>
        <stringProp name="ProxyControlGui.content_type_exclude"></stringProp>
      </ProxyControl>
      <hashTree/>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
